
EDC25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aca4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800ae90  0800ae90  0001ae90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2f8  0800b2f8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2f8  0800b2f8  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2f8  0800b2f8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200001ec  0800b4ec  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  0800b4ec  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee55  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c0  00000000  00000000  0002f0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  00031970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b42  00000000  00000000  00032808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b793  00000000  00000000  0003334a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001249c  00000000  00000000  0004eadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b463  00000000  00000000  00060f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005110  00000000  00000000  000fc3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  001014ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ae74 	.word	0x0800ae74

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	0800ae74 	.word	0x0800ae74

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2uiz>:
 80011e8:	0042      	lsls	r2, r0, #1
 80011ea:	d20e      	bcs.n	800120a <__aeabi_f2uiz+0x22>
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30b      	bcc.n	800120a <__aeabi_f2uiz+0x22>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d409      	bmi.n	8001210 <__aeabi_f2uiz+0x28>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	fa23 f002 	lsr.w	r0, r3, r2
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr
 8001210:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001214:	d101      	bne.n	800121a <__aeabi_f2uiz+0x32>
 8001216:	0242      	lsls	r2, r0, #9
 8001218:	d102      	bne.n	8001220 <__aeabi_f2uiz+0x38>
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	4770      	bx	lr
 8001220:	f04f 0000 	mov.w	r0, #0
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <__aeabi_d2lz>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4605      	mov	r5, r0
 800122c:	460c      	mov	r4, r1
 800122e:	2200      	movs	r2, #0
 8001230:	2300      	movs	r3, #0
 8001232:	4628      	mov	r0, r5
 8001234:	4621      	mov	r1, r4
 8001236:	f7ff fc2d 	bl	8000a94 <__aeabi_dcmplt>
 800123a:	b928      	cbnz	r0, 8001248 <__aeabi_d2lz+0x20>
 800123c:	4628      	mov	r0, r5
 800123e:	4621      	mov	r1, r4
 8001240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001244:	f000 b80a 	b.w	800125c <__aeabi_d2ulz>
 8001248:	4628      	mov	r0, r5
 800124a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800124e:	f000 f805 	bl	800125c <__aeabi_d2ulz>
 8001252:	4240      	negs	r0, r0
 8001254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	bf00      	nop

0800125c <__aeabi_d2ulz>:
 800125c:	b5d0      	push	{r4, r6, r7, lr}
 800125e:	2200      	movs	r2, #0
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <__aeabi_d2ulz+0x34>)
 8001262:	4606      	mov	r6, r0
 8001264:	460f      	mov	r7, r1
 8001266:	f7ff f9a3 	bl	80005b0 <__aeabi_dmul>
 800126a:	f7ff fc79 	bl	8000b60 <__aeabi_d2uiz>
 800126e:	4604      	mov	r4, r0
 8001270:	f7ff f924 	bl	80004bc <__aeabi_ui2d>
 8001274:	2200      	movs	r2, #0
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <__aeabi_d2ulz+0x38>)
 8001278:	f7ff f99a 	bl	80005b0 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4630      	mov	r0, r6
 8001282:	4639      	mov	r1, r7
 8001284:	f7fe ffdc 	bl	8000240 <__aeabi_dsub>
 8001288:	f7ff fc6a 	bl	8000b60 <__aeabi_d2uiz>
 800128c:	4621      	mov	r1, r4
 800128e:	bdd0      	pop	{r4, r6, r7, pc}
 8001290:	3df00000 	.word	0x3df00000
 8001294:	41f00000 	.word	0x41f00000

08001298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_DMA_Init+0x48>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <MX_DMA_Init+0x48>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <MX_DMA_Init+0x48>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200d      	movs	r0, #13
 80012bc:	f001 fe31 	bl	8002f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012c0:	200d      	movs	r0, #13
 80012c2:	f001 fe4a 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2010      	movs	r0, #16
 80012cc:	f001 fe29 	bl	8002f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012d0:	2010      	movs	r0, #16
 80012d2:	f001 fe42 	bl	8002f5a <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <MX_GPIO_Init+0xd0>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <MX_GPIO_Init+0xd0>)
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_in4_Pin|F_in3_Pin|F_in2_Pin|F_in1_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001360:	f002 fc2e 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_in4_Pin|R_in3_Pin|R_in2_Pin|R_in1_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800136a:	4814      	ldr	r0, [pc, #80]	; (80013bc <MX_GPIO_Init+0xd8>)
 800136c:	f002 fc28 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = F_in4_Pin|F_in3_Pin|F_in2_Pin|F_in1_Pin;
 8001370:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <MX_GPIO_Init+0xd4>)
 800138a:	f002 fa85 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = R_in4_Pin|R_in3_Pin|R_in2_Pin|R_in1_Pin;
 800138e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2302      	movs	r3, #2
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_GPIO_Init+0xd8>)
 80013a8:	f002 fa76 	bl	8003898 <HAL_GPIO_Init>

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40011000 	.word	0x40011000

080013c0 <jy62_Init>:
struct Angl Angle;                  //储存角度值
struct Temp Temperature;                //储存温度值
/***********************接口****************************/

void jy62_Init(UART_HandleTypeDef *huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  jy62_huart = huart;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <jy62_Init+0x24>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_DMA(jy62_huart, jy62Receive, JY62_MESSAGE_LENGTH);
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <jy62_Init+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	220b      	movs	r2, #11
 80013d4:	4904      	ldr	r1, [pc, #16]	; (80013e8 <jy62_Init+0x28>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fa44 	bl	8005864 <HAL_UART_Receive_DMA>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000220 	.word	0x20000220
 80013e8:	20000208 	.word	0x20000208

080013ec <jy62MessageRecord>:
//    }
//  }
//  HAL_UART_Receive_DMA(jy62_huart, jy62Receive, JY62_MESSAGE_LENGTH);    //吃完一次jy62Receive数组，继续吃下一个
//}
void jy62MessageRecord(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  static uint8_t i = 0, sum = 0;
  for (int j = 0; j < JY62_MESSAGE_LENGTH; j++){
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	e04c      	b.n	8001492 <jy62MessageRecord+0xa6>
    if (i == 0 && jy62Receive[j] != 0x55) continue;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <jy62MessageRecord+0xc4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d106      	bne.n	800140e <jy62MessageRecord+0x22>
 8001400:	4a2c      	ldr	r2, [pc, #176]	; (80014b4 <jy62MessageRecord+0xc8>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b55      	cmp	r3, #85	; 0x55
 800140c:	d13d      	bne.n	800148a <jy62MessageRecord+0x9e>
    if (i == 10){
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <jy62MessageRecord+0xc4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d11f      	bne.n	8001456 <jy62MessageRecord+0x6a>
        if (sum == jy62Receive[j]){
 8001416:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <jy62MessageRecord+0xc8>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <jy62MessageRecord+0xcc>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d10f      	bne.n	8001448 <jy62MessageRecord+0x5c>
            jy62Message[i++] = jy62Receive[j];
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <jy62MessageRecord+0xc4>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	b2d1      	uxtb	r1, r2
 8001430:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <jy62MessageRecord+0xc4>)
 8001432:	7011      	strb	r1, [r2, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <jy62MessageRecord+0xc8>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <jy62MessageRecord+0xd0>)
 8001442:	545a      	strb	r2, [r3, r1]
            Decode();
 8001444:	f000 fa16 	bl	8001874 <Decode>
        }
        i = 0;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <jy62MessageRecord+0xc4>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
        sum = 0;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <jy62MessageRecord+0xcc>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
        continue;
 8001454:	e01a      	b.n	800148c <jy62MessageRecord+0xa0>
    }
    sum += jy62Receive[j];
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <jy62MessageRecord+0xc8>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <jy62MessageRecord+0xcc>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4413      	add	r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <jy62MessageRecord+0xcc>)
 800146a:	701a      	strb	r2, [r3, #0]
    jy62Message[i++] = jy62Receive[j];
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <jy62MessageRecord+0xc4>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	b2d1      	uxtb	r1, r2
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <jy62MessageRecord+0xc4>)
 8001476:	7011      	strb	r1, [r2, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <jy62MessageRecord+0xc8>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <jy62MessageRecord+0xd0>)
 8001486:	545a      	strb	r2, [r3, r1]
 8001488:	e000      	b.n	800148c <jy62MessageRecord+0xa0>
    if (i == 0 && jy62Receive[j] != 0x55) continue;
 800148a:	bf00      	nop
  for (int j = 0; j < JY62_MESSAGE_LENGTH; j++){
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3301      	adds	r3, #1
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0a      	cmp	r3, #10
 8001496:	ddaf      	ble.n	80013f8 <jy62MessageRecord+0xc>
  }
  HAL_UART_Receive_DMA(jy62_huart, jy62Receive, JY62_MESSAGE_LENGTH);
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <jy62MessageRecord+0xd4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	220b      	movs	r2, #11
 800149e:	4905      	ldr	r1, [pc, #20]	; (80014b4 <jy62MessageRecord+0xc8>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 f9df 	bl	8005864 <HAL_UART_Receive_DMA>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000024c 	.word	0x2000024c
 80014b4:	20000208 	.word	0x20000208
 80014b8:	2000024d 	.word	0x2000024d
 80014bc:	20000214 	.word	0x20000214
 80014c0:	20000220 	.word	0x20000220

080014c4 <SetBaud>:

void SetBaud(int Baud)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(Baud == 115200)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 80014d2:	d108      	bne.n	80014e6 <SetBaud+0x22>
  {
    HAL_UART_Transmit(jy62_huart,setBaud115200, 3, HAL_MAX_DELAY);
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <SetBaud+0x44>)
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
 80014dc:	2203      	movs	r2, #3
 80014de:	490b      	ldr	r1, [pc, #44]	; (800150c <SetBaud+0x48>)
 80014e0:	f004 f93d 	bl	800575e <HAL_UART_Transmit>
  }
  else if(Baud == 9600)
  {
    HAL_UART_Transmit(jy62_huart, setBaud9600, 3, HAL_MAX_DELAY);
  }
}
 80014e4:	e00b      	b.n	80014fe <SetBaud+0x3a>
  else if(Baud == 9600)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 80014ec:	d107      	bne.n	80014fe <SetBaud+0x3a>
    HAL_UART_Transmit(jy62_huart, setBaud9600, 3, HAL_MAX_DELAY);
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SetBaud+0x44>)
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	2203      	movs	r2, #3
 80014f8:	4905      	ldr	r1, [pc, #20]	; (8001510 <SetBaud+0x4c>)
 80014fa:	f004 f930 	bl	800575e <HAL_UART_Transmit>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000220 	.word	0x20000220
 800150c:	20000008 	.word	0x20000008
 8001510:	2000000c 	.word	0x2000000c

08001514 <SetHorizontal>:

void SetHorizontal()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(jy62_huart, setHorizontal, 3, HAL_MAX_DELAY);
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <SetHorizontal+0x18>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	2203      	movs	r2, #3
 8001522:	4903      	ldr	r1, [pc, #12]	; (8001530 <SetHorizontal+0x1c>)
 8001524:	f004 f91b 	bl	800575e <HAL_UART_Transmit>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000220 	.word	0x20000220
 8001530:	20000010 	.word	0x20000010

08001534 <InitAngle>:
{
  HAL_UART_Transmit(jy62_huart, setVertical, 3, HAL_MAX_DELAY);
}

void InitAngle()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(jy62_huart, initAngle, 3, HAL_MAX_DELAY);
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <InitAngle+0x18>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	2203      	movs	r2, #3
 8001542:	4903      	ldr	r1, [pc, #12]	; (8001550 <InitAngle+0x1c>)
 8001544:	f004 f90b 	bl	800575e <HAL_UART_Transmit>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000220 	.word	0x20000220
 8001550:	20000000 	.word	0x20000000

08001554 <Calibrate>:

void Calibrate()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(jy62_huart, calibrateAcce, 3, HAL_MAX_DELAY);
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <Calibrate+0x18>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2203      	movs	r2, #3
 8001562:	4903      	ldr	r1, [pc, #12]	; (8001570 <Calibrate+0x1c>)
 8001564:	f004 f8fb 	bl	800575e <HAL_UART_Transmit>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000220 	.word	0x20000220
 8001570:	20000004 	.word	0x20000004

08001574 <SleepOrAwake>:

void SleepOrAwake()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(jy62_huart, sleepAndAwake, 3, HAL_MAX_DELAY);
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <SleepOrAwake+0x18>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	2203      	movs	r2, #3
 8001582:	4903      	ldr	r1, [pc, #12]	; (8001590 <SleepOrAwake+0x1c>)
 8001584:	f004 f8eb 	bl	800575e <HAL_UART_Transmit>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000220 	.word	0x20000220
 8001590:	20000014 	.word	0x20000014

08001594 <GetYaw>:
float GetPitch()
{
  return Angle.pitch;
}
float GetYaw()
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return Angle.yaw;
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <GetYaw+0x10>)
 800159a:	689b      	ldr	r3, [r3, #8]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	2000023c 	.word	0x2000023c

080015a8 <DecodeAngle>:


/***************************************************/

void DecodeAngle()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

  Angle.roll = (float)((jy62Message[3] << 8) | jy62Message[2]) / 32768 * 180;
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <DecodeAngle+0xa4>)
 80015ae:	78db      	ldrb	r3, [r3, #3]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	4a25      	ldr	r2, [pc, #148]	; (800164c <DecodeAngle+0xa4>)
 80015b6:	7892      	ldrb	r2, [r2, #2]
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	4313      	orrs	r3, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fbf9 	bl	8000db4 <__aeabi_i2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fcfb 	bl	8000fc4 <__aeabi_fdiv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	491f      	ldr	r1, [pc, #124]	; (8001650 <DecodeAngle+0xa8>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fc42 	bl	8000e5c <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <DecodeAngle+0xac>)
 80015de:	601a      	str	r2, [r3, #0]
  Angle.pitch = (float)((jy62Message[5] << 8) | jy62Message[4]) / 32768 * 180;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <DecodeAngle+0xa4>)
 80015e2:	795b      	ldrb	r3, [r3, #5]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	4a18      	ldr	r2, [pc, #96]	; (800164c <DecodeAngle+0xa4>)
 80015ea:	7912      	ldrb	r2, [r2, #4]
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	4313      	orrs	r3, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fbdf 	bl	8000db4 <__aeabi_i2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fce1 	bl	8000fc4 <__aeabi_fdiv>
 8001602:	4603      	mov	r3, r0
 8001604:	4912      	ldr	r1, [pc, #72]	; (8001650 <DecodeAngle+0xa8>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fc28 	bl	8000e5c <__aeabi_fmul>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <DecodeAngle+0xac>)
 8001612:	605a      	str	r2, [r3, #4]
  Angle.yaw = (float)((jy62Message[7] << 8) | jy62Message[6]) / 32768 * 180;
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <DecodeAngle+0xa4>)
 8001616:	79db      	ldrb	r3, [r3, #7]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <DecodeAngle+0xa4>)
 800161e:	7992      	ldrb	r2, [r2, #6]
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	4313      	orrs	r3, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fbc5 	bl	8000db4 <__aeabi_i2f>
 800162a:	4603      	mov	r3, r0
 800162c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fcc7 	bl	8000fc4 <__aeabi_fdiv>
 8001636:	4603      	mov	r3, r0
 8001638:	4905      	ldr	r1, [pc, #20]	; (8001650 <DecodeAngle+0xa8>)
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc0e 	bl	8000e5c <__aeabi_fmul>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <DecodeAngle+0xac>)
 8001646:	609a      	str	r2, [r3, #8]
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000214 	.word	0x20000214
 8001650:	43340000 	.word	0x43340000
 8001654:	2000023c 	.word	0x2000023c

08001658 <DecodeAccelerate>:

void DecodeAccelerate()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  Accelerate.accelerate_x = (float)((jy62Message[3] << 8) | jy62Message[2]) / 32768 * 16 * g ;
 800165c:	4b40      	ldr	r3, [pc, #256]	; (8001760 <DecodeAccelerate+0x108>)
 800165e:	78db      	ldrb	r3, [r3, #3]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	4a3e      	ldr	r2, [pc, #248]	; (8001760 <DecodeAccelerate+0x108>)
 8001666:	7892      	ldrb	r2, [r2, #2]
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	4313      	orrs	r3, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fba1 	bl	8000db4 <__aeabi_i2f>
 8001672:	4603      	mov	r3, r0
 8001674:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fca3 	bl	8000fc4 <__aeabi_fdiv>
 800167e:	4603      	mov	r3, r0
 8001680:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fbe9 	bl	8000e5c <__aeabi_fmul>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff37 	bl	8000500 <__aeabi_f2d>
 8001692:	a331      	add	r3, pc, #196	; (adr r3, 8001758 <DecodeAccelerate+0x100>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ff8a 	bl	80005b0 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa7c 	bl	8000ba0 <__aeabi_d2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <DecodeAccelerate+0x10c>)
 80016ac:	6013      	str	r3, [r2, #0]
  Accelerate.accelerate_y = (float)((jy62Message[5] << 8) | jy62Message[4]) / 32768 * 16 * g ;
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <DecodeAccelerate+0x108>)
 80016b0:	795b      	ldrb	r3, [r3, #5]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	4a2a      	ldr	r2, [pc, #168]	; (8001760 <DecodeAccelerate+0x108>)
 80016b8:	7912      	ldrb	r2, [r2, #4]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	4313      	orrs	r3, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb78 	bl	8000db4 <__aeabi_i2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fc7a 	bl	8000fc4 <__aeabi_fdiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fbc0 	bl	8000e5c <__aeabi_fmul>
 80016dc:	4603      	mov	r3, r0
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff0e 	bl	8000500 <__aeabi_f2d>
 80016e4:	a31c      	add	r3, pc, #112	; (adr r3, 8001758 <DecodeAccelerate+0x100>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ff61 	bl	80005b0 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa53 	bl	8000ba0 <__aeabi_d2f>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <DecodeAccelerate+0x10c>)
 80016fe:	6053      	str	r3, [r2, #4]
  Accelerate.accelerate_z = (float)((jy62Message[7] << 8) | jy62Message[6]) / 32768 * 16 * g ;
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <DecodeAccelerate+0x108>)
 8001702:	79db      	ldrb	r3, [r3, #7]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	4a15      	ldr	r2, [pc, #84]	; (8001760 <DecodeAccelerate+0x108>)
 800170a:	7992      	ldrb	r2, [r2, #6]
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	4313      	orrs	r3, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fb4f 	bl	8000db4 <__aeabi_i2f>
 8001716:	4603      	mov	r3, r0
 8001718:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fc51 	bl	8000fc4 <__aeabi_fdiv>
 8001722:	4603      	mov	r3, r0
 8001724:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fb97 	bl	8000e5c <__aeabi_fmul>
 800172e:	4603      	mov	r3, r0
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fee5 	bl	8000500 <__aeabi_f2d>
 8001736:	a308      	add	r3, pc, #32	; (adr r3, 8001758 <DecodeAccelerate+0x100>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe ff38 	bl	80005b0 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fa2a 	bl	8000ba0 <__aeabi_d2f>
 800174c:	4603      	mov	r3, r0
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <DecodeAccelerate+0x10c>)
 8001750:	6093      	str	r3, [r2, #8]
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	9999999a 	.word	0x9999999a
 800175c:	40239999 	.word	0x40239999
 8001760:	20000214 	.word	0x20000214
 8001764:	20000224 	.word	0x20000224

08001768 <DecodeVelocity>:

void DecodeVelocity()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  Velocity.velocity_x = (float)((jy62Message[3] << 8) | jy62Message[2]) / 32768 * 2000 ;
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <DecodeVelocity+0xa4>)
 800176e:	78db      	ldrb	r3, [r3, #3]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <DecodeVelocity+0xa4>)
 8001776:	7892      	ldrb	r2, [r2, #2]
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	4313      	orrs	r3, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fb19 	bl	8000db4 <__aeabi_i2f>
 8001782:	4603      	mov	r3, r0
 8001784:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fc1b 	bl	8000fc4 <__aeabi_fdiv>
 800178e:	4603      	mov	r3, r0
 8001790:	491f      	ldr	r1, [pc, #124]	; (8001810 <DecodeVelocity+0xa8>)
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fb62 	bl	8000e5c <__aeabi_fmul>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <DecodeVelocity+0xac>)
 800179e:	601a      	str	r2, [r3, #0]
  Velocity.velocity_y = (float)((jy62Message[5] << 8) | jy62Message[4]) / 32768 * 2000 ;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <DecodeVelocity+0xa4>)
 80017a2:	795b      	ldrb	r3, [r3, #5]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	4a18      	ldr	r2, [pc, #96]	; (800180c <DecodeVelocity+0xa4>)
 80017aa:	7912      	ldrb	r2, [r2, #4]
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	4313      	orrs	r3, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff faff 	bl	8000db4 <__aeabi_i2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fc01 	bl	8000fc4 <__aeabi_fdiv>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4912      	ldr	r1, [pc, #72]	; (8001810 <DecodeVelocity+0xa8>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fb48 	bl	8000e5c <__aeabi_fmul>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <DecodeVelocity+0xac>)
 80017d2:	605a      	str	r2, [r3, #4]
  Velocity.velocity_z = (float)((jy62Message[7] << 8) | jy62Message[6]) / 32768 * 2000 ;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <DecodeVelocity+0xa4>)
 80017d6:	79db      	ldrb	r3, [r3, #7]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <DecodeVelocity+0xa4>)
 80017de:	7992      	ldrb	r2, [r2, #6]
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	4313      	orrs	r3, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fae5 	bl	8000db4 <__aeabi_i2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fbe7 	bl	8000fc4 <__aeabi_fdiv>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4905      	ldr	r1, [pc, #20]	; (8001810 <DecodeVelocity+0xa8>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fb2e 	bl	8000e5c <__aeabi_fmul>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <DecodeVelocity+0xac>)
 8001806:	609a      	str	r2, [r3, #8]
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000214 	.word	0x20000214
 8001810:	44fa0000 	.word	0x44fa0000
 8001814:	20000230 	.word	0x20000230

08001818 <DecodeTemperature>:

void DecodeTemperature()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  Temperature.temperature = ((short)(jy62Message[9]) << 8 | jy62Message[8]) / 340 + 36.53;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <DecodeTemperature+0x50>)
 800181e:	7a5b      	ldrb	r3, [r3, #9]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	4a10      	ldr	r2, [pc, #64]	; (8001868 <DecodeTemperature+0x50>)
 8001826:	7a12      	ldrb	r2, [r2, #8]
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	4313      	orrs	r3, r2
 800182c:	4a0f      	ldr	r2, [pc, #60]	; (800186c <DecodeTemperature+0x54>)
 800182e:	fb82 1203 	smull	r1, r2, r2, r3
 8001832:	11d2      	asrs	r2, r2, #7
 8001834:	17db      	asrs	r3, r3, #31
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe4f 	bl	80004dc <__aeabi_i2d>
 800183e:	a308      	add	r3, pc, #32	; (adr r3, 8001860 <DecodeTemperature+0x48>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fcfe 	bl	8000244 <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f9a6 	bl	8000ba0 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	4a06      	ldr	r2, [pc, #24]	; (8001870 <DecodeTemperature+0x58>)
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	0a3d70a4 	.word	0x0a3d70a4
 8001864:	404243d7 	.word	0x404243d7
 8001868:	20000214 	.word	0x20000214
 800186c:	60606061 	.word	0x60606061
 8001870:	20000248 	.word	0x20000248

08001874 <Decode>:


void Decode()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  switch (jy62Message[1])
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <Decode+0x38>)
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b53      	cmp	r3, #83	; 0x53
 8001880:	d00c      	beq.n	800189c <Decode+0x28>
 8001882:	2b53      	cmp	r3, #83	; 0x53
 8001884:	dc0d      	bgt.n	80018a2 <Decode+0x2e>
 8001886:	2b51      	cmp	r3, #81	; 0x51
 8001888:	d002      	beq.n	8001890 <Decode+0x1c>
 800188a:	2b52      	cmp	r3, #82	; 0x52
 800188c:	d003      	beq.n	8001896 <Decode+0x22>
 800188e:	e008      	b.n	80018a2 <Decode+0x2e>
  {
      case 0x51: DecodeAccelerate(); break;
 8001890:	f7ff fee2 	bl	8001658 <DecodeAccelerate>
 8001894:	e005      	b.n	80018a2 <Decode+0x2e>
    case 0x52: DecodeVelocity(); break;
 8001896:	f7ff ff67 	bl	8001768 <DecodeVelocity>
 800189a:	e002      	b.n	80018a2 <Decode+0x2e>
    case 0x53: DecodeAngle(); break;
 800189c:	f7ff fe84 	bl	80015a8 <DecodeAngle>
 80018a0:	bf00      	nop
  }
  DecodeTemperature();
 80018a2:	f7ff ffb9 	bl	8001818 <DecodeTemperature>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000214 	.word	0x20000214

080018b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b4:	f001 f9fc 	bl	8002cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b8:	f000 f8a0 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018bc:	f7ff fd12 	bl	80012e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c0:	f7ff fcea 	bl	8001298 <MX_DMA_Init>
  MX_TIM1_Init();
 80018c4:	f000 fcb0 	bl	8002228 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018c8:	f000 fd72 	bl	80023b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018cc:	f000 fdc4 	bl	8002458 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018d0:	f000 fe16 	bl	8002500 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018d4:	f000 fe68 	bl	80025a8 <MX_TIM5_Init>
  MX_TIM6_Init();
 80018d8:	f000 feba 	bl	8002650 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80018dc:	f001 f84c 	bl	8002978 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80018e0:	f001 f874 	bl	80029cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	// Output PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //FL
 80018e4:	2100      	movs	r1, #0
 80018e6:	4831      	ldr	r0, [pc, #196]	; (80019ac <main+0xfc>)
 80018e8:	f002 fe9a 	bl	8004620 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //FR
 80018ec:	2104      	movs	r1, #4
 80018ee:	482f      	ldr	r0, [pc, #188]	; (80019ac <main+0xfc>)
 80018f0:	f002 fe96 	bl	8004620 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //RL
 80018f4:	2108      	movs	r1, #8
 80018f6:	482d      	ldr	r0, [pc, #180]	; (80019ac <main+0xfc>)
 80018f8:	f002 fe92 	bl	8004620 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //RR
 80018fc:	210c      	movs	r1, #12
 80018fe:	482b      	ldr	r0, [pc, #172]	; (80019ac <main+0xfc>)
 8001900:	f002 fe8e 	bl	8004620 <HAL_TIM_PWM_Start>
	// Measure
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //FL
 8001904:	213c      	movs	r1, #60	; 0x3c
 8001906:	482a      	ldr	r0, [pc, #168]	; (80019b0 <main+0x100>)
 8001908:	f002 ffe6 	bl	80048d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //FR
 800190c:	213c      	movs	r1, #60	; 0x3c
 800190e:	4829      	ldr	r0, [pc, #164]	; (80019b4 <main+0x104>)
 8001910:	f002 ffe2 	bl	80048d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //RL
 8001914:	213c      	movs	r1, #60	; 0x3c
 8001916:	4828      	ldr	r0, [pc, #160]	; (80019b8 <main+0x108>)
 8001918:	f002 ffde 	bl	80048d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); //RR
 800191c:	213c      	movs	r1, #60	; 0x3c
 800191e:	4827      	ldr	r0, [pc, #156]	; (80019bc <main+0x10c>)
 8001920:	f002 ffda 	bl	80048d8 <HAL_TIM_Encoder_Start>
	// Update PWM
	HAL_TIM_Base_Start_IT(&htim6);
 8001924:	4826      	ldr	r0, [pc, #152]	; (80019c0 <main+0x110>)
 8001926:	f002 fdc3 	bl	80044b0 <HAL_TIM_Base_Start_IT>
	// jy62
	jy62_Init(&huart3);
 800192a:	4826      	ldr	r0, [pc, #152]	; (80019c4 <main+0x114>)
 800192c:	f7ff fd48 	bl	80013c0 <jy62_Init>
	SetBaud(115200);
 8001930:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001934:	f7ff fdc6 	bl	80014c4 <SetBaud>
	SetHorizontal();
 8001938:	f7ff fdec 	bl	8001514 <SetHorizontal>
	InitAngle();
 800193c:	f7ff fdfa 	bl	8001534 <InitAngle>
	Calibrate();
 8001940:	f7ff fe08 	bl	8001554 <Calibrate>
	SleepOrAwake();
 8001944:	f7ff fe16 	bl	8001574 <SleepOrAwake>
	// PID
	PID_Init(&FLPid, 10.0f, 2.0f, 0.0f);
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001950:	491d      	ldr	r1, [pc, #116]	; (80019c8 <main+0x118>)
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <main+0x11c>)
 8001954:	f000 fa8c 	bl	8001e70 <PID_Init>
	PID_Init(&FRPid, 10.0f, 2.0f, 0.0f);
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001960:	4919      	ldr	r1, [pc, #100]	; (80019c8 <main+0x118>)
 8001962:	481b      	ldr	r0, [pc, #108]	; (80019d0 <main+0x120>)
 8001964:	f000 fa84 	bl	8001e70 <PID_Init>
	PID_Init(&RLPid, 10.0f, 2.0f, 0.0f);
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001970:	4915      	ldr	r1, [pc, #84]	; (80019c8 <main+0x118>)
 8001972:	4818      	ldr	r0, [pc, #96]	; (80019d4 <main+0x124>)
 8001974:	f000 fa7c 	bl	8001e70 <PID_Init>
	PID_Init(&RRPid, 10.0f, 2.0f, 0.0f);
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	4911      	ldr	r1, [pc, #68]	; (80019c8 <main+0x118>)
 8001982:	4815      	ldr	r0, [pc, #84]	; (80019d8 <main+0x128>)
 8001984:	f000 fa74 	bl	8001e70 <PID_Init>
	PID_Init(&xPid, 2.5f, 0.021f, 5.0f);
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <main+0x12c>)
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <main+0x130>)
 800198c:	4915      	ldr	r1, [pc, #84]	; (80019e4 <main+0x134>)
 800198e:	4816      	ldr	r0, [pc, #88]	; (80019e8 <main+0x138>)
 8001990:	f000 fa6e 	bl	8001e70 <PID_Init>
	PID_Init(&yPid, 2.0f, 0.015f, 4.5f);
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <main+0x13c>)
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <main+0x140>)
 8001998:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800199c:	4815      	ldr	r0, [pc, #84]	; (80019f4 <main+0x144>)
 800199e:	f000 fa67 	bl	8001e70 <PID_Init>

	u1_printf("Hello\n");
 80019a2:	4815      	ldr	r0, [pc, #84]	; (80019f8 <main+0x148>)
 80019a4:	f001 f926 	bl	8002bf4 <u1_printf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80019a8:	e7fe      	b.n	80019a8 <main+0xf8>
 80019aa:	bf00      	nop
 80019ac:	200002f4 	.word	0x200002f4
 80019b0:	2000033c 	.word	0x2000033c
 80019b4:	20000384 	.word	0x20000384
 80019b8:	200003cc 	.word	0x200003cc
 80019bc:	20000414 	.word	0x20000414
 80019c0:	2000045c 	.word	0x2000045c
 80019c4:	200004ec 	.word	0x200004ec
 80019c8:	41200000 	.word	0x41200000
 80019cc:	20000260 	.word	0x20000260
 80019d0:	20000278 	.word	0x20000278
 80019d4:	20000290 	.word	0x20000290
 80019d8:	200002a8 	.word	0x200002a8
 80019dc:	40a00000 	.word	0x40a00000
 80019e0:	3cac0831 	.word	0x3cac0831
 80019e4:	40200000 	.word	0x40200000
 80019e8:	200002c0 	.word	0x200002c0
 80019ec:	40900000 	.word	0x40900000
 80019f0:	3c75c28f 	.word	0x3c75c28f
 80019f4:	200002d8 	.word	0x200002d8
 80019f8:	0800ae90 	.word	0x0800ae90

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b090      	sub	sp, #64	; 0x40
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0318 	add.w	r3, r7, #24
 8001a06:	2228      	movs	r2, #40	; 0x28
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 fe10 	bl	8007630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a30:	2302      	movs	r3, #2
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 f8d3 	bl	8003bf0 <HAL_RCC_OscConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a50:	f000 f844 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a54:	230f      	movs	r3, #15
 8001a56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fb40 	bl	80040f4 <HAL_RCC_ClockConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a7a:	f000 f82f 	bl	8001adc <Error_Handler>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3740      	adds	r7, #64	; 0x40
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d112      	bne.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		float y = 250.0;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a9c:	60fb      	str	r3, [r7, #12]
		y = GetYaw();
 8001a9e:	f7ff fd79 	bl	8001594 <GetYaw>
 8001aa2:	60f8      	str	r0, [r7, #12]
		u1_printf("YAW:%f\n", y);
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f7fe fd2b 	bl	8000500 <__aeabi_f2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ab0:	f001 f8a0 	bl	8002bf4 <u1_printf>
		Update_Pwm(now, goal);
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001ab8:	cb0c      	ldmia	r3, {r2, r3}
 8001aba:	c903      	ldmia	r1, {r0, r1}
 8001abc:	f000 f8dc 	bl	8001c78 <Update_Pwm>
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40001000 	.word	0x40001000
 8001acc:	437a0000 	.word	0x437a0000
 8001ad0:	0800ae98 	.word	0x0800ae98
 8001ad4:	20000258 	.word	0x20000258
 8001ad8:	20000250 	.word	0x20000250

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <Error_Handler+0x8>
	...

08001ae8 <Move>:
#include "pid.h"

#include <math.h>

void Move(uint8_t id, float pwm)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
	if (id == 1)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d12b      	bne.n	8001b52 <Move+0x6a>
	{
		if (pwm > 0)
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	6838      	ldr	r0, [r7, #0]
 8001b00:	f7ff fb68 	bl	80011d4 <__aeabi_fcmpgt>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00c      	beq.n	8001b24 <Move+0x3c>
		{// FL +
			HAL_GPIO_WritePin(F_in3_GPIO_Port, F_in3_Pin, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b10:	4856      	ldr	r0, [pc, #344]	; (8001c6c <Move+0x184>)
 8001b12:	f002 f855 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_in4_GPIO_Port, F_in4_Pin, 1);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1c:	4853      	ldr	r0, [pc, #332]	; (8001c6c <Move+0x184>)
 8001b1e:	f002 f84f 	bl	8003bc0 <HAL_GPIO_WritePin>
 8001b22:	e00b      	b.n	8001b3c <Move+0x54>
		}
		else
		{// FL -
			HAL_GPIO_WritePin(F_in3_GPIO_Port, F_in3_Pin, 1);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b2a:	4850      	ldr	r0, [pc, #320]	; (8001c6c <Move+0x184>)
 8001b2c:	f002 f848 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_in4_GPIO_Port, F_in4_Pin, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b36:	484d      	ldr	r0, [pc, #308]	; (8001c6c <Move+0x184>)
 8001b38:	f002 f842 	bl	8003bc0 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, fabs(pwm));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b42:	4a4b      	ldr	r2, [pc, #300]	; (8001c70 <Move+0x188>)
 8001b44:	6814      	ldr	r4, [r2, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fb4e 	bl	80011e8 <__aeabi_f2uiz>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(R_in1_GPIO_Port, R_in1_Pin, 1);
			HAL_GPIO_WritePin(R_in2_GPIO_Port, R_in2_Pin, 0);
		}
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, fabs(pwm));
	}
}
 8001b50:	e087      	b.n	8001c62 <Move+0x17a>
	else if (id == 2)
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d12b      	bne.n	8001bb0 <Move+0xc8>
		if (pwm > 0)
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	6838      	ldr	r0, [r7, #0]
 8001b5e:	f7ff fb39 	bl	80011d4 <__aeabi_fcmpgt>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00c      	beq.n	8001b82 <Move+0x9a>
			HAL_GPIO_WritePin(F_in1_GPIO_Port, F_in1_Pin, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b6e:	483f      	ldr	r0, [pc, #252]	; (8001c6c <Move+0x184>)
 8001b70:	f002 f826 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_in2_GPIO_Port, F_in2_Pin, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7a:	483c      	ldr	r0, [pc, #240]	; (8001c6c <Move+0x184>)
 8001b7c:	f002 f820 	bl	8003bc0 <HAL_GPIO_WritePin>
 8001b80:	e00b      	b.n	8001b9a <Move+0xb2>
			HAL_GPIO_WritePin(F_in1_GPIO_Port, F_in1_Pin, 1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b88:	4838      	ldr	r0, [pc, #224]	; (8001c6c <Move+0x184>)
 8001b8a:	f002 f819 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_in2_GPIO_Port, F_in2_Pin, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b94:	4835      	ldr	r0, [pc, #212]	; (8001c6c <Move+0x184>)
 8001b96:	f002 f813 	bl	8003bc0 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, fabs(pwm));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ba0:	4a33      	ldr	r2, [pc, #204]	; (8001c70 <Move+0x188>)
 8001ba2:	6814      	ldr	r4, [r2, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb1f 	bl	80011e8 <__aeabi_f2uiz>
 8001baa:	4603      	mov	r3, r0
 8001bac:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001bae:	e058      	b.n	8001c62 <Move+0x17a>
	else if (id == 3)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d127      	bne.n	8001c06 <Move+0x11e>
		if (pwm > 0)
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	6838      	ldr	r0, [r7, #0]
 8001bbc:	f7ff fb0a 	bl	80011d4 <__aeabi_fcmpgt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <Move+0xf4>
			HAL_GPIO_WritePin(R_in3_GPIO_Port, R_in3_Pin, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	482a      	ldr	r0, [pc, #168]	; (8001c74 <Move+0x18c>)
 8001bcc:	f001 fff8 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_in4_GPIO_Port, R_in4_Pin, 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2140      	movs	r1, #64	; 0x40
 8001bd4:	4827      	ldr	r0, [pc, #156]	; (8001c74 <Move+0x18c>)
 8001bd6:	f001 fff3 	bl	8003bc0 <HAL_GPIO_WritePin>
 8001bda:	e009      	b.n	8001bf0 <Move+0x108>
			HAL_GPIO_WritePin(R_in3_GPIO_Port, R_in3_Pin, 1);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	4824      	ldr	r0, [pc, #144]	; (8001c74 <Move+0x18c>)
 8001be2:	f001 ffed 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_in4_GPIO_Port, R_in4_Pin, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2140      	movs	r1, #64	; 0x40
 8001bea:	4822      	ldr	r0, [pc, #136]	; (8001c74 <Move+0x18c>)
 8001bec:	f001 ffe8 	bl	8003bc0 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, fabs(pwm));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <Move+0x188>)
 8001bf8:	6814      	ldr	r4, [r2, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff faf4 	bl	80011e8 <__aeabi_f2uiz>
 8001c00:	4603      	mov	r3, r0
 8001c02:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001c04:	e02d      	b.n	8001c62 <Move+0x17a>
	else if (id == 4)
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d12a      	bne.n	8001c62 <Move+0x17a>
		if (pwm > 0)
 8001c0c:	f04f 0100 	mov.w	r1, #0
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f7ff fadf 	bl	80011d4 <__aeabi_fcmpgt>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00c      	beq.n	8001c36 <Move+0x14e>
			HAL_GPIO_WritePin(R_in1_GPIO_Port, R_in1_Pin, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <Move+0x18c>)
 8001c24:	f001 ffcc 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_in2_GPIO_Port, R_in2_Pin, 1);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2e:	4811      	ldr	r0, [pc, #68]	; (8001c74 <Move+0x18c>)
 8001c30:	f001 ffc6 	bl	8003bc0 <HAL_GPIO_WritePin>
 8001c34:	e00b      	b.n	8001c4e <Move+0x166>
			HAL_GPIO_WritePin(R_in1_GPIO_Port, R_in1_Pin, 1);
 8001c36:	2201      	movs	r2, #1
 8001c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c3c:	480d      	ldr	r0, [pc, #52]	; (8001c74 <Move+0x18c>)
 8001c3e:	f001 ffbf 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_in2_GPIO_Port, R_in2_Pin, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c48:	480a      	ldr	r0, [pc, #40]	; (8001c74 <Move+0x18c>)
 8001c4a:	f001 ffb9 	bl	8003bc0 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, fabs(pwm));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <Move+0x188>)
 8001c56:	6814      	ldr	r4, [r2, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fac5 	bl	80011e8 <__aeabi_f2uiz>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd90      	pop	{r4, r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	200002f4 	.word	0x200002f4
 8001c74:	40011000 	.word	0x40011000

08001c78 <Update_Pwm>:

void Update_Pwm(PosStr now, PosStr goal)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b093      	sub	sp, #76	; 0x4c
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	f107 0408 	add.w	r4, r7, #8
 8001c82:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c86:	4639      	mov	r1, r7
 8001c88:	e881 000c 	stmia.w	r1, {r2, r3}

	float xVel = PID_Cal(&xPid, now.x, goal.x);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	486d      	ldr	r0, [pc, #436]	; (8001e48 <Update_Pwm+0x1d0>)
 8001c94:	f000 f90e 	bl	8001eb4 <PID_Cal>
 8001c98:	6378      	str	r0, [r7, #52]	; 0x34
	float yVel = PID_Cal(&yPid, now.y, goal.y);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	486a      	ldr	r0, [pc, #424]	; (8001e4c <Update_Pwm+0x1d4>)
 8001ca2:	f000 f907 	bl	8001eb4 <PID_Cal>
 8001ca6:	6338      	str	r0, [r7, #48]	; 0x30
//		yVel = MIN_VELOCITY;

//	u1_printf("xVel=%f, yVel=%f\n", xVel, yVel)


	int FLCnt = __HAL_TIM_GET_COUNTER(&htim2);
 8001ca8:	4b69      	ldr	r3, [pc, #420]	; (8001e50 <Update_Pwm+0x1d8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
	__HAL_TIM_SetCounter(&htim2, 0);
 8001cb0:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <Update_Pwm+0x1d8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
	if (FLCnt > 32767)
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cbe:	db05      	blt.n	8001ccc <Update_Pwm+0x54>
		FLCnt = 65535 - FLCnt;
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001cc6:	33ff      	adds	r3, #255	; 0xff
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8001cca:	e002      	b.n	8001cd2 <Update_Pwm+0x5a>
	else
		FLCnt = 0 - FLCnt;
 8001ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cce:	425b      	negs	r3, r3
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
	float FLNow = 1.0 * FLCnt / 10.8;
 8001cd2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001cd4:	f7fe fc02 	bl	80004dc <__aeabi_i2d>
 8001cd8:	a359      	add	r3, pc, #356	; (adr r3, 8001e40 <Update_Pwm+0x1c8>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe fd91 	bl	8000804 <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe ff59 	bl	8000ba0 <__aeabi_d2f>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float FLPwm = PID_Cal(&FLPid, FLNow, xVel - yVel);
 8001cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cf6:	f7fe ffa7 	bl	8000c48 <__aeabi_fsub>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d00:	4854      	ldr	r0, [pc, #336]	; (8001e54 <Update_Pwm+0x1dc>)
 8001d02:	f000 f8d7 	bl	8001eb4 <PID_Cal>
 8001d06:	62b8      	str	r0, [r7, #40]	; 0x28
	Move(1, FLPwm);
 8001d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff feec 	bl	8001ae8 <Move>

	int FRCnt = __HAL_TIM_GET_COUNTER(&htim3);
 8001d10:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <Update_Pwm+0x1e0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
	__HAL_TIM_SetCounter(&htim3, 0);
 8001d18:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <Update_Pwm+0x1e0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
	if (FRCnt > 32767)
 8001d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d26:	db04      	blt.n	8001d32 <Update_Pwm+0xba>
		FRCnt = FRCnt - 65535;
 8001d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d2a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001d2e:	3bff      	subs	r3, #255	; 0xff
 8001d30:	643b      	str	r3, [r7, #64]	; 0x40
	else
		FRCnt = FRCnt - 0;
	float FRNow = 1.0 * FRCnt / 10.8;
 8001d32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d34:	f7fe fbd2 	bl	80004dc <__aeabi_i2d>
 8001d38:	a341      	add	r3, pc, #260	; (adr r3, 8001e40 <Update_Pwm+0x1c8>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fd61 	bl	8000804 <__aeabi_ddiv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff29 	bl	8000ba0 <__aeabi_d2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
	float FRPwm = PID_Cal(&FRPid, FRNow, xVel + yVel);
 8001d52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d56:	f7fe ff79 	bl	8000c4c <__addsf3>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d60:	483e      	ldr	r0, [pc, #248]	; (8001e5c <Update_Pwm+0x1e4>)
 8001d62:	f000 f8a7 	bl	8001eb4 <PID_Cal>
 8001d66:	6238      	str	r0, [r7, #32]
	Move(2, FRPwm);
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f7ff febc 	bl	8001ae8 <Move>

	int RLCnt = __HAL_TIM_GET_COUNTER(&htim4);
 8001d70:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <Update_Pwm+0x1e8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
	__HAL_TIM_SetCounter(&htim4, 0);
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <Update_Pwm+0x1e8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
	if (RLCnt > 32767)
 8001d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d86:	db05      	blt.n	8001d94 <Update_Pwm+0x11c>
		RLCnt = 65535 - RLCnt;
 8001d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001d8e:	33ff      	adds	r3, #255	; 0xff
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d92:	e002      	b.n	8001d9a <Update_Pwm+0x122>
	else
		RLCnt = 0 - RLCnt;
 8001d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d96:	425b      	negs	r3, r3
 8001d98:	63fb      	str	r3, [r7, #60]	; 0x3c
	float RLNow = 1.0 * RLCnt / 10.8;
 8001d9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d9c:	f7fe fb9e 	bl	80004dc <__aeabi_i2d>
 8001da0:	a327      	add	r3, pc, #156	; (adr r3, 8001e40 <Update_Pwm+0x1c8>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fd2d 	bl	8000804 <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe fef5 	bl	8000ba0 <__aeabi_d2f>
 8001db6:	4603      	mov	r3, r0
 8001db8:	61fb      	str	r3, [r7, #28]
	float RLPwm = PID_Cal(&RLPid, RLNow, xVel + yVel);
 8001dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dbe:	f7fe ff45 	bl	8000c4c <__addsf3>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	69f9      	ldr	r1, [r7, #28]
 8001dc8:	4826      	ldr	r0, [pc, #152]	; (8001e64 <Update_Pwm+0x1ec>)
 8001dca:	f000 f873 	bl	8001eb4 <PID_Cal>
 8001dce:	61b8      	str	r0, [r7, #24]
	Move(3, RLPwm);
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f7ff fe88 	bl	8001ae8 <Move>

	int RRCnt = __HAL_TIM_GET_COUNTER(&htim5);
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <Update_Pwm+0x1f0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
	__HAL_TIM_SetCounter(&htim5, 0);
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <Update_Pwm+0x1f0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2200      	movs	r2, #0
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24
	if (RRCnt > 32767)
 8001de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dee:	db04      	blt.n	8001dfa <Update_Pwm+0x182>
		RRCnt = RRCnt - 65535;
 8001df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001df6:	3bff      	subs	r3, #255	; 0xff
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
	else
		RRCnt = RRCnt - 0;
	float RRNow = 1.0 * RRCnt / 10.8;
 8001dfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001dfc:	f7fe fb6e 	bl	80004dc <__aeabi_i2d>
 8001e00:	a30f      	add	r3, pc, #60	; (adr r3, 8001e40 <Update_Pwm+0x1c8>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fcfd 	bl	8000804 <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fec5 	bl	8000ba0 <__aeabi_d2f>
 8001e16:	4603      	mov	r3, r0
 8001e18:	617b      	str	r3, [r7, #20]
	float RRPwm = PID_Cal(&RRPid, RRNow, xVel - yVel);
 8001e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e1e:	f7fe ff13 	bl	8000c48 <__aeabi_fsub>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	6979      	ldr	r1, [r7, #20]
 8001e28:	4810      	ldr	r0, [pc, #64]	; (8001e6c <Update_Pwm+0x1f4>)
 8001e2a:	f000 f843 	bl	8001eb4 <PID_Cal>
 8001e2e:	6138      	str	r0, [r7, #16]
	Move(4, RRPwm);
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	2004      	movs	r0, #4
 8001e34:	f7ff fe58 	bl	8001ae8 <Move>

//	u1_printf("FLNow=%f FLPwm=%f ", FLNow, FLPwm);
//	u1_printf("FRNow=%f FRPwm=%f\n", FRNow, FRPwm);
//	u1_printf("RLNow=%f RLPwm=%f ", RLNow, RLPwm);
//	u1_printf("RRNow=%f RRPwm=%f\n", RRNow, RRPwm);
}
 8001e38:	bf00      	nop
 8001e3a:	374c      	adds	r7, #76	; 0x4c
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	9999999a 	.word	0x9999999a
 8001e44:	40259999 	.word	0x40259999
 8001e48:	200002c0 	.word	0x200002c0
 8001e4c:	200002d8 	.word	0x200002d8
 8001e50:	2000033c 	.word	0x2000033c
 8001e54:	20000260 	.word	0x20000260
 8001e58:	20000384 	.word	0x20000384
 8001e5c:	20000278 	.word	0x20000278
 8001e60:	200003cc 	.word	0x200003cc
 8001e64:	20000290 	.word	0x20000290
 8001e68:	20000414 	.word	0x20000414
 8001e6c:	200002a8 	.word	0x200002a8

08001e70 <PID_Init>:
PidStr FLPid, FRPid, RLPid, RRPid;
PidStr xPid, yPid;
PidStr anglePid;

void PID_Init(PidStr* a, float kp, float ki, float kd)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
	a->err = 0;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
	a->iErr = 0;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
	a->lErr = 0;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
	a->kp = kp;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	601a      	str	r2, [r3, #0]
	a->ki = ki;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	605a      	str	r2, [r3, #4]
	a->kd = kd;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <PID_Cal>:

float PID_Cal(PidStr* a, float cur, float goal)
{
 8001eb4:	b5b0      	push	{r4, r5, r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	a->err = goal - cur;
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fec0 	bl	8000c48 <__aeabi_fsub>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	60da      	str	r2, [r3, #12]
	a->iErr += a->err;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7fe feb6 	bl	8000c4c <__addsf3>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
	float pwm = a->kp * a->err + a->ki * a->iErr + a->kd * (a->err - a->lErr);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f7fe ffb2 	bl	8000e5c <__aeabi_fmul>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461c      	mov	r4, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7fe ffa8 	bl	8000e5c <__aeabi_fmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7fe fe9b 	bl	8000c4c <__addsf3>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461d      	mov	r5, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689c      	ldr	r4, [r3, #8]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7fe fe8d 	bl	8000c48 <__aeabi_fsub>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7fe ff92 	bl	8000e5c <__aeabi_fmul>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f7fe fe85 	bl	8000c4c <__addsf3>
 8001f42:	4603      	mov	r3, r0
 8001f44:	617b      	str	r3, [r7, #20]
	a->lErr = a->err;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	615a      	str	r2, [r3, #20]
	if (pwm >= MAX_PWM)
 8001f4e:	490b      	ldr	r1, [pc, #44]	; (8001f7c <PID_Cal+0xc8>)
 8001f50:	6978      	ldr	r0, [r7, #20]
 8001f52:	f7ff f935 	bl	80011c0 <__aeabi_fcmpge>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <PID_Cal+0xac>
		pwm = MAX_PWM;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <PID_Cal+0xc8>)
 8001f5e:	617b      	str	r3, [r7, #20]
	if (pwm <= MIN_PWM)
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <PID_Cal+0xcc>)
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff f922 	bl	80011ac <__aeabi_fcmple>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <PID_Cal+0xbe>
		pwm = MIN_PWM;
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <PID_Cal+0xcc>)
 8001f70:	617b      	str	r3, [r7, #20]
	return pwm;
 8001f72:	697b      	ldr	r3, [r7, #20]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f7c:	44480000 	.word	0x44480000
 8001f80:	c4480000 	.word	0xc4480000

08001f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_MspInit+0x5c>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <HAL_MspInit+0x5c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6193      	str	r3, [r2, #24]
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_MspInit+0x5c>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_MspInit+0x5c>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_MspInit+0x5c>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	61d3      	str	r3, [r2, #28]
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_MspInit+0x5c>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_MspInit+0x60>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_MspInit+0x60>)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fec:	e7fe      	b.n	8001fec <NMI_Handler+0x4>

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <UsageFault_Handler+0x4>

08002006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202e:	f000 fe85 	bl	8002d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <DMA1_Channel3_IRQHandler+0x10>)
 800203e:	f001 f9c1 	bl	80033c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000578 	.word	0x20000578

0800204c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <DMA1_Channel6_IRQHandler+0x10>)
 8002052:	f001 f9b7 	bl	80033c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000534 	.word	0x20000534

08002060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <USART2_IRQHandler+0x10>)
 8002066:	f003 fc23 	bl	80058b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200004a4 	.word	0x200004a4

08002074 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <USART3_IRQHandler+0x10>)
 800207a:	f003 fc19 	bl	80058b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200004ec 	.word	0x200004ec

08002088 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <TIM6_IRQHandler+0x10>)
 800208e:	f002 fcb1 	bl	80049f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000045c 	.word	0x2000045c

0800209c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return 1;
 80020a0:	2301      	movs	r3, #1
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <_kill>:

int _kill(int pid, int sig)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020b4:	f005 fb0e 	bl	80076d4 <__errno>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2216      	movs	r2, #22
 80020bc:	601a      	str	r2, [r3, #0]
  return -1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_exit>:

void _exit (int status)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d2:	f04f 31ff 	mov.w	r1, #4294967295
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffe7 	bl	80020aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80020dc:	e7fe      	b.n	80020dc <_exit+0x12>

080020de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e00a      	b.n	8002106 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020f0:	f3af 8000 	nop.w
 80020f4:	4601      	mov	r1, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	60ba      	str	r2, [r7, #8]
 80020fc:	b2ca      	uxtb	r2, r1
 80020fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbf0      	blt.n	80020f0 <_read+0x12>
  }

  return len;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e009      	b.n	800213e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	60ba      	str	r2, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	dbf1      	blt.n	800212a <_write+0x12>
  }
  return len;
 8002146:	687b      	ldr	r3, [r7, #4]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_close>:

int _close(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002176:	605a      	str	r2, [r3, #4]
  return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <_isatty>:

int _isatty(int file)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f005 fa78 	bl	80076d4 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000c000 	.word	0x2000c000
 8002210:	00000400 	.word	0x00000400
 8002214:	200002f0 	.word	0x200002f0
 8002218:	20000710 	.word	0x20000710

0800221c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b096      	sub	sp, #88	; 0x58
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]
 8002256:	615a      	str	r2, [r3, #20]
 8002258:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2220      	movs	r2, #32
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f005 f9e5 	bl	8007630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002266:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <MX_TIM1_Init+0x180>)
 8002268:	4a50      	ldr	r2, [pc, #320]	; (80023ac <MX_TIM1_Init+0x184>)
 800226a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800226c:	4b4e      	ldr	r3, [pc, #312]	; (80023a8 <MX_TIM1_Init+0x180>)
 800226e:	2247      	movs	r2, #71	; 0x47
 8002270:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <MX_TIM1_Init+0x180>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002278:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <MX_TIM1_Init+0x180>)
 800227a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800227e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <MX_TIM1_Init+0x180>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002286:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <MX_TIM1_Init+0x180>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b46      	ldr	r3, [pc, #280]	; (80023a8 <MX_TIM1_Init+0x180>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002292:	4845      	ldr	r0, [pc, #276]	; (80023a8 <MX_TIM1_Init+0x180>)
 8002294:	f002 f8bc 	bl	8004410 <HAL_TIM_Base_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800229e:	f7ff fc1d 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022ac:	4619      	mov	r1, r3
 80022ae:	483e      	ldr	r0, [pc, #248]	; (80023a8 <MX_TIM1_Init+0x180>)
 80022b0:	f002 fd6a 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022ba:	f7ff fc0f 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022be:	483a      	ldr	r0, [pc, #232]	; (80023a8 <MX_TIM1_Init+0x180>)
 80022c0:	f002 f956 	bl	8004570 <HAL_TIM_PWM_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022ca:	f7ff fc07 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022da:	4619      	mov	r1, r3
 80022dc:	4832      	ldr	r0, [pc, #200]	; (80023a8 <MX_TIM1_Init+0x180>)
 80022de:	f003 f91f 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022e8:	f7ff fbf8 	bl	8001adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ec:	2360      	movs	r3, #96	; 0x60
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022f8:	2300      	movs	r3, #0
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230c:	2200      	movs	r2, #0
 800230e:	4619      	mov	r1, r3
 8002310:	4825      	ldr	r0, [pc, #148]	; (80023a8 <MX_TIM1_Init+0x180>)
 8002312:	f002 fc77 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800231c:	f7ff fbde 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002324:	2204      	movs	r2, #4
 8002326:	4619      	mov	r1, r3
 8002328:	481f      	ldr	r0, [pc, #124]	; (80023a8 <MX_TIM1_Init+0x180>)
 800232a:	f002 fc6b 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002334:	f7ff fbd2 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	2208      	movs	r2, #8
 800233e:	4619      	mov	r1, r3
 8002340:	4819      	ldr	r0, [pc, #100]	; (80023a8 <MX_TIM1_Init+0x180>)
 8002342:	f002 fc5f 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800234c:	f7ff fbc6 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	220c      	movs	r2, #12
 8002356:	4619      	mov	r1, r3
 8002358:	4813      	ldr	r0, [pc, #76]	; (80023a8 <MX_TIM1_Init+0x180>)
 800235a:	f002 fc53 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002364:	f7ff fbba 	bl	8001adc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800237c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002380:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	4619      	mov	r1, r3
 800238a:	4807      	ldr	r0, [pc, #28]	; (80023a8 <MX_TIM1_Init+0x180>)
 800238c:	f003 f934 	bl	80055f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002396:	f7ff fba1 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800239a:	4803      	ldr	r0, [pc, #12]	; (80023a8 <MX_TIM1_Init+0x180>)
 800239c:	f000 fab8 	bl	8002910 <HAL_TIM_MspPostInit>

}
 80023a0:	bf00      	nop
 80023a2:	3758      	adds	r7, #88	; 0x58
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	200002f4 	.word	0x200002f4
 80023ac:	40012c00 	.word	0x40012c00

080023b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 f936 	bl	8007630 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <MX_TIM2_Init+0xa4>)
 80023ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_TIM2_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <MX_TIM2_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_TIM2_Init+0xa4>)
 80023e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_TIM2_Init+0xa4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <MX_TIM2_Init+0xa4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023f4:	2303      	movs	r3, #3
 80023f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023fc:	2301      	movs	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002408:	2300      	movs	r3, #0
 800240a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800240c:	2301      	movs	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	4619      	mov	r1, r3
 800241e:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_TIM2_Init+0xa4>)
 8002420:	f002 f9b8 	bl	8004794 <HAL_TIM_Encoder_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800242a:	f7ff fb57 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	; (8002454 <MX_TIM2_Init+0xa4>)
 800243c:	f003 f870 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002446:	f7ff fb49 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	3730      	adds	r7, #48	; 0x30
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000033c 	.word	0x2000033c

08002458 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	; 0x30
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	2224      	movs	r2, #36	; 0x24
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f005 f8e2 	bl	8007630 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002474:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <MX_TIM3_Init+0xa0>)
 8002476:	4a21      	ldr	r2, [pc, #132]	; (80024fc <MX_TIM3_Init+0xa4>)
 8002478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <MX_TIM3_Init+0xa0>)
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <MX_TIM3_Init+0xa0>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <MX_TIM3_Init+0xa0>)
 8002488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <MX_TIM3_Init+0xa0>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002494:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <MX_TIM3_Init+0xa0>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800249a:	2303      	movs	r3, #3
 800249c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024a2:	2301      	movs	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024b2:	2301      	movs	r3, #1
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	4619      	mov	r1, r3
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <MX_TIM3_Init+0xa0>)
 80024c6:	f002 f965 	bl	8004794 <HAL_TIM_Encoder_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024d0:	f7ff fb04 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_TIM3_Init+0xa0>)
 80024e2:	f003 f81d 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024ec:	f7ff faf6 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	3730      	adds	r7, #48	; 0x30
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000384 	.word	0x20000384
 80024fc:	40000400 	.word	0x40000400

08002500 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	2224      	movs	r2, #36	; 0x24
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f005 f88e 	bl	8007630 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <MX_TIM4_Init+0xa0>)
 800251e:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <MX_TIM4_Init+0xa4>)
 8002520:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002522:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <MX_TIM4_Init+0xa0>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <MX_TIM4_Init+0xa0>)
 800252a:	2210      	movs	r2, #16
 800252c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <MX_TIM4_Init+0xa0>)
 8002530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002534:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_TIM4_Init+0xa0>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <MX_TIM4_Init+0xa0>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002542:	2303      	movs	r3, #3
 8002544:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800254a:	2301      	movs	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800255a:	2301      	movs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4619      	mov	r1, r3
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <MX_TIM4_Init+0xa0>)
 800256e:	f002 f911 	bl	8004794 <HAL_TIM_Encoder_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002578:	f7ff fab0 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_TIM4_Init+0xa0>)
 800258a:	f002 ffc9 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002594:	f7ff faa2 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	3730      	adds	r7, #48	; 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200003cc 	.word	0x200003cc
 80025a4:	40000800 	.word	0x40000800

080025a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	; 0x30
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f005 f83a 	bl	8007630 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <MX_TIM5_Init+0xa0>)
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <MX_TIM5_Init+0xa4>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <MX_TIM5_Init+0xa0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <MX_TIM5_Init+0xa0>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_TIM5_Init+0xa0>)
 80025d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_TIM5_Init+0xa0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <MX_TIM5_Init+0xa0>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025ea:	2303      	movs	r3, #3
 80025ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025f2:	2301      	movs	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002602:	2301      	movs	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <MX_TIM5_Init+0xa0>)
 8002616:	f002 f8bd 	bl	8004794 <HAL_TIM_Encoder_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002620:	f7ff fa5c 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_TIM5_Init+0xa0>)
 8002632:	f002 ff75 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800263c:	f7ff fa4e 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	3730      	adds	r7, #48	; 0x30
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000414 	.word	0x20000414
 800264c:	40000c00 	.word	0x40000c00

08002650 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002656:	463b      	mov	r3, r7
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <MX_TIM6_Init+0x64>)
 8002660:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <MX_TIM6_Init+0x68>)
 8002662:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <MX_TIM6_Init+0x64>)
 8002666:	2247      	movs	r2, #71	; 0x47
 8002668:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <MX_TIM6_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <MX_TIM6_Init+0x64>)
 8002672:	f242 720f 	movw	r2, #9999	; 0x270f
 8002676:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <MX_TIM6_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <MX_TIM6_Init+0x64>)
 8002680:	f001 fec6 	bl	8004410 <HAL_TIM_Base_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800268a:	f7ff fa27 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002696:	463b      	mov	r3, r7
 8002698:	4619      	mov	r1, r3
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <MX_TIM6_Init+0x64>)
 800269c:	f002 ff40 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026a6:	f7ff fa19 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000045c 	.word	0x2000045c
 80026b8:	40001000 	.word	0x40001000

080026bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_TIM_Base_MspInit+0x68>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10c      	bne.n	80026e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_TIM_Base_MspInit+0x6c>)
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <HAL_TIM_Base_MspInit+0x6c>)
 80026d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026d8:	6193      	str	r3, [r2, #24]
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_TIM_Base_MspInit+0x6c>)
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80026e6:	e018      	b.n	800271a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <HAL_TIM_Base_MspInit+0x70>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d113      	bne.n	800271a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_TIM_Base_MspInit+0x6c>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <HAL_TIM_Base_MspInit+0x6c>)
 80026f8:	f043 0310 	orr.w	r3, r3, #16
 80026fc:	61d3      	str	r3, [r2, #28]
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_TIM_Base_MspInit+0x6c>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2101      	movs	r1, #1
 800270e:	2036      	movs	r0, #54	; 0x36
 8002710:	f000 fc07 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002714:	2036      	movs	r0, #54	; 0x36
 8002716:	f000 fc20 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40001000 	.word	0x40001000

08002730 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b090      	sub	sp, #64	; 0x40
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274e:	d14f      	bne.n	80027f0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002750:	4b68      	ldr	r3, [pc, #416]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4a67      	ldr	r2, [pc, #412]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	61d3      	str	r3, [r2, #28]
 800275c:	4b65      	ldr	r3, [pc, #404]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002768:	4b62      	ldr	r3, [pc, #392]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	4a61      	ldr	r2, [pc, #388]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6193      	str	r3, [r2, #24]
 8002774:	4b5f      	ldr	r3, [pc, #380]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	4b5c      	ldr	r3, [pc, #368]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a5b      	ldr	r2, [pc, #364]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_fla_Pin;
 8002798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279e:	2300      	movs	r3, #0
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_fla_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027aa:	4619      	mov	r1, r3
 80027ac:	4852      	ldr	r0, [pc, #328]	; (80028f8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80027ae:	f001 f873 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_flb_Pin;
 80027b2:	2308      	movs	r3, #8
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b6:	2300      	movs	r3, #0
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_flb_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c2:	4619      	mov	r1, r3
 80027c4:	484d      	ldr	r0, [pc, #308]	; (80028fc <HAL_TIM_Encoder_MspInit+0x1cc>)
 80027c6:	f001 f867 	bl	8003898 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80027ca:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e8:	4a45      	ldr	r2, [pc, #276]	; (8002900 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80027ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80027ee:	e07c      	b.n	80028ea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a43      	ldr	r2, [pc, #268]	; (8002904 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d124      	bne.n	8002844 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a3d      	ldr	r2, [pc, #244]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	4a37      	ldr	r2, [pc, #220]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6193      	str	r3, [r2, #24]
 800281e:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Encoder_fra_Pin|Encoder_frb_Pin;
 800282a:	23c0      	movs	r3, #192	; 0xc0
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282e:	2300      	movs	r3, #0
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283a:	4619      	mov	r1, r3
 800283c:	482e      	ldr	r0, [pc, #184]	; (80028f8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800283e:	f001 f82b 	bl	8003898 <HAL_GPIO_Init>
}
 8002842:	e052      	b.n	80028ea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2f      	ldr	r2, [pc, #188]	; (8002908 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d124      	bne.n	8002898 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	61d3      	str	r3, [r2, #28]
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800286c:	f043 0308 	orr.w	r3, r3, #8
 8002870:	6193      	str	r3, [r2, #24]
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_rla_Pin|Encoder_rlb_Pin;
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002882:	2300      	movs	r3, #0
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288e:	4619      	mov	r1, r3
 8002890:	481a      	ldr	r0, [pc, #104]	; (80028fc <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002892:	f001 f801 	bl	8003898 <HAL_GPIO_Init>
}
 8002896:	e028      	b.n	80028ea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM5)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_TIM_Encoder_MspInit+0x1dc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d123      	bne.n	80028ea <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	61d3      	str	r3, [r2, #28]
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6193      	str	r3, [r2, #24]
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_rra_Pin|Encoder_rrb_Pin;
 80028d2:	2303      	movs	r3, #3
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d6:	2300      	movs	r3, #0
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e2:	4619      	mov	r1, r3
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80028e6:	f000 ffd7 	bl	8003898 <HAL_GPIO_Init>
}
 80028ea:	bf00      	nop
 80028ec:	3740      	adds	r7, #64	; 0x40
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010800 	.word	0x40010800
 80028fc:	40010c00 	.word	0x40010c00
 8002900:	40010000 	.word	0x40010000
 8002904:	40000400 	.word	0x40000400
 8002908:	40000800 	.word	0x40000800
 800290c:	40000c00 	.word	0x40000c00

08002910 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_TIM_MspPostInit+0x5c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d118      	bne.n	8002962 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_TIM_MspPostInit+0x60>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <HAL_TIM_MspPostInit+0x60>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_TIM_MspPostInit+0x60>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_FL_Pin|PWM_FR_Pin|PWM_RL_Pin|PWM_RR_Pin;
 8002948:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800294c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <HAL_TIM_MspPostInit+0x64>)
 800295e:	f000 ff9b 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40021000 	.word	0x40021000
 8002974:	40010800 	.word	0x40010800

08002978 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <MX_USART2_UART_Init+0x50>)
 8002980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 8002984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 800299e:	220c      	movs	r2, #12
 80029a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 80029b0:	f002 fe85 	bl	80056be <HAL_UART_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029ba:	f7ff f88f 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200004a4 	.word	0x200004a4
 80029c8:	40004400 	.word	0x40004400

080029cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <MX_USART3_UART_Init+0x50>)
 80029d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 80029d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 80029f2:	220c      	movs	r2, #12
 80029f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_USART3_UART_Init+0x4c>)
 8002a04:	f002 fe5b 	bl	80056be <HAL_UART_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a0e:	f7ff f865 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200004ec 	.word	0x200004ec
 8002a1c:	40004800 	.word	0x40004800

08002a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0318 	add.w	r3, r7, #24
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a65      	ldr	r2, [pc, #404]	; (8002bd0 <HAL_UART_MspInit+0x1b0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d15e      	bne.n	8002afe <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a40:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a63      	ldr	r2, [pc, #396]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4a:	61d3      	str	r3, [r2, #28]
 8002a4c:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a5d      	ldr	r2, [pc, #372]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b5b      	ldr	r3, [pc, #364]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a70:	2304      	movs	r3, #4
 8002a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 0318 	add.w	r3, r7, #24
 8002a80:	4619      	mov	r1, r3
 8002a82:	4855      	ldr	r0, [pc, #340]	; (8002bd8 <HAL_UART_MspInit+0x1b8>)
 8002a84:	f000 ff08 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a88:	2308      	movs	r3, #8
 8002a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	f107 0318 	add.w	r3, r7, #24
 8002a98:	4619      	mov	r1, r3
 8002a9a:	484f      	ldr	r0, [pc, #316]	; (8002bd8 <HAL_UART_MspInit+0x1b8>)
 8002a9c:	f000 fefc 	bl	8003898 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002aa0:	4b4e      	ldr	r3, [pc, #312]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002aa2:	4a4f      	ldr	r2, [pc, #316]	; (8002be0 <HAL_UART_MspInit+0x1c0>)
 8002aa4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa6:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab8:	4b48      	ldr	r3, [pc, #288]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ac4:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aca:	4b44      	ldr	r3, [pc, #272]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ad0:	4842      	ldr	r0, [pc, #264]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002ad2:	f000 fa5d 	bl	8002f90 <HAL_DMA_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002adc:	f7fe fffe 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ae6:	4a3d      	ldr	r2, [pc, #244]	; (8002bdc <HAL_UART_MspInit+0x1bc>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2100      	movs	r1, #0
 8002af0:	2026      	movs	r0, #38	; 0x26
 8002af2:	f000 fa16 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002af6:	2026      	movs	r0, #38	; 0x26
 8002af8:	f000 fa2f 	bl	8002f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002afc:	e064      	b.n	8002bc8 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a38      	ldr	r2, [pc, #224]	; (8002be4 <HAL_UART_MspInit+0x1c4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d15f      	bne.n	8002bc8 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b08:	4b32      	ldr	r3, [pc, #200]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b12:	61d3      	str	r3, [r2, #28]
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_UART_MspInit+0x1b4>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b46:	f107 0318 	add.w	r3, r7, #24
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4826      	ldr	r0, [pc, #152]	; (8002be8 <HAL_UART_MspInit+0x1c8>)
 8002b4e:	f000 fea3 	bl	8003898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b60:	f107 0318 	add.w	r3, r7, #24
 8002b64:	4619      	mov	r1, r3
 8002b66:	4820      	ldr	r0, [pc, #128]	; (8002be8 <HAL_UART_MspInit+0x1c8>)
 8002b68:	f000 fe96 	bl	8003898 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b6e:	4a20      	ldr	r2, [pc, #128]	; (8002bf0 <HAL_UART_MspInit+0x1d0>)
 8002b70:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b9c:	4813      	ldr	r0, [pc, #76]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002b9e:	f000 f9f7 	bl	8002f90 <HAL_DMA_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002ba8:	f7fe ff98 	bl	8001adc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002bb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <HAL_UART_MspInit+0x1cc>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2027      	movs	r0, #39	; 0x27
 8002bbe:	f000 f9b0 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bc2:	2027      	movs	r0, #39	; 0x27
 8002bc4:	f000 f9c9 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 8002bc8:	bf00      	nop
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40004400 	.word	0x40004400
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40010800 	.word	0x40010800
 8002bdc:	20000534 	.word	0x20000534
 8002be0:	4002006c 	.word	0x4002006c
 8002be4:	40004800 	.word	0x40004800
 8002be8:	40010c00 	.word	0x40010c00
 8002bec:	20000578 	.word	0x20000578
 8002bf0:	40020030 	.word	0x40020030

08002bf4 <u1_printf>:
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char* fmt, ...)
{
 8002bf4:	b40f      	push	{r0, r1, r2, r3}
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b0b6      	sub	sp, #216	; 0xd8
 8002bfa:	af00      	add	r7, sp, #0
	uint16_t len;
	va_list ap;
	va_start(ap, fmt);
 8002bfc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint8_t buf[205];
	vsprintf((char*)buf, fmt, ap);
 8002c04:	463b      	mov	r3, r7
 8002c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c0a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 fd04 	bl	800761c <vsiprintf>
	va_end(ap);
	len = strlen((char*)buf);
 8002c14:	463b      	mov	r3, r7
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fb06 	bl	8000228 <strlen>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	HAL_UART_Transmit(&huart2, buf, len, HAL_MAX_DELAY);
 8002c22:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002c26:	4639      	mov	r1, r7
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <u1_printf+0x4c>)
 8002c2e:	f002 fd96 	bl	800575e <HAL_UART_Transmit>
}
 8002c32:	bf00      	nop
 8002c34:	37d8      	adds	r7, #216	; 0xd8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c3c:	b004      	add	sp, #16
 8002c3e:	4770      	bx	lr
 8002c40:	200004a4 	.word	0x200004a4

08002c44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_UART_RxCpltCallback+0x1c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d101      	bne.n	8002c58 <HAL_UART_RxCpltCallback+0x14>
	{
		jy62MessageRecord();
 8002c54:	f7fe fbca 	bl	80013ec <jy62MessageRecord>
//		float y = 250.0;
//		y = GetYaw();
//		u1_printf("YAW:%f\n", y);
	}
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200004ec 	.word	0x200004ec

08002c64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c64:	f7ff fada 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c68:	480b      	ldr	r0, [pc, #44]	; (8002c98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c6a:	490c      	ldr	r1, [pc, #48]	; (8002c9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c70:	e002      	b.n	8002c78 <LoopCopyDataInit>

08002c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c76:	3304      	adds	r3, #4

08002c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c7c:	d3f9      	bcc.n	8002c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c80:	4c09      	ldr	r4, [pc, #36]	; (8002ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c84:	e001      	b.n	8002c8a <LoopFillZerobss>

08002c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c88:	3204      	adds	r2, #4

08002c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c8c:	d3fb      	bcc.n	8002c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c8e:	f004 fd27 	bl	80076e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c92:	f7fe fe0d 	bl	80018b0 <main>
  bx lr
 8002c96:	4770      	bx	lr
  ldr r0, =_sdata
 8002c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c9c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002ca0:	0800b300 	.word	0x0800b300
  ldr r2, =_sbss
 8002ca4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002ca8:	2000070c 	.word	0x2000070c

08002cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cac:	e7fe      	b.n	8002cac <ADC1_2_IRQHandler>
	...

08002cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_Init+0x28>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <HAL_Init+0x28>)
 8002cba:	f043 0310 	orr.w	r3, r3, #16
 8002cbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f000 f923 	bl	8002f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc6:	200f      	movs	r0, #15
 8002cc8:	f000 f808 	bl	8002cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ccc:	f7ff f95a 	bl	8001f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_InitTick+0x54>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_InitTick+0x58>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f93b 	bl	8002f76 <HAL_SYSTICK_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00e      	b.n	8002d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b0f      	cmp	r3, #15
 8002d0e:	d80a      	bhi.n	8002d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d10:	2200      	movs	r2, #0
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	f04f 30ff 	mov.w	r0, #4294967295
 8002d18:	f000 f903 	bl	8002f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d1c:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <HAL_InitTick+0x5c>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000018 	.word	0x20000018
 8002d34:	20000020 	.word	0x20000020
 8002d38:	2000001c 	.word	0x2000001c

08002d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_IncTick+0x1c>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_IncTick+0x20>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a03      	ldr	r2, [pc, #12]	; (8002d5c <HAL_IncTick+0x20>)
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	20000020 	.word	0x20000020
 8002d5c:	200005bc 	.word	0x200005bc

08002d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return uwTick;
 8002d64:	4b02      	ldr	r3, [pc, #8]	; (8002d70 <HAL_GetTick+0x10>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	200005bc 	.word	0x200005bc

08002d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	60d3      	str	r3, [r2, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 0307 	and.w	r3, r3, #7
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0b      	blt.n	8002e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4906      	ldr	r1, [pc, #24]	; (8002e0c <__NVIC_EnableIRQ+0x34>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100

08002e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db0a      	blt.n	8002e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	490c      	ldr	r1, [pc, #48]	; (8002e5c <__NVIC_SetPriority+0x4c>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	440b      	add	r3, r1
 8002e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e38:	e00a      	b.n	8002e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4908      	ldr	r1, [pc, #32]	; (8002e60 <__NVIC_SetPriority+0x50>)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	3b04      	subs	r3, #4
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	761a      	strb	r2, [r3, #24]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f1c3 0307 	rsb	r3, r3, #7
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	bf28      	it	cs
 8002e82:	2304      	movcs	r3, #4
 8002e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d902      	bls.n	8002e94 <NVIC_EncodePriority+0x30>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3b03      	subs	r3, #3
 8002e92:	e000      	b.n	8002e96 <NVIC_EncodePriority+0x32>
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43d9      	mvns	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	4313      	orrs	r3, r2
         );
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed8:	d301      	bcc.n	8002ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00f      	b.n	8002efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <SysTick_Config+0x40>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	f7ff ff90 	bl	8002e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <SysTick_Config+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <SysTick_Config+0x40>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff2d 	bl	8002d74 <__NVIC_SetPriorityGrouping>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f34:	f7ff ff42 	bl	8002dbc <__NVIC_GetPriorityGrouping>
 8002f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff90 	bl	8002e64 <NVIC_EncodePriority>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff5f 	bl	8002e10 <__NVIC_SetPriority>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff35 	bl	8002dd8 <__NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ffa2 	bl	8002ec8 <SysTick_Config>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e059      	b.n	800305a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_DMA_Init+0xd4>)
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d80f      	bhi.n	8002fd2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_DMA_Init+0xd8>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	; (800306c <HAL_DMA_Init+0xdc>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	009a      	lsls	r2, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a28      	ldr	r2, [pc, #160]	; (8003070 <HAL_DMA_Init+0xe0>)
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fd0:	e00e      	b.n	8002ff0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_DMA_Init+0xe4>)
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a23      	ldr	r2, [pc, #140]	; (800306c <HAL_DMA_Init+0xdc>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	009a      	lsls	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <HAL_DMA_Init+0xe8>)
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003006:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800300a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	40020407 	.word	0x40020407
 8003068:	bffdfff8 	.word	0xbffdfff8
 800306c:	cccccccd 	.word	0xcccccccd
 8003070:	40020000 	.word	0x40020000
 8003074:	bffdfbf8 	.word	0xbffdfbf8
 8003078:	40020400 	.word	0x40020400

0800307c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_DMA_Start_IT+0x20>
 8003098:	2302      	movs	r3, #2
 800309a:	e04b      	b.n	8003134 <HAL_DMA_Start_IT+0xb8>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d13a      	bne.n	8003126 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fbb1 	bl	800383c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 020e 	orr.w	r2, r2, #14
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e00f      	b.n	8003114 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0204 	bic.w	r2, r2, #4
 8003102:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 020a 	orr.w	r2, r2, #10
 8003112:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e005      	b.n	8003132 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800312e:	2302      	movs	r3, #2
 8003130:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d008      	beq.n	8003166 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e020      	b.n	80031a8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 020e 	bic.w	r2, r2, #14
 8003174:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	2101      	movs	r1, #1
 8003190:	fa01 f202 	lsl.w	r2, r1, r2
 8003194:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d005      	beq.n	80031d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2204      	movs	r2, #4
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
 80031d6:	e0d6      	b.n	8003386 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 020e 	bic.w	r2, r2, #14
 80031e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b64      	ldr	r3, [pc, #400]	; (8003390 <HAL_DMA_Abort_IT+0x1dc>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d958      	bls.n	80032b6 <HAL_DMA_Abort_IT+0x102>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a62      	ldr	r2, [pc, #392]	; (8003394 <HAL_DMA_Abort_IT+0x1e0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d04f      	beq.n	80032ae <HAL_DMA_Abort_IT+0xfa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a61      	ldr	r2, [pc, #388]	; (8003398 <HAL_DMA_Abort_IT+0x1e4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d048      	beq.n	80032aa <HAL_DMA_Abort_IT+0xf6>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5f      	ldr	r2, [pc, #380]	; (800339c <HAL_DMA_Abort_IT+0x1e8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d040      	beq.n	80032a4 <HAL_DMA_Abort_IT+0xf0>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5e      	ldr	r2, [pc, #376]	; (80033a0 <HAL_DMA_Abort_IT+0x1ec>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d038      	beq.n	800329e <HAL_DMA_Abort_IT+0xea>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5c      	ldr	r2, [pc, #368]	; (80033a4 <HAL_DMA_Abort_IT+0x1f0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d030      	beq.n	8003298 <HAL_DMA_Abort_IT+0xe4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5b      	ldr	r2, [pc, #364]	; (80033a8 <HAL_DMA_Abort_IT+0x1f4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d028      	beq.n	8003292 <HAL_DMA_Abort_IT+0xde>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_DMA_Abort_IT+0x1dc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d020      	beq.n	800328c <HAL_DMA_Abort_IT+0xd8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a57      	ldr	r2, [pc, #348]	; (80033ac <HAL_DMA_Abort_IT+0x1f8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d019      	beq.n	8003288 <HAL_DMA_Abort_IT+0xd4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a55      	ldr	r2, [pc, #340]	; (80033b0 <HAL_DMA_Abort_IT+0x1fc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d012      	beq.n	8003284 <HAL_DMA_Abort_IT+0xd0>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a54      	ldr	r2, [pc, #336]	; (80033b4 <HAL_DMA_Abort_IT+0x200>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00a      	beq.n	800327e <HAL_DMA_Abort_IT+0xca>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a52      	ldr	r2, [pc, #328]	; (80033b8 <HAL_DMA_Abort_IT+0x204>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d102      	bne.n	8003278 <HAL_DMA_Abort_IT+0xc4>
 8003272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003276:	e01b      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 8003278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327c:	e018      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 800327e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003282:	e015      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 8003284:	2310      	movs	r3, #16
 8003286:	e013      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 8003288:	2301      	movs	r3, #1
 800328a:	e011      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 800328c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003290:	e00e      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 8003292:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003296:	e00b      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 8003298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800329c:	e008      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 800329e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a2:	e005      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 80032a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a8:	e002      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 80032aa:	2310      	movs	r3, #16
 80032ac:	e000      	b.n	80032b0 <HAL_DMA_Abort_IT+0xfc>
 80032ae:	2301      	movs	r3, #1
 80032b0:	4a42      	ldr	r2, [pc, #264]	; (80033bc <HAL_DMA_Abort_IT+0x208>)
 80032b2:	6053      	str	r3, [r2, #4]
 80032b4:	e057      	b.n	8003366 <HAL_DMA_Abort_IT+0x1b2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a36      	ldr	r2, [pc, #216]	; (8003394 <HAL_DMA_Abort_IT+0x1e0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d04f      	beq.n	8003360 <HAL_DMA_Abort_IT+0x1ac>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a34      	ldr	r2, [pc, #208]	; (8003398 <HAL_DMA_Abort_IT+0x1e4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d048      	beq.n	800335c <HAL_DMA_Abort_IT+0x1a8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a33      	ldr	r2, [pc, #204]	; (800339c <HAL_DMA_Abort_IT+0x1e8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_DMA_Abort_IT+0x1a2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <HAL_DMA_Abort_IT+0x1ec>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d038      	beq.n	8003350 <HAL_DMA_Abort_IT+0x19c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a30      	ldr	r2, [pc, #192]	; (80033a4 <HAL_DMA_Abort_IT+0x1f0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d030      	beq.n	800334a <HAL_DMA_Abort_IT+0x196>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2e      	ldr	r2, [pc, #184]	; (80033a8 <HAL_DMA_Abort_IT+0x1f4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d028      	beq.n	8003344 <HAL_DMA_Abort_IT+0x190>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a26      	ldr	r2, [pc, #152]	; (8003390 <HAL_DMA_Abort_IT+0x1dc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d020      	beq.n	800333e <HAL_DMA_Abort_IT+0x18a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <HAL_DMA_Abort_IT+0x1f8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d019      	beq.n	800333a <HAL_DMA_Abort_IT+0x186>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a29      	ldr	r2, [pc, #164]	; (80033b0 <HAL_DMA_Abort_IT+0x1fc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d012      	beq.n	8003336 <HAL_DMA_Abort_IT+0x182>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <HAL_DMA_Abort_IT+0x200>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00a      	beq.n	8003330 <HAL_DMA_Abort_IT+0x17c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <HAL_DMA_Abort_IT+0x204>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d102      	bne.n	800332a <HAL_DMA_Abort_IT+0x176>
 8003324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003328:	e01b      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 800332a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800332e:	e018      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 8003330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003334:	e015      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 8003336:	2310      	movs	r3, #16
 8003338:	e013      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 800333a:	2301      	movs	r3, #1
 800333c:	e011      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 800333e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003342:	e00e      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 8003344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003348:	e00b      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 800334a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334e:	e008      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 8003350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003354:	e005      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 8003356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800335a:	e002      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 800335c:	2310      	movs	r3, #16
 800335e:	e000      	b.n	8003362 <HAL_DMA_Abort_IT+0x1ae>
 8003360:	2301      	movs	r3, #1
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_DMA_Abort_IT+0x20c>)
 8003364:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
    } 
  }
  return status;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40020080 	.word	0x40020080
 8003394:	40020008 	.word	0x40020008
 8003398:	4002001c 	.word	0x4002001c
 800339c:	40020030 	.word	0x40020030
 80033a0:	40020044 	.word	0x40020044
 80033a4:	40020058 	.word	0x40020058
 80033a8:	4002006c 	.word	0x4002006c
 80033ac:	40020408 	.word	0x40020408
 80033b0:	4002041c 	.word	0x4002041c
 80033b4:	40020430 	.word	0x40020430
 80033b8:	40020444 	.word	0x40020444
 80033bc:	40020400 	.word	0x40020400
 80033c0:	40020000 	.word	0x40020000

080033c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	2204      	movs	r2, #4
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80f1 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x20c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80eb 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b5f      	ldr	r3, [pc, #380]	; (800359c <HAL_DMA_IRQHandler+0x1d8>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d958      	bls.n	80034d6 <HAL_DMA_IRQHandler+0x112>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <HAL_DMA_IRQHandler+0x1dc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d04f      	beq.n	80034ce <HAL_DMA_IRQHandler+0x10a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a5c      	ldr	r2, [pc, #368]	; (80035a4 <HAL_DMA_IRQHandler+0x1e0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d048      	beq.n	80034ca <HAL_DMA_IRQHandler+0x106>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a5a      	ldr	r2, [pc, #360]	; (80035a8 <HAL_DMA_IRQHandler+0x1e4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d040      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x100>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a59      	ldr	r2, [pc, #356]	; (80035ac <HAL_DMA_IRQHandler+0x1e8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d038      	beq.n	80034be <HAL_DMA_IRQHandler+0xfa>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a57      	ldr	r2, [pc, #348]	; (80035b0 <HAL_DMA_IRQHandler+0x1ec>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d030      	beq.n	80034b8 <HAL_DMA_IRQHandler+0xf4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a56      	ldr	r2, [pc, #344]	; (80035b4 <HAL_DMA_IRQHandler+0x1f0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d028      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xee>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a4d      	ldr	r2, [pc, #308]	; (800359c <HAL_DMA_IRQHandler+0x1d8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d020      	beq.n	80034ac <HAL_DMA_IRQHandler+0xe8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_DMA_IRQHandler+0x1f4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d019      	beq.n	80034a8 <HAL_DMA_IRQHandler+0xe4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a50      	ldr	r2, [pc, #320]	; (80035bc <HAL_DMA_IRQHandler+0x1f8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d012      	beq.n	80034a4 <HAL_DMA_IRQHandler+0xe0>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4f      	ldr	r2, [pc, #316]	; (80035c0 <HAL_DMA_IRQHandler+0x1fc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00a      	beq.n	800349e <HAL_DMA_IRQHandler+0xda>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a4d      	ldr	r2, [pc, #308]	; (80035c4 <HAL_DMA_IRQHandler+0x200>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d102      	bne.n	8003498 <HAL_DMA_IRQHandler+0xd4>
 8003492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003496:	e01b      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 8003498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800349c:	e018      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 800349e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a2:	e015      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034a4:	2340      	movs	r3, #64	; 0x40
 80034a6:	e013      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034a8:	2304      	movs	r3, #4
 80034aa:	e011      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034b0:	e00e      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034b6:	e00b      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034bc:	e008      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034c2:	e005      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c8:	e002      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034ca:	2340      	movs	r3, #64	; 0x40
 80034cc:	e000      	b.n	80034d0 <HAL_DMA_IRQHandler+0x10c>
 80034ce:	2304      	movs	r3, #4
 80034d0:	4a3d      	ldr	r2, [pc, #244]	; (80035c8 <HAL_DMA_IRQHandler+0x204>)
 80034d2:	6053      	str	r3, [r2, #4]
 80034d4:	e057      	b.n	8003586 <HAL_DMA_IRQHandler+0x1c2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <HAL_DMA_IRQHandler+0x1dc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d04f      	beq.n	8003580 <HAL_DMA_IRQHandler+0x1bc>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <HAL_DMA_IRQHandler+0x1e0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d048      	beq.n	800357c <HAL_DMA_IRQHandler+0x1b8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2e      	ldr	r2, [pc, #184]	; (80035a8 <HAL_DMA_IRQHandler+0x1e4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d040      	beq.n	8003576 <HAL_DMA_IRQHandler+0x1b2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <HAL_DMA_IRQHandler+0x1e8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d038      	beq.n	8003570 <HAL_DMA_IRQHandler+0x1ac>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <HAL_DMA_IRQHandler+0x1ec>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d030      	beq.n	800356a <HAL_DMA_IRQHandler+0x1a6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <HAL_DMA_IRQHandler+0x1f0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d028      	beq.n	8003564 <HAL_DMA_IRQHandler+0x1a0>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_DMA_IRQHandler+0x1d8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d020      	beq.n	800355e <HAL_DMA_IRQHandler+0x19a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <HAL_DMA_IRQHandler+0x1f4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_DMA_IRQHandler+0x196>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a24      	ldr	r2, [pc, #144]	; (80035bc <HAL_DMA_IRQHandler+0x1f8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d012      	beq.n	8003556 <HAL_DMA_IRQHandler+0x192>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <HAL_DMA_IRQHandler+0x1fc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00a      	beq.n	8003550 <HAL_DMA_IRQHandler+0x18c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a21      	ldr	r2, [pc, #132]	; (80035c4 <HAL_DMA_IRQHandler+0x200>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d102      	bne.n	800354a <HAL_DMA_IRQHandler+0x186>
 8003544:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003548:	e01b      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 800354a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800354e:	e018      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 8003550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003554:	e015      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	e013      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 800355a:	2304      	movs	r3, #4
 800355c:	e011      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 800355e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003562:	e00e      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 8003564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003568:	e00b      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 800356a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800356e:	e008      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 8003570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003574:	e005      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 8003576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357a:	e002      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 800357c:	2340      	movs	r3, #64	; 0x40
 800357e:	e000      	b.n	8003582 <HAL_DMA_IRQHandler+0x1be>
 8003580:	2304      	movs	r3, #4
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <HAL_DMA_IRQHandler+0x208>)
 8003584:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8136 	beq.w	80037fc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003598:	e130      	b.n	80037fc <HAL_DMA_IRQHandler+0x438>
 800359a:	bf00      	nop
 800359c:	40020080 	.word	0x40020080
 80035a0:	40020008 	.word	0x40020008
 80035a4:	4002001c 	.word	0x4002001c
 80035a8:	40020030 	.word	0x40020030
 80035ac:	40020044 	.word	0x40020044
 80035b0:	40020058 	.word	0x40020058
 80035b4:	4002006c 	.word	0x4002006c
 80035b8:	40020408 	.word	0x40020408
 80035bc:	4002041c 	.word	0x4002041c
 80035c0:	40020430 	.word	0x40020430
 80035c4:	40020444 	.word	0x40020444
 80035c8:	40020400 	.word	0x40020400
 80035cc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	2202      	movs	r2, #2
 80035d6:	409a      	lsls	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80dd 	beq.w	800379c <HAL_DMA_IRQHandler+0x3d8>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80d7 	beq.w	800379c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 020a 	bic.w	r2, r2, #10
 800360a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	4b7b      	ldr	r3, [pc, #492]	; (8003808 <HAL_DMA_IRQHandler+0x444>)
 800361c:	429a      	cmp	r2, r3
 800361e:	d958      	bls.n	80036d2 <HAL_DMA_IRQHandler+0x30e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a79      	ldr	r2, [pc, #484]	; (800380c <HAL_DMA_IRQHandler+0x448>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04f      	beq.n	80036ca <HAL_DMA_IRQHandler+0x306>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a78      	ldr	r2, [pc, #480]	; (8003810 <HAL_DMA_IRQHandler+0x44c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d048      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x302>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a76      	ldr	r2, [pc, #472]	; (8003814 <HAL_DMA_IRQHandler+0x450>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d040      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x2fc>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a75      	ldr	r2, [pc, #468]	; (8003818 <HAL_DMA_IRQHandler+0x454>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d038      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2f6>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a73      	ldr	r2, [pc, #460]	; (800381c <HAL_DMA_IRQHandler+0x458>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d030      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x2f0>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a72      	ldr	r2, [pc, #456]	; (8003820 <HAL_DMA_IRQHandler+0x45c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d028      	beq.n	80036ae <HAL_DMA_IRQHandler+0x2ea>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a69      	ldr	r2, [pc, #420]	; (8003808 <HAL_DMA_IRQHandler+0x444>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d020      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x2e4>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6e      	ldr	r2, [pc, #440]	; (8003824 <HAL_DMA_IRQHandler+0x460>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d019      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x2e0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a6c      	ldr	r2, [pc, #432]	; (8003828 <HAL_DMA_IRQHandler+0x464>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d012      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x2dc>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6b      	ldr	r2, [pc, #428]	; (800382c <HAL_DMA_IRQHandler+0x468>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00a      	beq.n	800369a <HAL_DMA_IRQHandler+0x2d6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a69      	ldr	r2, [pc, #420]	; (8003830 <HAL_DMA_IRQHandler+0x46c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d102      	bne.n	8003694 <HAL_DMA_IRQHandler+0x2d0>
 800368e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003692:	e01b      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 8003694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003698:	e018      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 800369a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800369e:	e015      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036a0:	2320      	movs	r3, #32
 80036a2:	e013      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e011      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ac:	e00e      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036b2:	e00b      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b8:	e008      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036be:	e005      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036c4:	e002      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036c6:	2320      	movs	r3, #32
 80036c8:	e000      	b.n	80036cc <HAL_DMA_IRQHandler+0x308>
 80036ca:	2302      	movs	r3, #2
 80036cc:	4a59      	ldr	r2, [pc, #356]	; (8003834 <HAL_DMA_IRQHandler+0x470>)
 80036ce:	6053      	str	r3, [r2, #4]
 80036d0:	e057      	b.n	8003782 <HAL_DMA_IRQHandler+0x3be>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4d      	ldr	r2, [pc, #308]	; (800380c <HAL_DMA_IRQHandler+0x448>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d04f      	beq.n	800377c <HAL_DMA_IRQHandler+0x3b8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a4b      	ldr	r2, [pc, #300]	; (8003810 <HAL_DMA_IRQHandler+0x44c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d048      	beq.n	8003778 <HAL_DMA_IRQHandler+0x3b4>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a4a      	ldr	r2, [pc, #296]	; (8003814 <HAL_DMA_IRQHandler+0x450>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d040      	beq.n	8003772 <HAL_DMA_IRQHandler+0x3ae>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a48      	ldr	r2, [pc, #288]	; (8003818 <HAL_DMA_IRQHandler+0x454>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d038      	beq.n	800376c <HAL_DMA_IRQHandler+0x3a8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a47      	ldr	r2, [pc, #284]	; (800381c <HAL_DMA_IRQHandler+0x458>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d030      	beq.n	8003766 <HAL_DMA_IRQHandler+0x3a2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a45      	ldr	r2, [pc, #276]	; (8003820 <HAL_DMA_IRQHandler+0x45c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d028      	beq.n	8003760 <HAL_DMA_IRQHandler+0x39c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3d      	ldr	r2, [pc, #244]	; (8003808 <HAL_DMA_IRQHandler+0x444>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d020      	beq.n	800375a <HAL_DMA_IRQHandler+0x396>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a41      	ldr	r2, [pc, #260]	; (8003824 <HAL_DMA_IRQHandler+0x460>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d019      	beq.n	8003756 <HAL_DMA_IRQHandler+0x392>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a40      	ldr	r2, [pc, #256]	; (8003828 <HAL_DMA_IRQHandler+0x464>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d012      	beq.n	8003752 <HAL_DMA_IRQHandler+0x38e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3e      	ldr	r2, [pc, #248]	; (800382c <HAL_DMA_IRQHandler+0x468>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00a      	beq.n	800374c <HAL_DMA_IRQHandler+0x388>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3d      	ldr	r2, [pc, #244]	; (8003830 <HAL_DMA_IRQHandler+0x46c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d102      	bne.n	8003746 <HAL_DMA_IRQHandler+0x382>
 8003740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003744:	e01b      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 8003746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800374a:	e018      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 800374c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003750:	e015      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 8003752:	2320      	movs	r3, #32
 8003754:	e013      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 8003756:	2302      	movs	r3, #2
 8003758:	e011      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 800375a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800375e:	e00e      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 8003760:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003764:	e00b      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 8003766:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800376a:	e008      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 800376c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003770:	e005      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 8003772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003776:	e002      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 8003778:	2320      	movs	r3, #32
 800377a:	e000      	b.n	800377e <HAL_DMA_IRQHandler+0x3ba>
 800377c:	2302      	movs	r3, #2
 800377e:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <HAL_DMA_IRQHandler+0x474>)
 8003780:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d034      	beq.n	80037fc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800379a:	e02f      	b.n	80037fc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2208      	movs	r2, #8
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d028      	beq.n	80037fe <HAL_DMA_IRQHandler+0x43a>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d023      	beq.n	80037fe <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 020e 	bic.w	r2, r2, #14
 80037c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
    }
  }
  return;
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
}
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40020080 	.word	0x40020080
 800380c:	40020008 	.word	0x40020008
 8003810:	4002001c 	.word	0x4002001c
 8003814:	40020030 	.word	0x40020030
 8003818:	40020044 	.word	0x40020044
 800381c:	40020058 	.word	0x40020058
 8003820:	4002006c 	.word	0x4002006c
 8003824:	40020408 	.word	0x40020408
 8003828:	4002041c 	.word	0x4002041c
 800382c:	40020430 	.word	0x40020430
 8003830:	40020444 	.word	0x40020444
 8003834:	40020400 	.word	0x40020400
 8003838:	40020000 	.word	0x40020000

0800383c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	2101      	movs	r1, #1
 8003854:	fa01 f202 	lsl.w	r2, r1, r2
 8003858:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b10      	cmp	r3, #16
 8003868:	d108      	bne.n	800387c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800387a:	e007      	b.n	800388c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
	...

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b08b      	sub	sp, #44	; 0x2c
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038aa:	e179      	b.n	8003ba0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038ac:	2201      	movs	r2, #1
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	f040 8168 	bne.w	8003b9a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a96      	ldr	r2, [pc, #600]	; (8003b28 <HAL_GPIO_Init+0x290>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d05e      	beq.n	8003992 <HAL_GPIO_Init+0xfa>
 80038d4:	4a94      	ldr	r2, [pc, #592]	; (8003b28 <HAL_GPIO_Init+0x290>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d875      	bhi.n	80039c6 <HAL_GPIO_Init+0x12e>
 80038da:	4a94      	ldr	r2, [pc, #592]	; (8003b2c <HAL_GPIO_Init+0x294>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d058      	beq.n	8003992 <HAL_GPIO_Init+0xfa>
 80038e0:	4a92      	ldr	r2, [pc, #584]	; (8003b2c <HAL_GPIO_Init+0x294>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d86f      	bhi.n	80039c6 <HAL_GPIO_Init+0x12e>
 80038e6:	4a92      	ldr	r2, [pc, #584]	; (8003b30 <HAL_GPIO_Init+0x298>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d052      	beq.n	8003992 <HAL_GPIO_Init+0xfa>
 80038ec:	4a90      	ldr	r2, [pc, #576]	; (8003b30 <HAL_GPIO_Init+0x298>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d869      	bhi.n	80039c6 <HAL_GPIO_Init+0x12e>
 80038f2:	4a90      	ldr	r2, [pc, #576]	; (8003b34 <HAL_GPIO_Init+0x29c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d04c      	beq.n	8003992 <HAL_GPIO_Init+0xfa>
 80038f8:	4a8e      	ldr	r2, [pc, #568]	; (8003b34 <HAL_GPIO_Init+0x29c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d863      	bhi.n	80039c6 <HAL_GPIO_Init+0x12e>
 80038fe:	4a8e      	ldr	r2, [pc, #568]	; (8003b38 <HAL_GPIO_Init+0x2a0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d046      	beq.n	8003992 <HAL_GPIO_Init+0xfa>
 8003904:	4a8c      	ldr	r2, [pc, #560]	; (8003b38 <HAL_GPIO_Init+0x2a0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d85d      	bhi.n	80039c6 <HAL_GPIO_Init+0x12e>
 800390a:	2b12      	cmp	r3, #18
 800390c:	d82a      	bhi.n	8003964 <HAL_GPIO_Init+0xcc>
 800390e:	2b12      	cmp	r3, #18
 8003910:	d859      	bhi.n	80039c6 <HAL_GPIO_Init+0x12e>
 8003912:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <HAL_GPIO_Init+0x80>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003993 	.word	0x08003993
 800391c:	0800396d 	.word	0x0800396d
 8003920:	0800397f 	.word	0x0800397f
 8003924:	080039c1 	.word	0x080039c1
 8003928:	080039c7 	.word	0x080039c7
 800392c:	080039c7 	.word	0x080039c7
 8003930:	080039c7 	.word	0x080039c7
 8003934:	080039c7 	.word	0x080039c7
 8003938:	080039c7 	.word	0x080039c7
 800393c:	080039c7 	.word	0x080039c7
 8003940:	080039c7 	.word	0x080039c7
 8003944:	080039c7 	.word	0x080039c7
 8003948:	080039c7 	.word	0x080039c7
 800394c:	080039c7 	.word	0x080039c7
 8003950:	080039c7 	.word	0x080039c7
 8003954:	080039c7 	.word	0x080039c7
 8003958:	080039c7 	.word	0x080039c7
 800395c:	08003975 	.word	0x08003975
 8003960:	08003989 	.word	0x08003989
 8003964:	4a75      	ldr	r2, [pc, #468]	; (8003b3c <HAL_GPIO_Init+0x2a4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800396a:	e02c      	b.n	80039c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	623b      	str	r3, [r7, #32]
          break;
 8003972:	e029      	b.n	80039c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	3304      	adds	r3, #4
 800397a:	623b      	str	r3, [r7, #32]
          break;
 800397c:	e024      	b.n	80039c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	3308      	adds	r3, #8
 8003984:	623b      	str	r3, [r7, #32]
          break;
 8003986:	e01f      	b.n	80039c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	330c      	adds	r3, #12
 800398e:	623b      	str	r3, [r7, #32]
          break;
 8003990:	e01a      	b.n	80039c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800399a:	2304      	movs	r3, #4
 800399c:	623b      	str	r3, [r7, #32]
          break;
 800399e:	e013      	b.n	80039c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039a8:	2308      	movs	r3, #8
 80039aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	611a      	str	r2, [r3, #16]
          break;
 80039b2:	e009      	b.n	80039c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039b4:	2308      	movs	r3, #8
 80039b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	615a      	str	r2, [r3, #20]
          break;
 80039be:	e003      	b.n	80039c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039c0:	2300      	movs	r3, #0
 80039c2:	623b      	str	r3, [r7, #32]
          break;
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_Init+0x130>
          break;
 80039c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2bff      	cmp	r3, #255	; 0xff
 80039cc:	d801      	bhi.n	80039d2 <HAL_GPIO_Init+0x13a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	e001      	b.n	80039d6 <HAL_GPIO_Init+0x13e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2bff      	cmp	r3, #255	; 0xff
 80039dc:	d802      	bhi.n	80039e4 <HAL_GPIO_Init+0x14c>
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	e002      	b.n	80039ea <HAL_GPIO_Init+0x152>
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	3b08      	subs	r3, #8
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	210f      	movs	r1, #15
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	401a      	ands	r2, r3
 80039fc:	6a39      	ldr	r1, [r7, #32]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80c1 	beq.w	8003b9a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a18:	4b49      	ldr	r3, [pc, #292]	; (8003b40 <HAL_GPIO_Init+0x2a8>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	4a48      	ldr	r2, [pc, #288]	; (8003b40 <HAL_GPIO_Init+0x2a8>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6193      	str	r3, [r2, #24]
 8003a24:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <HAL_GPIO_Init+0x2a8>)
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a30:	4a44      	ldr	r2, [pc, #272]	; (8003b44 <HAL_GPIO_Init+0x2ac>)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	220f      	movs	r2, #15
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <HAL_GPIO_Init+0x2b0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01f      	beq.n	8003a9c <HAL_GPIO_Init+0x204>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <HAL_GPIO_Init+0x2b4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d019      	beq.n	8003a98 <HAL_GPIO_Init+0x200>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3a      	ldr	r2, [pc, #232]	; (8003b50 <HAL_GPIO_Init+0x2b8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_GPIO_Init+0x1fc>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a39      	ldr	r2, [pc, #228]	; (8003b54 <HAL_GPIO_Init+0x2bc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00d      	beq.n	8003a90 <HAL_GPIO_Init+0x1f8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a38      	ldr	r2, [pc, #224]	; (8003b58 <HAL_GPIO_Init+0x2c0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <HAL_GPIO_Init+0x1f4>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a37      	ldr	r2, [pc, #220]	; (8003b5c <HAL_GPIO_Init+0x2c4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d101      	bne.n	8003a88 <HAL_GPIO_Init+0x1f0>
 8003a84:	2305      	movs	r3, #5
 8003a86:	e00a      	b.n	8003a9e <HAL_GPIO_Init+0x206>
 8003a88:	2306      	movs	r3, #6
 8003a8a:	e008      	b.n	8003a9e <HAL_GPIO_Init+0x206>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	e006      	b.n	8003a9e <HAL_GPIO_Init+0x206>
 8003a90:	2303      	movs	r3, #3
 8003a92:	e004      	b.n	8003a9e <HAL_GPIO_Init+0x206>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e002      	b.n	8003a9e <HAL_GPIO_Init+0x206>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_GPIO_Init+0x206>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	f002 0203 	and.w	r2, r2, #3
 8003aa4:	0092      	lsls	r2, r2, #2
 8003aa6:	4093      	lsls	r3, r2
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003aae:	4925      	ldr	r1, [pc, #148]	; (8003b44 <HAL_GPIO_Init+0x2ac>)
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ac8:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	4924      	ldr	r1, [pc, #144]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ad6:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	4920      	ldr	r1, [pc, #128]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	491a      	ldr	r1, [pc, #104]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60cb      	str	r3, [r1, #12]
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	4916      	ldr	r1, [pc, #88]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d025      	beq.n	8003b64 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	4910      	ldr	r1, [pc, #64]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
 8003b24:	e025      	b.n	8003b72 <HAL_GPIO_Init+0x2da>
 8003b26:	bf00      	nop
 8003b28:	10320000 	.word	0x10320000
 8003b2c:	10310000 	.word	0x10310000
 8003b30:	10220000 	.word	0x10220000
 8003b34:	10210000 	.word	0x10210000
 8003b38:	10120000 	.word	0x10120000
 8003b3c:	10110000 	.word	0x10110000
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40010800 	.word	0x40010800
 8003b4c:	40010c00 	.word	0x40010c00
 8003b50:	40011000 	.word	0x40011000
 8003b54:	40011400 	.word	0x40011400
 8003b58:	40011800 	.word	0x40011800
 8003b5c:	40011c00 	.word	0x40011c00
 8003b60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b64:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	4913      	ldr	r1, [pc, #76]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	490e      	ldr	r1, [pc, #56]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
 8003b8a:	e006      	b.n	8003b9a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	4909      	ldr	r1, [pc, #36]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f47f ae7e 	bne.w	80038ac <HAL_GPIO_Init+0x14>
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	372c      	adds	r7, #44	; 0x2c
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	40010400 	.word	0x40010400

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bdc:	e003      	b.n	8003be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	611a      	str	r2, [r3, #16]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e272      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8087 	beq.w	8003d1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c10:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 030c 	and.w	r3, r3, #12
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d00c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c1c:	4b8f      	ldr	r3, [pc, #572]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d112      	bne.n	8003c4e <HAL_RCC_OscConfig+0x5e>
 8003c28:	4b8c      	ldr	r3, [pc, #560]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c36:	4b89      	ldr	r3, [pc, #548]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d06c      	beq.n	8003d1c <HAL_RCC_OscConfig+0x12c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d168      	bne.n	8003d1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e24c      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x76>
 8003c58:	4b80      	ldr	r3, [pc, #512]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7f      	ldr	r2, [pc, #508]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	e02e      	b.n	8003cc4 <HAL_RCC_OscConfig+0xd4>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x98>
 8003c6e:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7a      	ldr	r2, [pc, #488]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	4b78      	ldr	r3, [pc, #480]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a77      	ldr	r2, [pc, #476]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e01d      	b.n	8003cc4 <HAL_RCC_OscConfig+0xd4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0xbc>
 8003c92:	4b72      	ldr	r3, [pc, #456]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a71      	ldr	r2, [pc, #452]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a6e      	ldr	r2, [pc, #440]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xd4>
 8003cac:	4b6b      	ldr	r3, [pc, #428]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6a      	ldr	r2, [pc, #424]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7ff f848 	bl	8002d60 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7ff f844 	bl	8002d60 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e200      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b5d      	ldr	r3, [pc, #372]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xe4>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7ff f834 	bl	8002d60 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7ff f830 	bl	8002d60 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1ec      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	4b53      	ldr	r3, [pc, #332]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x10c>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d063      	beq.n	8003df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d2a:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d36:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d11c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x18c>
 8003d42:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d116      	bne.n	8003d7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_OscConfig+0x176>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e1c0      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4939      	ldr	r1, [pc, #228]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	e03a      	b.n	8003df2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d020      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d84:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <HAL_RCC_OscConfig+0x270>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fe ffe9 	bl	8002d60 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d92:	f7fe ffe5 	bl	8002d60 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e1a1      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4927      	ldr	r1, [pc, #156]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	e015      	b.n	8003df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe ffc8 	bl	8002d60 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd4:	f7fe ffc4 	bl	8002d60 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e180      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d03a      	beq.n	8003e74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d019      	beq.n	8003e3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <HAL_RCC_OscConfig+0x274>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0c:	f7fe ffa8 	bl	8002d60 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e14:	f7fe ffa4 	bl	8002d60 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e160      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f000 face 	bl	80043d4 <RCC_Delay>
 8003e38:	e01c      	b.n	8003e74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e40:	f7fe ff8e 	bl	8002d60 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e46:	e00f      	b.n	8003e68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e48:	f7fe ff8a 	bl	8002d60 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d908      	bls.n	8003e68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e146      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	42420000 	.word	0x42420000
 8003e64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e68:	4b92      	ldr	r3, [pc, #584]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e9      	bne.n	8003e48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80a6 	beq.w	8003fce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	4b8b      	ldr	r3, [pc, #556]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4b88      	ldr	r3, [pc, #544]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	4a87      	ldr	r2, [pc, #540]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	61d3      	str	r3, [r2, #28]
 8003e9e:	4b85      	ldr	r3, [pc, #532]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b82      	ldr	r3, [pc, #520]	; (80040b8 <HAL_RCC_OscConfig+0x4c8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b7f      	ldr	r3, [pc, #508]	; (80040b8 <HAL_RCC_OscConfig+0x4c8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7e      	ldr	r2, [pc, #504]	; (80040b8 <HAL_RCC_OscConfig+0x4c8>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe ff4b 	bl	8002d60 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fe ff47 	bl	8002d60 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b64      	cmp	r3, #100	; 0x64
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e103      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b75      	ldr	r3, [pc, #468]	; (80040b8 <HAL_RCC_OscConfig+0x4c8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x312>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6213      	str	r3, [r2, #32]
 8003f00:	e02d      	b.n	8003f5e <HAL_RCC_OscConfig+0x36e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x334>
 8003f0a:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4a69      	ldr	r2, [pc, #420]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6213      	str	r3, [r2, #32]
 8003f16:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	4a66      	ldr	r2, [pc, #408]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	6213      	str	r3, [r2, #32]
 8003f22:	e01c      	b.n	8003f5e <HAL_RCC_OscConfig+0x36e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCC_OscConfig+0x356>
 8003f2c:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a60      	ldr	r2, [pc, #384]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6213      	str	r3, [r2, #32]
 8003f38:	4b5e      	ldr	r3, [pc, #376]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4a5d      	ldr	r2, [pc, #372]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6213      	str	r3, [r2, #32]
 8003f44:	e00b      	b.n	8003f5e <HAL_RCC_OscConfig+0x36e>
 8003f46:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4a5a      	ldr	r2, [pc, #360]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6213      	str	r3, [r2, #32]
 8003f52:	4b58      	ldr	r3, [pc, #352]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4a57      	ldr	r2, [pc, #348]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d015      	beq.n	8003f92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fe fefb 	bl	8002d60 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fe fef7 	bl	8002d60 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e0b1      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ee      	beq.n	8003f6e <HAL_RCC_OscConfig+0x37e>
 8003f90:	e014      	b.n	8003fbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f92:	f7fe fee5 	bl	8002d60 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe fee1 	bl	8002d60 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e09b      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb0:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ee      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc2:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4a3b      	ldr	r2, [pc, #236]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8087 	beq.w	80040e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fd8:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d061      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d146      	bne.n	800407a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b33      	ldr	r3, [pc, #204]	; (80040bc <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe feb5 	bl	8002d60 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fe feb1 	bl	8002d60 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e06d      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d108      	bne.n	8004034 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4921      	ldr	r1, [pc, #132]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004034:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a19      	ldr	r1, [r3, #32]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	430b      	orrs	r3, r1
 8004046:	491b      	ldr	r1, [pc, #108]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x4cc>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fe fe85 	bl	8002d60 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe fe81 	bl	8002d60 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e03d      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x46a>
 8004078:	e035      	b.n	80040e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_RCC_OscConfig+0x4cc>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe fe6e 	bl	8002d60 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004088:	f7fe fe6a 	bl	8002d60 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e026      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x498>
 80040a6:	e01e      	b.n	80040e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e019      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40007000 	.word	0x40007000
 80040bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_OscConfig+0x500>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d106      	bne.n	80040e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000

080040f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0d0      	b.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d910      	bls.n	8004138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 0207 	bic.w	r2, r3, #7
 800411e:	4965      	ldr	r1, [pc, #404]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0b8      	b.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004150:	4b59      	ldr	r3, [pc, #356]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4a58      	ldr	r2, [pc, #352]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800415a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004168:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a52      	ldr	r2, [pc, #328]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004172:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b50      	ldr	r3, [pc, #320]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	494d      	ldr	r1, [pc, #308]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d040      	beq.n	8004214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d115      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e073      	b.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e06b      	b.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4936      	ldr	r1, [pc, #216]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e4:	f7fe fdbc 	bl	8002d60 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fe fdb8 	bl	8002d60 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e053      	b.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d210      	bcs.n	8004244 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 0207 	bic.w	r2, r3, #7
 800422a:	4922      	ldr	r1, [pc, #136]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e032      	b.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4916      	ldr	r1, [pc, #88]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800426e:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	490e      	ldr	r1, [pc, #56]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 800427e:	4313      	orrs	r3, r2
 8004280:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004282:	f000 f821 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004286:	4602      	mov	r2, r0
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	490a      	ldr	r1, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x1c8>)
 8004294:	5ccb      	ldrb	r3, [r1, r3]
 8004296:	fa22 f303 	lsr.w	r3, r2, r3
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1cc>)
 800429c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1d0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fd1a 	bl	8002cdc <HAL_InitTick>

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40022000 	.word	0x40022000
 80042b8:	40021000 	.word	0x40021000
 80042bc:	0800aea0 	.word	0x0800aea0
 80042c0:	20000018 	.word	0x20000018
 80042c4:	2000001c 	.word	0x2000001c

080042c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042e2:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_GetSysClockFreq+0x94>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d002      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x30>
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d003      	beq.n	80042fe <HAL_RCC_GetSysClockFreq+0x36>
 80042f6:	e027      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_GetSysClockFreq+0x98>)
 80042fa:	613b      	str	r3, [r7, #16]
      break;
 80042fc:	e027      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	0c9b      	lsrs	r3, r3, #18
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	4a17      	ldr	r2, [pc, #92]	; (8004364 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004308:	5cd3      	ldrb	r3, [r2, r3]
 800430a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d010      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <HAL_RCC_GetSysClockFreq+0x94>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	0c5b      	lsrs	r3, r3, #17
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	4a11      	ldr	r2, [pc, #68]	; (8004368 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004322:	5cd3      	ldrb	r3, [r2, r3]
 8004324:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <HAL_RCC_GetSysClockFreq+0x98>)
 800432a:	fb03 f202 	mul.w	r2, r3, r2
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e004      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0c      	ldr	r2, [pc, #48]	; (800436c <HAL_RCC_GetSysClockFreq+0xa4>)
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	613b      	str	r3, [r7, #16]
      break;
 8004346:	e002      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetSysClockFreq+0x98>)
 800434a:	613b      	str	r3, [r7, #16]
      break;
 800434c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434e:	693b      	ldr	r3, [r7, #16]
}
 8004350:	4618      	mov	r0, r3
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	007a1200 	.word	0x007a1200
 8004364:	0800aeb8 	.word	0x0800aeb8
 8004368:	0800aec8 	.word	0x0800aec8
 800436c:	003d0900 	.word	0x003d0900

08004370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <HAL_RCC_GetHCLKFreq+0x10>)
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr
 8004380:	20000018 	.word	0x20000018

08004384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004388:	f7ff fff2 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4903      	ldr	r1, [pc, #12]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	0800aeb0 	.word	0x0800aeb0

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043b0:	f7ff ffde 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	0adb      	lsrs	r3, r3, #11
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000
 80043d0:	0800aeb0 	.word	0x0800aeb0

080043d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <RCC_Delay+0x34>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <RCC_Delay+0x38>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	0a5b      	lsrs	r3, r3, #9
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043f0:	bf00      	nop
  }
  while (Delay --);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1e5a      	subs	r2, r3, #1
 80043f6:	60fa      	str	r2, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f9      	bne.n	80043f0 <RCC_Delay+0x1c>
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	20000018 	.word	0x20000018
 800440c:	10624dd3 	.word	0x10624dd3

08004410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e041      	b.n	80044a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fe f940 	bl	80026bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f000 fd86 	bl	8004f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d001      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e044      	b.n	8004552 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1d      	ldr	r2, [pc, #116]	; (800455c <HAL_TIM_Base_Start_IT+0xac>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x6c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <HAL_TIM_Base_Start_IT+0xb0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x6c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fc:	d00e      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x6c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_TIM_Base_Start_IT+0xb4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x6c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a16      	ldr	r2, [pc, #88]	; (8004568 <HAL_TIM_Base_Start_IT+0xb8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x6c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_TIM_Base_Start_IT+0xbc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d111      	bne.n	8004540 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b06      	cmp	r3, #6
 800452c:	d010      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453e:	e007      	b.n	8004550 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40013400 	.word	0x40013400
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00

08004570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e041      	b.n	8004606 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f839 	bl	800460e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 fcd6 	bl	8004f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_TIM_PWM_Start+0x24>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e022      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d109      	bne.n	800465e <HAL_TIM_PWM_Start+0x3e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	bf14      	ite	ne
 8004656:	2301      	movne	r3, #1
 8004658:	2300      	moveq	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	e015      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d109      	bne.n	8004678 <HAL_TIM_PWM_Start+0x58>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e008      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e072      	b.n	8004778 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_PWM_Start+0x82>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a0:	e013      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_PWM_Start+0x92>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_PWM_Start+0xa2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c0:	e003      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff00 	bl	80054d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a28      	ldr	r2, [pc, #160]	; (8004780 <HAL_TIM_PWM_Start+0x160>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_TIM_PWM_Start+0xcc>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a27      	ldr	r2, [pc, #156]	; (8004784 <HAL_TIM_PWM_Start+0x164>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_PWM_Start+0xd0>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_TIM_PWM_Start+0xd2>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004704:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <HAL_TIM_PWM_Start+0x160>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d018      	beq.n	8004742 <HAL_TIM_PWM_Start+0x122>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_TIM_PWM_Start+0x164>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <HAL_TIM_PWM_Start+0x122>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004722:	d00e      	beq.n	8004742 <HAL_TIM_PWM_Start+0x122>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a17      	ldr	r2, [pc, #92]	; (8004788 <HAL_TIM_PWM_Start+0x168>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <HAL_TIM_PWM_Start+0x122>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <HAL_TIM_PWM_Start+0x16c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIM_PWM_Start+0x122>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a14      	ldr	r2, [pc, #80]	; (8004790 <HAL_TIM_PWM_Start+0x170>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d111      	bne.n	8004766 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b06      	cmp	r3, #6
 8004752:	d010      	beq.n	8004776 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	e007      	b.n	8004776 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00

08004794 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e093      	b.n	80048d0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fd ffb7 	bl	8002730 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d8:	f023 0307 	bic.w	r3, r3, #7
 80047dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f000 fbb9 	bl	8004f60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	4313      	orrs	r3, r2
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004834:	f023 030c 	bic.w	r3, r3, #12
 8004838:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	4313      	orrs	r3, r2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	011a      	lsls	r2, r3, #4
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	031b      	lsls	r3, r3, #12
 8004864:	4313      	orrs	r3, r2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	4313      	orrs	r3, r2
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004900:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d110      	bne.n	800492a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800490e:	7b7b      	ldrb	r3, [r7, #13]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e069      	b.n	80049ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004928:	e031      	b.n	800498e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d110      	bne.n	8004952 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004930:	7bbb      	ldrb	r3, [r7, #14]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004936:	7b3b      	ldrb	r3, [r7, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e055      	b.n	80049ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004950:	e01d      	b.n	800498e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d108      	bne.n	800496a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004958:	7bbb      	ldrb	r3, [r7, #14]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800495e:	7b7b      	ldrb	r3, [r7, #13]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004964:	7b3b      	ldrb	r3, [r7, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e03e      	b.n	80049ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_TIM_Encoder_Start+0xc4>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d008      	beq.n	80049ac <HAL_TIM_Encoder_Start+0xd4>
 800499a:	e00f      	b.n	80049bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	2100      	movs	r1, #0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fd97 	bl	80054d8 <TIM_CCxChannelCmd>
      break;
 80049aa:	e016      	b.n	80049da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	2104      	movs	r1, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fd8f 	bl	80054d8 <TIM_CCxChannelCmd>
      break;
 80049ba:	e00e      	b.n	80049da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2201      	movs	r2, #1
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fd87 	bl	80054d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2201      	movs	r2, #1
 80049d0:	2104      	movs	r1, #4
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fd80 	bl	80054d8 <TIM_CCxChannelCmd>
      break;
 80049d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d122      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d11b      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0202 	mvn.w	r2, #2
 8004a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa76 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004a3c:	e005      	b.n	8004a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa69 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa78 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d122      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0204 	mvn.w	r2, #4
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa4c 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa3f 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fa4e 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d122      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d11b      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0208 	mvn.w	r2, #8
 8004ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2204      	movs	r2, #4
 8004ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa22 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa15 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa24 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d122      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d11b      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0210 	mvn.w	r2, #16
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2208      	movs	r2, #8
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f9f8 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9eb 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9fa 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10e      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0201 	mvn.w	r2, #1
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc ff88 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	d10e      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d107      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fd84 	bl	80056ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9be 	bl	8004f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0220 	mvn.w	r2, #32
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fd4f 	bl	800569a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0ae      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b0c      	cmp	r3, #12
 8004c2e:	f200 809f 	bhi.w	8004d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c6d 	.word	0x08004c6d
 8004c3c:	08004d71 	.word	0x08004d71
 8004c40:	08004d71 	.word	0x08004d71
 8004c44:	08004d71 	.word	0x08004d71
 8004c48:	08004cad 	.word	0x08004cad
 8004c4c:	08004d71 	.word	0x08004d71
 8004c50:	08004d71 	.word	0x08004d71
 8004c54:	08004d71 	.word	0x08004d71
 8004c58:	08004cef 	.word	0x08004cef
 8004c5c:	08004d71 	.word	0x08004d71
 8004c60:	08004d71 	.word	0x08004d71
 8004c64:	08004d71 	.word	0x08004d71
 8004c68:	08004d2f 	.word	0x08004d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f9ee 	bl	8005054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0204 	bic.w	r2, r2, #4
 8004c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6999      	ldr	r1, [r3, #24]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	619a      	str	r2, [r3, #24]
      break;
 8004caa:	e064      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fa3e 	bl	8005134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	021a      	lsls	r2, r3, #8
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	619a      	str	r2, [r3, #24]
      break;
 8004cec:	e043      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fa91 	bl	800521c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0208 	orr.w	r2, r2, #8
 8004d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0204 	bic.w	r2, r2, #4
 8004d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69d9      	ldr	r1, [r3, #28]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	61da      	str	r2, [r3, #28]
      break;
 8004d2c:	e023      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fae5 	bl	8005304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69d9      	ldr	r1, [r3, #28]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	021a      	lsls	r2, r3, #8
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	61da      	str	r2, [r3, #28]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
      break;
 8004d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_ConfigClockSource+0x1c>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0b4      	b.n	8004f0e <HAL_TIM_ConfigClockSource+0x186>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	d03e      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0xd4>
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	f200 8087 	bhi.w	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	f000 8086 	beq.w	8004efa <HAL_TIM_ConfigClockSource+0x172>
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d87f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d01a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0xa6>
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d87b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d050      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d877      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b50      	cmp	r3, #80	; 0x50
 8004e06:	d03c      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xfa>
 8004e08:	2b50      	cmp	r3, #80	; 0x50
 8004e0a:	d873      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d058      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d86f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d064      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d86b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d060      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d867      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05c      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d05a      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	e062      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	f000 fb2c 	bl	800549a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	609a      	str	r2, [r3, #8]
      break;
 8004e5a:	e04f      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	f000 fb15 	bl	800549a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e03c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 fa8c 	bl	80053ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2150      	movs	r1, #80	; 0x50
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fae3 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e02c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 faaa 	bl	8005408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2160      	movs	r1, #96	; 0x60
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fad3 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e01c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 fa6c 	bl	80053ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fac3 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e00c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 faba 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004ef2:	e003      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef8:	e000      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr
	...

08004f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a33      	ldr	r2, [pc, #204]	; (8005040 <TIM_Base_SetConfig+0xe0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a32      	ldr	r2, [pc, #200]	; (8005044 <TIM_Base_SetConfig+0xe4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <TIM_Base_SetConfig+0xe8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2e      	ldr	r2, [pc, #184]	; (800504c <TIM_Base_SetConfig+0xec>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2d      	ldr	r2, [pc, #180]	; (8005050 <TIM_Base_SetConfig+0xf0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <TIM_Base_SetConfig+0xe0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <TIM_Base_SetConfig+0x82>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a21      	ldr	r2, [pc, #132]	; (8005044 <TIM_Base_SetConfig+0xe4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00f      	beq.n	8004fe2 <TIM_Base_SetConfig+0x82>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc8:	d00b      	beq.n	8004fe2 <TIM_Base_SetConfig+0x82>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <TIM_Base_SetConfig+0xe8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <TIM_Base_SetConfig+0x82>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <TIM_Base_SetConfig+0xec>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <TIM_Base_SetConfig+0x82>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <TIM_Base_SetConfig+0xf0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d108      	bne.n	8004ff4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a09      	ldr	r2, [pc, #36]	; (8005040 <TIM_Base_SetConfig+0xe0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_Base_SetConfig+0xc8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a08      	ldr	r2, [pc, #32]	; (8005044 <TIM_Base_SetConfig+0xe4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d103      	bne.n	8005030 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	615a      	str	r2, [r3, #20]
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00

08005054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f023 0201 	bic.w	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 0302 	bic.w	r3, r3, #2
 800509c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a20      	ldr	r2, [pc, #128]	; (800512c <TIM_OC1_SetConfig+0xd8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC1_SetConfig+0x64>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <TIM_OC1_SetConfig+0xdc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10c      	bne.n	80050d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0308 	bic.w	r3, r3, #8
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 0304 	bic.w	r3, r3, #4
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <TIM_OC1_SetConfig+0xd8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d003      	beq.n	80050e2 <TIM_OC1_SetConfig+0x8e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a14      	ldr	r2, [pc, #80]	; (8005130 <TIM_OC1_SetConfig+0xdc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d111      	bne.n	8005106 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	621a      	str	r2, [r3, #32]
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40013400 	.word	0x40013400

08005134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f023 0210 	bic.w	r2, r3, #16
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0320 	bic.w	r3, r3, #32
 800517e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a21      	ldr	r2, [pc, #132]	; (8005214 <TIM_OC2_SetConfig+0xe0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <TIM_OC2_SetConfig+0x68>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a20      	ldr	r2, [pc, #128]	; (8005218 <TIM_OC2_SetConfig+0xe4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d10d      	bne.n	80051b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a16      	ldr	r2, [pc, #88]	; (8005214 <TIM_OC2_SetConfig+0xe0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC2_SetConfig+0x94>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <TIM_OC2_SetConfig+0xe4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d113      	bne.n	80051f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40013400 	.word	0x40013400

0800521c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a21      	ldr	r2, [pc, #132]	; (80052fc <TIM_OC3_SetConfig+0xe0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_OC3_SetConfig+0x66>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a20      	ldr	r2, [pc, #128]	; (8005300 <TIM_OC3_SetConfig+0xe4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10d      	bne.n	800529e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800529c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a16      	ldr	r2, [pc, #88]	; (80052fc <TIM_OC3_SetConfig+0xe0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC3_SetConfig+0x92>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a15      	ldr	r2, [pc, #84]	; (8005300 <TIM_OC3_SetConfig+0xe4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d113      	bne.n	80052d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40013400 	.word	0x40013400

08005304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800534e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <TIM_OC4_SetConfig+0xa0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC4_SetConfig+0x68>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <TIM_OC4_SetConfig+0xa4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d109      	bne.n	8005380 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40013400 	.word	0x40013400

080053ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f023 0201 	bic.w	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f023 030a 	bic.w	r3, r3, #10
 80053e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0210 	bic.w	r2, r3, #16
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	031b      	lsls	r3, r3, #12
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005444:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr

08005466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	f043 0307 	orr.w	r3, r3, #7
 8005488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	609a      	str	r2, [r3, #8]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	021a      	lsls	r2, r3, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	431a      	orrs	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	609a      	str	r2, [r3, #8]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2201      	movs	r2, #1
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	401a      	ands	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e050      	b.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d018      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d00e      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a15      	ldr	r2, [pc, #84]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a14      	ldr	r2, [pc, #80]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d10c      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00

080055f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e03d      	b.n	8005690 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e042      	b.n	8005756 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fd f99b 	bl	8002a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2224      	movs	r2, #36	; 0x24
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005700:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 ff54 	bl	80065b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005716:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005726:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005736:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b08a      	sub	sp, #40	; 0x28
 8005762:	af02      	add	r7, sp, #8
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b20      	cmp	r3, #32
 800577c:	d16d      	bne.n	800585a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_UART_Transmit+0x2c>
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e066      	b.n	800585c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2221      	movs	r2, #33	; 0x21
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579c:	f7fd fae0 	bl	8002d60 <HAL_GetTick>
 80057a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b6:	d108      	bne.n	80057ca <HAL_UART_Transmit+0x6c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	e003      	b.n	80057d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d2:	e02a      	b.n	800582a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fc1c 	bl	800601c <UART_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e036      	b.n	800585c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10b      	bne.n	800580c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005802:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	3302      	adds	r3, #2
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e007      	b.n	800581c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3301      	adds	r3, #1
 800581a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1cf      	bne.n	80057d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2200      	movs	r2, #0
 800583c:	2140      	movs	r1, #64	; 0x40
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fbec 	bl	800601c <UART_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e006      	b.n	800585c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e000      	b.n	800585c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800585a:	2302      	movs	r3, #2
  }
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b20      	cmp	r3, #32
 800587c:	d112      	bne.n	80058a4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_UART_Receive_DMA+0x26>
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e00b      	b.n	80058a6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	461a      	mov	r2, r3
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fc2c 	bl	80060f8 <UART_Start_Receive_DMA>
 80058a0:	4603      	mov	r3, r0
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b0ba      	sub	sp, #232	; 0xe8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058dc:	2300      	movs	r3, #0
 80058de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10f      	bne.n	8005916 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_UART_IRQHandler+0x66>
 8005902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fd90 	bl	8006434 <UART_Receive_IT>
      return;
 8005914:	e25b      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80de 	beq.w	8005adc <HAL_UART_IRQHandler+0x22c>
 8005920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80d1 	beq.w	8005adc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_UART_IRQHandler+0xae>
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_UART_IRQHandler+0xd2>
 800596a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597a:	f043 0202 	orr.w	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_UART_IRQHandler+0xf6>
 800598e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f043 0204 	orr.w	r2, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <HAL_UART_IRQHandler+0x126>
 80059b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d105      	bne.n	80059ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 81f2 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_UART_IRQHandler+0x14e>
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fd1b 	bl	8006434 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d103      	bne.n	8005a2a <HAL_UART_IRQHandler+0x17a>
 8005a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d04f      	beq.n	8005aca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fc25 	bl	800627a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d041      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1d9      	bne.n	8005a3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d013      	beq.n	8005aba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	4a7e      	ldr	r2, [pc, #504]	; (8005c90 <HAL_UART_IRQHandler+0x3e0>)
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd fb88 	bl	80031b4 <HAL_DMA_Abort_IT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e00e      	b.n	8005ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f99c 	bl	8005df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e00a      	b.n	8005ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f998 	bl	8005df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	e006      	b.n	8005ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f994 	bl	8005df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005ad6:	e175      	b.n	8005dc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	bf00      	nop
    return;
 8005ada:	e173      	b.n	8005dc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	f040 814f 	bne.w	8005d84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 8148 	beq.w	8005d84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8141 	beq.w	8005d84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80b6 	beq.w	8005c94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8145 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b46:	429a      	cmp	r2, r3
 8005b48:	f080 813e 	bcs.w	8005dc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	f000 8088 	beq.w	8005c70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b8c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1d9      	bne.n	8005b60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3314      	adds	r3, #20
 8005bb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bd0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e1      	bne.n	8005bac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3314      	adds	r3, #20
 8005bee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3314      	adds	r3, #20
 8005c08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e3      	bne.n	8005be8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c40:	f023 0310 	bic.w	r3, r3, #16
 8005c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c52:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e3      	bne.n	8005c2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fd fa66 	bl	800313c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f8bf 	bl	8005e0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c8c:	e09c      	b.n	8005dc8 <HAL_UART_IRQHandler+0x518>
 8005c8e:	bf00      	nop
 8005c90:	0800633f 	.word	0x0800633f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 808e 	beq.w	8005dcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8089 	beq.w	8005dcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cde:	647a      	str	r2, [r7, #68]	; 0x44
 8005ce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e3      	bne.n	8005cba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	623b      	str	r3, [r7, #32]
   return(result);
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3314      	adds	r3, #20
 8005d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d16:	633a      	str	r2, [r7, #48]	; 0x30
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e3      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0310 	bic.w	r3, r3, #16
 8005d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d5c:	61fa      	str	r2, [r7, #28]
 8005d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	69b9      	ldr	r1, [r7, #24]
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e3      	bne.n	8005d38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f844 	bl	8005e0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d82:	e023      	b.n	8005dcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <HAL_UART_IRQHandler+0x4f4>
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fae2 	bl	8006366 <UART_Transmit_IT>
    return;
 8005da2:	e014      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00e      	beq.n	8005dce <HAL_UART_IRQHandler+0x51e>
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fb21 	bl	8006404 <UART_EndTransmit_IT>
    return;
 8005dc2:	e004      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
    return;
 8005dc4:	bf00      	nop
 8005dc6:	e002      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
      return;
 8005dc8:	bf00      	nop
 8005dca:	e000      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
      return;
 8005dcc:	bf00      	nop
  }
}
 8005dce:	37e8      	adds	r7, #232	; 0xe8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr

08005de6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bc80      	pop	{r7}
 8005e08:	4770      	bx	lr

08005e0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b09c      	sub	sp, #112	; 0x70
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d172      	bne.n	8005f22 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3e:	2200      	movs	r2, #0
 8005e40:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e62:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e5      	bne.n	8005e42 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3314      	adds	r3, #20
 8005e94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e96:	647a      	str	r2, [r7, #68]	; 0x44
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e5      	bne.n	8005e76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3314      	adds	r3, #20
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3314      	adds	r3, #20
 8005ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eca:	633a      	str	r2, [r7, #48]	; 0x30
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e5      	bne.n	8005eaa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d119      	bne.n	8005f22 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	330c      	adds	r3, #12
 8005ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f023 0310 	bic.w	r3, r3, #16
 8005f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f0e:	61fa      	str	r2, [r7, #28]
 8005f10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	69b9      	ldr	r1, [r7, #24]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f24:	2200      	movs	r2, #0
 8005f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d106      	bne.n	8005f3e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f34:	4619      	mov	r1, r3
 8005f36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f38:	f7ff ff67 	bl	8005e0a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f3c:	e002      	b.n	8005f44 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005f3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f40:	f7fc fe80 	bl	8002c44 <HAL_UART_RxCpltCallback>
}
 8005f44:	bf00      	nop
 8005f46:	3770      	adds	r7, #112	; 0x70
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d108      	bne.n	8005f7a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	4619      	mov	r1, r3
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff ff49 	bl	8005e0a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f78:	e002      	b.n	8005f80 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff ff33 	bl	8005de6 <HAL_UART_RxHalfCpltCallback>
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bf14      	ite	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	2300      	moveq	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b21      	cmp	r3, #33	; 0x21
 8005fba:	d108      	bne.n	8005fce <UART_DMAError+0x46>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005fc8:	68b8      	ldr	r0, [r7, #8]
 8005fca:	f000 f92f 	bl	800622c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b22      	cmp	r3, #34	; 0x22
 8005fee:	d108      	bne.n	8006002 <UART_DMAError+0x7a>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ffc:	68b8      	ldr	r0, [r7, #8]
 8005ffe:	f000 f93c 	bl	800627a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	f043 0210 	orr.w	r2, r3, #16
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800600e:	68b8      	ldr	r0, [r7, #8]
 8006010:	f7ff fef2 	bl	8005df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b090      	sub	sp, #64	; 0x40
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602c:	e050      	b.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d04c      	beq.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <UART_WaitOnFlagUntilTimeout+0x30>
 800603c:	f7fc fe90 	bl	8002d60 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006048:	429a      	cmp	r2, r3
 800604a:	d241      	bcs.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800606c:	637a      	str	r2, [r7, #52]	; 0x34
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e5      	bne.n	800604c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3314      	adds	r3, #20
 8006086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	613b      	str	r3, [r7, #16]
   return(result);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a0:	623a      	str	r2, [r7, #32]
 80060a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	69f9      	ldr	r1, [r7, #28]
 80060a6:	6a3a      	ldr	r2, [r7, #32]
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e5      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e00f      	b.n	80060f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d09f      	beq.n	800602e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3740      	adds	r7, #64	; 0x40
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b098      	sub	sp, #96	; 0x60
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2222      	movs	r2, #34	; 0x22
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	4a3e      	ldr	r2, [pc, #248]	; (8006220 <UART_Start_Receive_DMA+0x128>)
 8006126:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	4a3d      	ldr	r2, [pc, #244]	; (8006224 <UART_Start_Receive_DMA+0x12c>)
 800612e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006134:	4a3c      	ldr	r2, [pc, #240]	; (8006228 <UART_Start_Receive_DMA+0x130>)
 8006136:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613c:	2200      	movs	r2, #0
 800613e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006140:	f107 0308 	add.w	r3, r7, #8
 8006144:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3304      	adds	r3, #4
 8006150:	4619      	mov	r1, r3
 8006152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	f7fc ff90 	bl	800307c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d019      	beq.n	80061ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006190:	65bb      	str	r3, [r7, #88]	; 0x58
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800619a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800619c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80061a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e5      	bne.n	800617a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	657b      	str	r3, [r7, #84]	; 0x54
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3314      	adds	r3, #20
 80061cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3314      	adds	r3, #20
 80061e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	617b      	str	r3, [r7, #20]
   return(result);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f8:	653b      	str	r3, [r7, #80]	; 0x50
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3314      	adds	r3, #20
 8006200:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006202:	627a      	str	r2, [r7, #36]	; 0x24
 8006204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6a39      	ldr	r1, [r7, #32]
 8006208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3760      	adds	r7, #96	; 0x60
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08005e21 	.word	0x08005e21
 8006224:	08005f4d 	.word	0x08005f4d
 8006228:	08005f89 	.word	0x08005f89

0800622c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	60bb      	str	r3, [r7, #8]
   return(result);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	61ba      	str	r2, [r7, #24]
 8006256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6979      	ldr	r1, [r7, #20]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	613b      	str	r3, [r7, #16]
   return(result);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006270:	bf00      	nop
 8006272:	3724      	adds	r7, #36	; 0x24
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr

0800627a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800627a:	b480      	push	{r7}
 800627c:	b095      	sub	sp, #84	; 0x54
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062a2:	643a      	str	r2, [r7, #64]	; 0x40
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e5      	bne.n	8006282 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3314      	adds	r3, #20
 80062bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f023 0301 	bic.w	r3, r3, #1
 80062cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3314      	adds	r3, #20
 80062d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e5      	bne.n	80062b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d119      	bne.n	8006326 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	60bb      	str	r3, [r7, #8]
   return(result);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	647b      	str	r3, [r7, #68]	; 0x44
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006312:	61ba      	str	r2, [r7, #24]
 8006314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	613b      	str	r3, [r7, #16]
   return(result);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006334:	bf00      	nop
 8006336:	3754      	adds	r7, #84	; 0x54
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr

0800633e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff fd4d 	bl	8005df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b21      	cmp	r3, #33	; 0x21
 8006378:	d13e      	bne.n	80063f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006382:	d114      	bne.n	80063ae <UART_Transmit_IT+0x48>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d110      	bne.n	80063ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	621a      	str	r2, [r3, #32]
 80063ac:	e008      	b.n	80063c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	1c59      	adds	r1, r3, #1
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6211      	str	r1, [r2, #32]
 80063b8:	781a      	ldrb	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	4619      	mov	r1, r3
 80063ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10f      	bne.n	80063f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr

08006404 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800641a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fcd5 	bl	8005dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	; 0x30
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b22      	cmp	r3, #34	; 0x22
 8006446:	f040 80ae 	bne.w	80065a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006452:	d117      	bne.n	8006484 <UART_Receive_IT+0x50>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d113      	bne.n	8006484 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	b29a      	uxth	r2, r3
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	1c9a      	adds	r2, r3, #2
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	629a      	str	r2, [r3, #40]	; 0x28
 8006482:	e026      	b.n	80064d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006496:	d007      	beq.n	80064a8 <UART_Receive_IT+0x74>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <UART_Receive_IT+0x82>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	e008      	b.n	80064c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29b      	uxth	r3, r3
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4619      	mov	r1, r3
 80064e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d15d      	bne.n	80065a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0220 	bic.w	r2, r2, #32
 80064f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	2b01      	cmp	r3, #1
 800652a:	d135      	bne.n	8006598 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	330c      	adds	r3, #12
 8006538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	613b      	str	r3, [r7, #16]
   return(result);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f023 0310 	bic.w	r3, r3, #16
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	330c      	adds	r3, #12
 8006550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006552:	623a      	str	r2, [r7, #32]
 8006554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	69f9      	ldr	r1, [r7, #28]
 8006558:	6a3a      	ldr	r2, [r7, #32]
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e5      	bne.n	8006532 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b10      	cmp	r3, #16
 8006572:	d10a      	bne.n	800658a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fc3a 	bl	8005e0a <HAL_UARTEx_RxEventCallback>
 8006596:	e002      	b.n	800659e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fc fb53 	bl	8002c44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e002      	b.n	80065a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e000      	b.n	80065a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3730      	adds	r7, #48	; 0x30
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80065ea:	f023 030c 	bic.w	r3, r3, #12
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	430b      	orrs	r3, r1
 80065f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2c      	ldr	r2, [pc, #176]	; (80066c4 <UART_SetConfig+0x114>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d103      	bne.n	8006620 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7fd fec8 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	e002      	b.n	8006626 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fd feb0 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 8006624:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009a      	lsls	r2, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	4a22      	ldr	r2, [pc, #136]	; (80066c8 <UART_SetConfig+0x118>)
 800663e:	fba2 2303 	umull	r2, r3, r2, r3
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	0119      	lsls	r1, r3, #4
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009a      	lsls	r2, r3, #2
 8006650:	441a      	add	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	fbb2 f2f3 	udiv	r2, r2, r3
 800665c:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <UART_SetConfig+0x118>)
 800665e:	fba3 0302 	umull	r0, r3, r3, r2
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	2064      	movs	r0, #100	; 0x64
 8006666:	fb00 f303 	mul.w	r3, r0, r3
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	3332      	adds	r3, #50	; 0x32
 8006670:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <UART_SetConfig+0x118>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	095b      	lsrs	r3, r3, #5
 8006678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800667c:	4419      	add	r1, r3
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009a      	lsls	r2, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	fbb2 f2f3 	udiv	r2, r2, r3
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <UART_SetConfig+0x118>)
 8006696:	fba3 0302 	umull	r0, r3, r3, r2
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	2064      	movs	r0, #100	; 0x64
 800669e:	fb00 f303 	mul.w	r3, r0, r3
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	3332      	adds	r3, #50	; 0x32
 80066a8:	4a07      	ldr	r2, [pc, #28]	; (80066c8 <UART_SetConfig+0x118>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	f003 020f 	and.w	r2, r3, #15
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	440a      	add	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40013800 	.word	0x40013800
 80066c8:	51eb851f 	.word	0x51eb851f

080066cc <__cvt>:
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d2:	461f      	mov	r7, r3
 80066d4:	bfbb      	ittet	lt
 80066d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80066da:	461f      	movlt	r7, r3
 80066dc:	2300      	movge	r3, #0
 80066de:	232d      	movlt	r3, #45	; 0x2d
 80066e0:	b088      	sub	sp, #32
 80066e2:	4614      	mov	r4, r2
 80066e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80066e8:	7013      	strb	r3, [r2, #0]
 80066ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80066f0:	f023 0820 	bic.w	r8, r3, #32
 80066f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066f8:	d005      	beq.n	8006706 <__cvt+0x3a>
 80066fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80066fe:	d100      	bne.n	8006702 <__cvt+0x36>
 8006700:	3501      	adds	r5, #1
 8006702:	2302      	movs	r3, #2
 8006704:	e000      	b.n	8006708 <__cvt+0x3c>
 8006706:	2303      	movs	r3, #3
 8006708:	aa07      	add	r2, sp, #28
 800670a:	9204      	str	r2, [sp, #16]
 800670c:	aa06      	add	r2, sp, #24
 800670e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006712:	e9cd 3500 	strd	r3, r5, [sp]
 8006716:	4622      	mov	r2, r4
 8006718:	463b      	mov	r3, r7
 800671a:	f001 f8a5 	bl	8007868 <_dtoa_r>
 800671e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006722:	4606      	mov	r6, r0
 8006724:	d102      	bne.n	800672c <__cvt+0x60>
 8006726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006728:	07db      	lsls	r3, r3, #31
 800672a:	d522      	bpl.n	8006772 <__cvt+0xa6>
 800672c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006730:	eb06 0905 	add.w	r9, r6, r5
 8006734:	d110      	bne.n	8006758 <__cvt+0x8c>
 8006736:	7833      	ldrb	r3, [r6, #0]
 8006738:	2b30      	cmp	r3, #48	; 0x30
 800673a:	d10a      	bne.n	8006752 <__cvt+0x86>
 800673c:	2200      	movs	r2, #0
 800673e:	2300      	movs	r3, #0
 8006740:	4620      	mov	r0, r4
 8006742:	4639      	mov	r1, r7
 8006744:	f7fa f99c 	bl	8000a80 <__aeabi_dcmpeq>
 8006748:	b918      	cbnz	r0, 8006752 <__cvt+0x86>
 800674a:	f1c5 0501 	rsb	r5, r5, #1
 800674e:	f8ca 5000 	str.w	r5, [sl]
 8006752:	f8da 3000 	ldr.w	r3, [sl]
 8006756:	4499      	add	r9, r3
 8006758:	2200      	movs	r2, #0
 800675a:	2300      	movs	r3, #0
 800675c:	4620      	mov	r0, r4
 800675e:	4639      	mov	r1, r7
 8006760:	f7fa f98e 	bl	8000a80 <__aeabi_dcmpeq>
 8006764:	b108      	cbz	r0, 800676a <__cvt+0x9e>
 8006766:	f8cd 901c 	str.w	r9, [sp, #28]
 800676a:	2230      	movs	r2, #48	; 0x30
 800676c:	9b07      	ldr	r3, [sp, #28]
 800676e:	454b      	cmp	r3, r9
 8006770:	d307      	bcc.n	8006782 <__cvt+0xb6>
 8006772:	4630      	mov	r0, r6
 8006774:	9b07      	ldr	r3, [sp, #28]
 8006776:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006778:	1b9b      	subs	r3, r3, r6
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	b008      	add	sp, #32
 800677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006782:	1c59      	adds	r1, r3, #1
 8006784:	9107      	str	r1, [sp, #28]
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	e7f0      	b.n	800676c <__cvt+0xa0>

0800678a <__exponent>:
 800678a:	4603      	mov	r3, r0
 800678c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800678e:	2900      	cmp	r1, #0
 8006790:	f803 2b02 	strb.w	r2, [r3], #2
 8006794:	bfb6      	itet	lt
 8006796:	222d      	movlt	r2, #45	; 0x2d
 8006798:	222b      	movge	r2, #43	; 0x2b
 800679a:	4249      	neglt	r1, r1
 800679c:	2909      	cmp	r1, #9
 800679e:	7042      	strb	r2, [r0, #1]
 80067a0:	dd2a      	ble.n	80067f8 <__exponent+0x6e>
 80067a2:	f10d 0207 	add.w	r2, sp, #7
 80067a6:	4617      	mov	r7, r2
 80067a8:	260a      	movs	r6, #10
 80067aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80067ae:	4694      	mov	ip, r2
 80067b0:	fb06 1415 	mls	r4, r6, r5, r1
 80067b4:	3430      	adds	r4, #48	; 0x30
 80067b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80067ba:	460c      	mov	r4, r1
 80067bc:	2c63      	cmp	r4, #99	; 0x63
 80067be:	4629      	mov	r1, r5
 80067c0:	f102 32ff 	add.w	r2, r2, #4294967295
 80067c4:	dcf1      	bgt.n	80067aa <__exponent+0x20>
 80067c6:	3130      	adds	r1, #48	; 0x30
 80067c8:	f1ac 0402 	sub.w	r4, ip, #2
 80067cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80067d0:	4622      	mov	r2, r4
 80067d2:	1c41      	adds	r1, r0, #1
 80067d4:	42ba      	cmp	r2, r7
 80067d6:	d30a      	bcc.n	80067ee <__exponent+0x64>
 80067d8:	f10d 0209 	add.w	r2, sp, #9
 80067dc:	eba2 020c 	sub.w	r2, r2, ip
 80067e0:	42bc      	cmp	r4, r7
 80067e2:	bf88      	it	hi
 80067e4:	2200      	movhi	r2, #0
 80067e6:	4413      	add	r3, r2
 80067e8:	1a18      	subs	r0, r3, r0
 80067ea:	b003      	add	sp, #12
 80067ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80067f2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80067f6:	e7ed      	b.n	80067d4 <__exponent+0x4a>
 80067f8:	2330      	movs	r3, #48	; 0x30
 80067fa:	3130      	adds	r1, #48	; 0x30
 80067fc:	7083      	strb	r3, [r0, #2]
 80067fe:	70c1      	strb	r1, [r0, #3]
 8006800:	1d03      	adds	r3, r0, #4
 8006802:	e7f1      	b.n	80067e8 <__exponent+0x5e>

08006804 <_printf_float>:
 8006804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006808:	b091      	sub	sp, #68	; 0x44
 800680a:	460c      	mov	r4, r1
 800680c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006810:	4616      	mov	r6, r2
 8006812:	461f      	mov	r7, r3
 8006814:	4605      	mov	r5, r0
 8006816:	f000 ff13 	bl	8007640 <_localeconv_r>
 800681a:	6803      	ldr	r3, [r0, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	9309      	str	r3, [sp, #36]	; 0x24
 8006820:	f7f9 fd02 	bl	8000228 <strlen>
 8006824:	2300      	movs	r3, #0
 8006826:	930e      	str	r3, [sp, #56]	; 0x38
 8006828:	f8d8 3000 	ldr.w	r3, [r8]
 800682c:	900a      	str	r0, [sp, #40]	; 0x28
 800682e:	3307      	adds	r3, #7
 8006830:	f023 0307 	bic.w	r3, r3, #7
 8006834:	f103 0208 	add.w	r2, r3, #8
 8006838:	f894 9018 	ldrb.w	r9, [r4, #24]
 800683c:	f8d4 b000 	ldr.w	fp, [r4]
 8006840:	f8c8 2000 	str.w	r2, [r8]
 8006844:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006848:	4652      	mov	r2, sl
 800684a:	4643      	mov	r3, r8
 800684c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006850:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006854:	930b      	str	r3, [sp, #44]	; 0x2c
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	4650      	mov	r0, sl
 800685c:	4b9c      	ldr	r3, [pc, #624]	; (8006ad0 <_printf_float+0x2cc>)
 800685e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006860:	f7fa f940 	bl	8000ae4 <__aeabi_dcmpun>
 8006864:	bb70      	cbnz	r0, 80068c4 <_printf_float+0xc0>
 8006866:	f04f 32ff 	mov.w	r2, #4294967295
 800686a:	4650      	mov	r0, sl
 800686c:	4b98      	ldr	r3, [pc, #608]	; (8006ad0 <_printf_float+0x2cc>)
 800686e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006870:	f7fa f91a 	bl	8000aa8 <__aeabi_dcmple>
 8006874:	bb30      	cbnz	r0, 80068c4 <_printf_float+0xc0>
 8006876:	2200      	movs	r2, #0
 8006878:	2300      	movs	r3, #0
 800687a:	4650      	mov	r0, sl
 800687c:	4641      	mov	r1, r8
 800687e:	f7fa f909 	bl	8000a94 <__aeabi_dcmplt>
 8006882:	b110      	cbz	r0, 800688a <_printf_float+0x86>
 8006884:	232d      	movs	r3, #45	; 0x2d
 8006886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800688a:	4a92      	ldr	r2, [pc, #584]	; (8006ad4 <_printf_float+0x2d0>)
 800688c:	4b92      	ldr	r3, [pc, #584]	; (8006ad8 <_printf_float+0x2d4>)
 800688e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006892:	bf94      	ite	ls
 8006894:	4690      	movls	r8, r2
 8006896:	4698      	movhi	r8, r3
 8006898:	2303      	movs	r3, #3
 800689a:	f04f 0a00 	mov.w	sl, #0
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	f02b 0304 	bic.w	r3, fp, #4
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	4633      	mov	r3, r6
 80068a8:	4621      	mov	r1, r4
 80068aa:	4628      	mov	r0, r5
 80068ac:	9700      	str	r7, [sp, #0]
 80068ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80068b0:	f000 f9d6 	bl	8006c60 <_printf_common>
 80068b4:	3001      	adds	r0, #1
 80068b6:	f040 8090 	bne.w	80069da <_printf_float+0x1d6>
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	b011      	add	sp, #68	; 0x44
 80068c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c4:	4652      	mov	r2, sl
 80068c6:	4643      	mov	r3, r8
 80068c8:	4650      	mov	r0, sl
 80068ca:	4641      	mov	r1, r8
 80068cc:	f7fa f90a 	bl	8000ae4 <__aeabi_dcmpun>
 80068d0:	b148      	cbz	r0, 80068e6 <_printf_float+0xe2>
 80068d2:	f1b8 0f00 	cmp.w	r8, #0
 80068d6:	bfb8      	it	lt
 80068d8:	232d      	movlt	r3, #45	; 0x2d
 80068da:	4a80      	ldr	r2, [pc, #512]	; (8006adc <_printf_float+0x2d8>)
 80068dc:	bfb8      	it	lt
 80068de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068e2:	4b7f      	ldr	r3, [pc, #508]	; (8006ae0 <_printf_float+0x2dc>)
 80068e4:	e7d3      	b.n	800688e <_printf_float+0x8a>
 80068e6:	6863      	ldr	r3, [r4, #4]
 80068e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	d142      	bne.n	8006976 <_printf_float+0x172>
 80068f0:	2306      	movs	r3, #6
 80068f2:	6063      	str	r3, [r4, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	9206      	str	r2, [sp, #24]
 80068f8:	aa0e      	add	r2, sp, #56	; 0x38
 80068fa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80068fe:	aa0d      	add	r2, sp, #52	; 0x34
 8006900:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006904:	9203      	str	r2, [sp, #12]
 8006906:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800690a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	6863      	ldr	r3, [r4, #4]
 8006912:	4652      	mov	r2, sl
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	4628      	mov	r0, r5
 8006918:	4643      	mov	r3, r8
 800691a:	910b      	str	r1, [sp, #44]	; 0x2c
 800691c:	f7ff fed6 	bl	80066cc <__cvt>
 8006920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006922:	4680      	mov	r8, r0
 8006924:	2947      	cmp	r1, #71	; 0x47
 8006926:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006928:	d108      	bne.n	800693c <_printf_float+0x138>
 800692a:	1cc8      	adds	r0, r1, #3
 800692c:	db02      	blt.n	8006934 <_printf_float+0x130>
 800692e:	6863      	ldr	r3, [r4, #4]
 8006930:	4299      	cmp	r1, r3
 8006932:	dd40      	ble.n	80069b6 <_printf_float+0x1b2>
 8006934:	f1a9 0902 	sub.w	r9, r9, #2
 8006938:	fa5f f989 	uxtb.w	r9, r9
 800693c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006940:	d81f      	bhi.n	8006982 <_printf_float+0x17e>
 8006942:	464a      	mov	r2, r9
 8006944:	3901      	subs	r1, #1
 8006946:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800694a:	910d      	str	r1, [sp, #52]	; 0x34
 800694c:	f7ff ff1d 	bl	800678a <__exponent>
 8006950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006952:	4682      	mov	sl, r0
 8006954:	1813      	adds	r3, r2, r0
 8006956:	2a01      	cmp	r2, #1
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	dc02      	bgt.n	8006962 <_printf_float+0x15e>
 800695c:	6822      	ldr	r2, [r4, #0]
 800695e:	07d2      	lsls	r2, r2, #31
 8006960:	d501      	bpl.n	8006966 <_printf_float+0x162>
 8006962:	3301      	adds	r3, #1
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800696a:	2b00      	cmp	r3, #0
 800696c:	d09b      	beq.n	80068a6 <_printf_float+0xa2>
 800696e:	232d      	movs	r3, #45	; 0x2d
 8006970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006974:	e797      	b.n	80068a6 <_printf_float+0xa2>
 8006976:	2947      	cmp	r1, #71	; 0x47
 8006978:	d1bc      	bne.n	80068f4 <_printf_float+0xf0>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1ba      	bne.n	80068f4 <_printf_float+0xf0>
 800697e:	2301      	movs	r3, #1
 8006980:	e7b7      	b.n	80068f2 <_printf_float+0xee>
 8006982:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006986:	d118      	bne.n	80069ba <_printf_float+0x1b6>
 8006988:	2900      	cmp	r1, #0
 800698a:	6863      	ldr	r3, [r4, #4]
 800698c:	dd0b      	ble.n	80069a6 <_printf_float+0x1a2>
 800698e:	6121      	str	r1, [r4, #16]
 8006990:	b913      	cbnz	r3, 8006998 <_printf_float+0x194>
 8006992:	6822      	ldr	r2, [r4, #0]
 8006994:	07d0      	lsls	r0, r2, #31
 8006996:	d502      	bpl.n	800699e <_printf_float+0x19a>
 8006998:	3301      	adds	r3, #1
 800699a:	440b      	add	r3, r1
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	f04f 0a00 	mov.w	sl, #0
 80069a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80069a4:	e7df      	b.n	8006966 <_printf_float+0x162>
 80069a6:	b913      	cbnz	r3, 80069ae <_printf_float+0x1aa>
 80069a8:	6822      	ldr	r2, [r4, #0]
 80069aa:	07d2      	lsls	r2, r2, #31
 80069ac:	d501      	bpl.n	80069b2 <_printf_float+0x1ae>
 80069ae:	3302      	adds	r3, #2
 80069b0:	e7f4      	b.n	800699c <_printf_float+0x198>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e7f2      	b.n	800699c <_printf_float+0x198>
 80069b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80069ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069bc:	4299      	cmp	r1, r3
 80069be:	db05      	blt.n	80069cc <_printf_float+0x1c8>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	6121      	str	r1, [r4, #16]
 80069c4:	07d8      	lsls	r0, r3, #31
 80069c6:	d5ea      	bpl.n	800699e <_printf_float+0x19a>
 80069c8:	1c4b      	adds	r3, r1, #1
 80069ca:	e7e7      	b.n	800699c <_printf_float+0x198>
 80069cc:	2900      	cmp	r1, #0
 80069ce:	bfcc      	ite	gt
 80069d0:	2201      	movgt	r2, #1
 80069d2:	f1c1 0202 	rsble	r2, r1, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	e7e0      	b.n	800699c <_printf_float+0x198>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	055a      	lsls	r2, r3, #21
 80069de:	d407      	bmi.n	80069f0 <_printf_float+0x1ec>
 80069e0:	6923      	ldr	r3, [r4, #16]
 80069e2:	4642      	mov	r2, r8
 80069e4:	4631      	mov	r1, r6
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	d12b      	bne.n	8006a46 <_printf_float+0x242>
 80069ee:	e764      	b.n	80068ba <_printf_float+0xb6>
 80069f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80069f4:	f240 80dd 	bls.w	8006bb2 <_printf_float+0x3ae>
 80069f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069fc:	2200      	movs	r2, #0
 80069fe:	2300      	movs	r3, #0
 8006a00:	f7fa f83e 	bl	8000a80 <__aeabi_dcmpeq>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d033      	beq.n	8006a70 <_printf_float+0x26c>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	4a35      	ldr	r2, [pc, #212]	; (8006ae4 <_printf_float+0x2e0>)
 8006a10:	47b8      	blx	r7
 8006a12:	3001      	adds	r0, #1
 8006a14:	f43f af51 	beq.w	80068ba <_printf_float+0xb6>
 8006a18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	db02      	blt.n	8006a26 <_printf_float+0x222>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	07d8      	lsls	r0, r3, #31
 8006a24:	d50f      	bpl.n	8006a46 <_printf_float+0x242>
 8006a26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	f43f af42 	beq.w	80068ba <_printf_float+0xb6>
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	f104 091a 	add.w	r9, r4, #26
 8006a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a40:	3b01      	subs	r3, #1
 8006a42:	4543      	cmp	r3, r8
 8006a44:	dc09      	bgt.n	8006a5a <_printf_float+0x256>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	079b      	lsls	r3, r3, #30
 8006a4a:	f100 8104 	bmi.w	8006c56 <_printf_float+0x452>
 8006a4e:	68e0      	ldr	r0, [r4, #12]
 8006a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a52:	4298      	cmp	r0, r3
 8006a54:	bfb8      	it	lt
 8006a56:	4618      	movlt	r0, r3
 8006a58:	e731      	b.n	80068be <_printf_float+0xba>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	464a      	mov	r2, r9
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f af28 	beq.w	80068ba <_printf_float+0xb6>
 8006a6a:	f108 0801 	add.w	r8, r8, #1
 8006a6e:	e7e6      	b.n	8006a3e <_printf_float+0x23a>
 8006a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dc38      	bgt.n	8006ae8 <_printf_float+0x2e4>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <_printf_float+0x2e0>)
 8006a7e:	47b8      	blx	r7
 8006a80:	3001      	adds	r0, #1
 8006a82:	f43f af1a 	beq.w	80068ba <_printf_float+0xb6>
 8006a86:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d102      	bne.n	8006a94 <_printf_float+0x290>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	07d9      	lsls	r1, r3, #31
 8006a92:	d5d8      	bpl.n	8006a46 <_printf_float+0x242>
 8006a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f43f af0b 	beq.w	80068ba <_printf_float+0xb6>
 8006aa4:	f04f 0900 	mov.w	r9, #0
 8006aa8:	f104 0a1a 	add.w	sl, r4, #26
 8006aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aae:	425b      	negs	r3, r3
 8006ab0:	454b      	cmp	r3, r9
 8006ab2:	dc01      	bgt.n	8006ab8 <_printf_float+0x2b4>
 8006ab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab6:	e794      	b.n	80069e2 <_printf_float+0x1de>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	4652      	mov	r2, sl
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f43f aef9 	beq.w	80068ba <_printf_float+0xb6>
 8006ac8:	f109 0901 	add.w	r9, r9, #1
 8006acc:	e7ee      	b.n	8006aac <_printf_float+0x2a8>
 8006ace:	bf00      	nop
 8006ad0:	7fefffff 	.word	0x7fefffff
 8006ad4:	0800aeca 	.word	0x0800aeca
 8006ad8:	0800aece 	.word	0x0800aece
 8006adc:	0800aed2 	.word	0x0800aed2
 8006ae0:	0800aed6 	.word	0x0800aed6
 8006ae4:	0800aeda 	.word	0x0800aeda
 8006ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006aea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aec:	429a      	cmp	r2, r3
 8006aee:	bfa8      	it	ge
 8006af0:	461a      	movge	r2, r3
 8006af2:	2a00      	cmp	r2, #0
 8006af4:	4691      	mov	r9, r2
 8006af6:	dc37      	bgt.n	8006b68 <_printf_float+0x364>
 8006af8:	f04f 0b00 	mov.w	fp, #0
 8006afc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b00:	f104 021a 	add.w	r2, r4, #26
 8006b04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006b08:	ebaa 0309 	sub.w	r3, sl, r9
 8006b0c:	455b      	cmp	r3, fp
 8006b0e:	dc33      	bgt.n	8006b78 <_printf_float+0x374>
 8006b10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b14:	429a      	cmp	r2, r3
 8006b16:	db3b      	blt.n	8006b90 <_printf_float+0x38c>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	07da      	lsls	r2, r3, #31
 8006b1c:	d438      	bmi.n	8006b90 <_printf_float+0x38c>
 8006b1e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006b22:	eba2 0903 	sub.w	r9, r2, r3
 8006b26:	eba2 020a 	sub.w	r2, r2, sl
 8006b2a:	4591      	cmp	r9, r2
 8006b2c:	bfa8      	it	ge
 8006b2e:	4691      	movge	r9, r2
 8006b30:	f1b9 0f00 	cmp.w	r9, #0
 8006b34:	dc34      	bgt.n	8006ba0 <_printf_float+0x39c>
 8006b36:	f04f 0800 	mov.w	r8, #0
 8006b3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b3e:	f104 0a1a 	add.w	sl, r4, #26
 8006b42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	eba3 0309 	sub.w	r3, r3, r9
 8006b4c:	4543      	cmp	r3, r8
 8006b4e:	f77f af7a 	ble.w	8006a46 <_printf_float+0x242>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4652      	mov	r2, sl
 8006b56:	4631      	mov	r1, r6
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	f43f aeac 	beq.w	80068ba <_printf_float+0xb6>
 8006b62:	f108 0801 	add.w	r8, r8, #1
 8006b66:	e7ec      	b.n	8006b42 <_printf_float+0x33e>
 8006b68:	4613      	mov	r3, r2
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b8      	blx	r7
 8006b72:	3001      	adds	r0, #1
 8006b74:	d1c0      	bne.n	8006af8 <_printf_float+0x2f4>
 8006b76:	e6a0      	b.n	80068ba <_printf_float+0xb6>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	f43f ae99 	beq.w	80068ba <_printf_float+0xb6>
 8006b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b8a:	f10b 0b01 	add.w	fp, fp, #1
 8006b8e:	e7b9      	b.n	8006b04 <_printf_float+0x300>
 8006b90:	4631      	mov	r1, r6
 8006b92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d1bf      	bne.n	8006b1e <_printf_float+0x31a>
 8006b9e:	e68c      	b.n	80068ba <_printf_float+0xb6>
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	eb08 020a 	add.w	r2, r8, sl
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	d1c2      	bne.n	8006b36 <_printf_float+0x332>
 8006bb0:	e683      	b.n	80068ba <_printf_float+0xb6>
 8006bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bb4:	2a01      	cmp	r2, #1
 8006bb6:	dc01      	bgt.n	8006bbc <_printf_float+0x3b8>
 8006bb8:	07db      	lsls	r3, r3, #31
 8006bba:	d539      	bpl.n	8006c30 <_printf_float+0x42c>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4642      	mov	r2, r8
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f43f ae77 	beq.w	80068ba <_printf_float+0xb6>
 8006bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f ae6f 	beq.w	80068ba <_printf_float+0xb6>
 8006bdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006be0:	2200      	movs	r2, #0
 8006be2:	2300      	movs	r3, #0
 8006be4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006be8:	f7f9 ff4a 	bl	8000a80 <__aeabi_dcmpeq>
 8006bec:	b9d8      	cbnz	r0, 8006c26 <_printf_float+0x422>
 8006bee:	f109 33ff 	add.w	r3, r9, #4294967295
 8006bf2:	f108 0201 	add.w	r2, r8, #1
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d10e      	bne.n	8006c1e <_printf_float+0x41a>
 8006c00:	e65b      	b.n	80068ba <_printf_float+0xb6>
 8006c02:	2301      	movs	r3, #1
 8006c04:	464a      	mov	r2, r9
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f43f ae54 	beq.w	80068ba <_printf_float+0xb6>
 8006c12:	f108 0801 	add.w	r8, r8, #1
 8006c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	4543      	cmp	r3, r8
 8006c1c:	dcf1      	bgt.n	8006c02 <_printf_float+0x3fe>
 8006c1e:	4653      	mov	r3, sl
 8006c20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c24:	e6de      	b.n	80069e4 <_printf_float+0x1e0>
 8006c26:	f04f 0800 	mov.w	r8, #0
 8006c2a:	f104 091a 	add.w	r9, r4, #26
 8006c2e:	e7f2      	b.n	8006c16 <_printf_float+0x412>
 8006c30:	2301      	movs	r3, #1
 8006c32:	4642      	mov	r2, r8
 8006c34:	e7df      	b.n	8006bf6 <_printf_float+0x3f2>
 8006c36:	2301      	movs	r3, #1
 8006c38:	464a      	mov	r2, r9
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	f43f ae3a 	beq.w	80068ba <_printf_float+0xb6>
 8006c46:	f108 0801 	add.w	r8, r8, #1
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c4e:	1a5b      	subs	r3, r3, r1
 8006c50:	4543      	cmp	r3, r8
 8006c52:	dcf0      	bgt.n	8006c36 <_printf_float+0x432>
 8006c54:	e6fb      	b.n	8006a4e <_printf_float+0x24a>
 8006c56:	f04f 0800 	mov.w	r8, #0
 8006c5a:	f104 0919 	add.w	r9, r4, #25
 8006c5e:	e7f4      	b.n	8006c4a <_printf_float+0x446>

08006c60 <_printf_common>:
 8006c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c64:	4616      	mov	r6, r2
 8006c66:	4699      	mov	r9, r3
 8006c68:	688a      	ldr	r2, [r1, #8]
 8006c6a:	690b      	ldr	r3, [r1, #16]
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	bfb8      	it	lt
 8006c72:	4613      	movlt	r3, r2
 8006c74:	6033      	str	r3, [r6, #0]
 8006c76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c80:	b10a      	cbz	r2, 8006c86 <_printf_common+0x26>
 8006c82:	3301      	adds	r3, #1
 8006c84:	6033      	str	r3, [r6, #0]
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	0699      	lsls	r1, r3, #26
 8006c8a:	bf42      	ittt	mi
 8006c8c:	6833      	ldrmi	r3, [r6, #0]
 8006c8e:	3302      	addmi	r3, #2
 8006c90:	6033      	strmi	r3, [r6, #0]
 8006c92:	6825      	ldr	r5, [r4, #0]
 8006c94:	f015 0506 	ands.w	r5, r5, #6
 8006c98:	d106      	bne.n	8006ca8 <_printf_common+0x48>
 8006c9a:	f104 0a19 	add.w	sl, r4, #25
 8006c9e:	68e3      	ldr	r3, [r4, #12]
 8006ca0:	6832      	ldr	r2, [r6, #0]
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	42ab      	cmp	r3, r5
 8006ca6:	dc2b      	bgt.n	8006d00 <_printf_common+0xa0>
 8006ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cac:	1e13      	subs	r3, r2, #0
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	bf18      	it	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	0692      	lsls	r2, r2, #26
 8006cb6:	d430      	bmi.n	8006d1a <_printf_common+0xba>
 8006cb8:	4649      	mov	r1, r9
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cc0:	47c0      	blx	r8
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d023      	beq.n	8006d0e <_printf_common+0xae>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	6922      	ldr	r2, [r4, #16]
 8006cca:	f003 0306 	and.w	r3, r3, #6
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	bf14      	ite	ne
 8006cd2:	2500      	movne	r5, #0
 8006cd4:	6833      	ldreq	r3, [r6, #0]
 8006cd6:	f04f 0600 	mov.w	r6, #0
 8006cda:	bf08      	it	eq
 8006cdc:	68e5      	ldreq	r5, [r4, #12]
 8006cde:	f104 041a 	add.w	r4, r4, #26
 8006ce2:	bf08      	it	eq
 8006ce4:	1aed      	subeq	r5, r5, r3
 8006ce6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006cea:	bf08      	it	eq
 8006cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	bfc4      	itt	gt
 8006cf4:	1a9b      	subgt	r3, r3, r2
 8006cf6:	18ed      	addgt	r5, r5, r3
 8006cf8:	42b5      	cmp	r5, r6
 8006cfa:	d11a      	bne.n	8006d32 <_printf_common+0xd2>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e008      	b.n	8006d12 <_printf_common+0xb2>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4652      	mov	r2, sl
 8006d04:	4649      	mov	r1, r9
 8006d06:	4638      	mov	r0, r7
 8006d08:	47c0      	blx	r8
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d103      	bne.n	8006d16 <_printf_common+0xb6>
 8006d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	3501      	adds	r5, #1
 8006d18:	e7c1      	b.n	8006c9e <_printf_common+0x3e>
 8006d1a:	2030      	movs	r0, #48	; 0x30
 8006d1c:	18e1      	adds	r1, r4, r3
 8006d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d28:	4422      	add	r2, r4
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d30:	e7c2      	b.n	8006cb8 <_printf_common+0x58>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4622      	mov	r2, r4
 8006d36:	4649      	mov	r1, r9
 8006d38:	4638      	mov	r0, r7
 8006d3a:	47c0      	blx	r8
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d0e6      	beq.n	8006d0e <_printf_common+0xae>
 8006d40:	3601      	adds	r6, #1
 8006d42:	e7d9      	b.n	8006cf8 <_printf_common+0x98>

08006d44 <_printf_i>:
 8006d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	7e0f      	ldrb	r7, [r1, #24]
 8006d4a:	4691      	mov	r9, r2
 8006d4c:	2f78      	cmp	r7, #120	; 0x78
 8006d4e:	4680      	mov	r8, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	469a      	mov	sl, r3
 8006d54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d5a:	d807      	bhi.n	8006d6c <_printf_i+0x28>
 8006d5c:	2f62      	cmp	r7, #98	; 0x62
 8006d5e:	d80a      	bhi.n	8006d76 <_printf_i+0x32>
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	f000 80d5 	beq.w	8006f10 <_printf_i+0x1cc>
 8006d66:	2f58      	cmp	r7, #88	; 0x58
 8006d68:	f000 80c1 	beq.w	8006eee <_printf_i+0x1aa>
 8006d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d74:	e03a      	b.n	8006dec <_printf_i+0xa8>
 8006d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d7a:	2b15      	cmp	r3, #21
 8006d7c:	d8f6      	bhi.n	8006d6c <_printf_i+0x28>
 8006d7e:	a101      	add	r1, pc, #4	; (adr r1, 8006d84 <_printf_i+0x40>)
 8006d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d84:	08006ddd 	.word	0x08006ddd
 8006d88:	08006df1 	.word	0x08006df1
 8006d8c:	08006d6d 	.word	0x08006d6d
 8006d90:	08006d6d 	.word	0x08006d6d
 8006d94:	08006d6d 	.word	0x08006d6d
 8006d98:	08006d6d 	.word	0x08006d6d
 8006d9c:	08006df1 	.word	0x08006df1
 8006da0:	08006d6d 	.word	0x08006d6d
 8006da4:	08006d6d 	.word	0x08006d6d
 8006da8:	08006d6d 	.word	0x08006d6d
 8006dac:	08006d6d 	.word	0x08006d6d
 8006db0:	08006ef7 	.word	0x08006ef7
 8006db4:	08006e1d 	.word	0x08006e1d
 8006db8:	08006eb1 	.word	0x08006eb1
 8006dbc:	08006d6d 	.word	0x08006d6d
 8006dc0:	08006d6d 	.word	0x08006d6d
 8006dc4:	08006f19 	.word	0x08006f19
 8006dc8:	08006d6d 	.word	0x08006d6d
 8006dcc:	08006e1d 	.word	0x08006e1d
 8006dd0:	08006d6d 	.word	0x08006d6d
 8006dd4:	08006d6d 	.word	0x08006d6d
 8006dd8:	08006eb9 	.word	0x08006eb9
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	1d1a      	adds	r2, r3, #4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	602a      	str	r2, [r5, #0]
 8006de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0a0      	b.n	8006f32 <_printf_i+0x1ee>
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	682b      	ldr	r3, [r5, #0]
 8006df4:	0607      	lsls	r7, r0, #24
 8006df6:	f103 0104 	add.w	r1, r3, #4
 8006dfa:	6029      	str	r1, [r5, #0]
 8006dfc:	d501      	bpl.n	8006e02 <_printf_i+0xbe>
 8006dfe:	681e      	ldr	r6, [r3, #0]
 8006e00:	e003      	b.n	8006e0a <_printf_i+0xc6>
 8006e02:	0646      	lsls	r6, r0, #25
 8006e04:	d5fb      	bpl.n	8006dfe <_printf_i+0xba>
 8006e06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	da03      	bge.n	8006e16 <_printf_i+0xd2>
 8006e0e:	232d      	movs	r3, #45	; 0x2d
 8006e10:	4276      	negs	r6, r6
 8006e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e16:	230a      	movs	r3, #10
 8006e18:	4859      	ldr	r0, [pc, #356]	; (8006f80 <_printf_i+0x23c>)
 8006e1a:	e012      	b.n	8006e42 <_printf_i+0xfe>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	6820      	ldr	r0, [r4, #0]
 8006e20:	1d19      	adds	r1, r3, #4
 8006e22:	6029      	str	r1, [r5, #0]
 8006e24:	0605      	lsls	r5, r0, #24
 8006e26:	d501      	bpl.n	8006e2c <_printf_i+0xe8>
 8006e28:	681e      	ldr	r6, [r3, #0]
 8006e2a:	e002      	b.n	8006e32 <_printf_i+0xee>
 8006e2c:	0641      	lsls	r1, r0, #25
 8006e2e:	d5fb      	bpl.n	8006e28 <_printf_i+0xe4>
 8006e30:	881e      	ldrh	r6, [r3, #0]
 8006e32:	2f6f      	cmp	r7, #111	; 0x6f
 8006e34:	bf0c      	ite	eq
 8006e36:	2308      	moveq	r3, #8
 8006e38:	230a      	movne	r3, #10
 8006e3a:	4851      	ldr	r0, [pc, #324]	; (8006f80 <_printf_i+0x23c>)
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e42:	6865      	ldr	r5, [r4, #4]
 8006e44:	2d00      	cmp	r5, #0
 8006e46:	bfa8      	it	ge
 8006e48:	6821      	ldrge	r1, [r4, #0]
 8006e4a:	60a5      	str	r5, [r4, #8]
 8006e4c:	bfa4      	itt	ge
 8006e4e:	f021 0104 	bicge.w	r1, r1, #4
 8006e52:	6021      	strge	r1, [r4, #0]
 8006e54:	b90e      	cbnz	r6, 8006e5a <_printf_i+0x116>
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	d04b      	beq.n	8006ef2 <_printf_i+0x1ae>
 8006e5a:	4615      	mov	r5, r2
 8006e5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e60:	fb03 6711 	mls	r7, r3, r1, r6
 8006e64:	5dc7      	ldrb	r7, [r0, r7]
 8006e66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e6a:	4637      	mov	r7, r6
 8006e6c:	42bb      	cmp	r3, r7
 8006e6e:	460e      	mov	r6, r1
 8006e70:	d9f4      	bls.n	8006e5c <_printf_i+0x118>
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d10b      	bne.n	8006e8e <_printf_i+0x14a>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	07de      	lsls	r6, r3, #31
 8006e7a:	d508      	bpl.n	8006e8e <_printf_i+0x14a>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	6861      	ldr	r1, [r4, #4]
 8006e80:	4299      	cmp	r1, r3
 8006e82:	bfde      	ittt	le
 8006e84:	2330      	movle	r3, #48	; 0x30
 8006e86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e8e:	1b52      	subs	r2, r2, r5
 8006e90:	6122      	str	r2, [r4, #16]
 8006e92:	464b      	mov	r3, r9
 8006e94:	4621      	mov	r1, r4
 8006e96:	4640      	mov	r0, r8
 8006e98:	f8cd a000 	str.w	sl, [sp]
 8006e9c:	aa03      	add	r2, sp, #12
 8006e9e:	f7ff fedf 	bl	8006c60 <_printf_common>
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d14a      	bne.n	8006f3c <_printf_i+0x1f8>
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	b004      	add	sp, #16
 8006eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	f043 0320 	orr.w	r3, r3, #32
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	2778      	movs	r7, #120	; 0x78
 8006eba:	4832      	ldr	r0, [pc, #200]	; (8006f84 <_printf_i+0x240>)
 8006ebc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	6829      	ldr	r1, [r5, #0]
 8006ec4:	061f      	lsls	r7, r3, #24
 8006ec6:	f851 6b04 	ldr.w	r6, [r1], #4
 8006eca:	d402      	bmi.n	8006ed2 <_printf_i+0x18e>
 8006ecc:	065f      	lsls	r7, r3, #25
 8006ece:	bf48      	it	mi
 8006ed0:	b2b6      	uxthmi	r6, r6
 8006ed2:	07df      	lsls	r7, r3, #31
 8006ed4:	bf48      	it	mi
 8006ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8006eda:	6029      	str	r1, [r5, #0]
 8006edc:	bf48      	it	mi
 8006ede:	6023      	strmi	r3, [r4, #0]
 8006ee0:	b91e      	cbnz	r6, 8006eea <_printf_i+0x1a6>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	f023 0320 	bic.w	r3, r3, #32
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	2310      	movs	r3, #16
 8006eec:	e7a6      	b.n	8006e3c <_printf_i+0xf8>
 8006eee:	4824      	ldr	r0, [pc, #144]	; (8006f80 <_printf_i+0x23c>)
 8006ef0:	e7e4      	b.n	8006ebc <_printf_i+0x178>
 8006ef2:	4615      	mov	r5, r2
 8006ef4:	e7bd      	b.n	8006e72 <_printf_i+0x12e>
 8006ef6:	682b      	ldr	r3, [r5, #0]
 8006ef8:	6826      	ldr	r6, [r4, #0]
 8006efa:	1d18      	adds	r0, r3, #4
 8006efc:	6961      	ldr	r1, [r4, #20]
 8006efe:	6028      	str	r0, [r5, #0]
 8006f00:	0635      	lsls	r5, r6, #24
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	d501      	bpl.n	8006f0a <_printf_i+0x1c6>
 8006f06:	6019      	str	r1, [r3, #0]
 8006f08:	e002      	b.n	8006f10 <_printf_i+0x1cc>
 8006f0a:	0670      	lsls	r0, r6, #25
 8006f0c:	d5fb      	bpl.n	8006f06 <_printf_i+0x1c2>
 8006f0e:	8019      	strh	r1, [r3, #0]
 8006f10:	2300      	movs	r3, #0
 8006f12:	4615      	mov	r5, r2
 8006f14:	6123      	str	r3, [r4, #16]
 8006f16:	e7bc      	b.n	8006e92 <_printf_i+0x14e>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	1d1a      	adds	r2, r3, #4
 8006f1e:	602a      	str	r2, [r5, #0]
 8006f20:	681d      	ldr	r5, [r3, #0]
 8006f22:	6862      	ldr	r2, [r4, #4]
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 fc02 	bl	800772e <memchr>
 8006f2a:	b108      	cbz	r0, 8006f30 <_printf_i+0x1ec>
 8006f2c:	1b40      	subs	r0, r0, r5
 8006f2e:	6060      	str	r0, [r4, #4]
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	2300      	movs	r3, #0
 8006f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f3a:	e7aa      	b.n	8006e92 <_printf_i+0x14e>
 8006f3c:	462a      	mov	r2, r5
 8006f3e:	4649      	mov	r1, r9
 8006f40:	4640      	mov	r0, r8
 8006f42:	6923      	ldr	r3, [r4, #16]
 8006f44:	47d0      	blx	sl
 8006f46:	3001      	adds	r0, #1
 8006f48:	d0ad      	beq.n	8006ea6 <_printf_i+0x162>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	079b      	lsls	r3, r3, #30
 8006f4e:	d413      	bmi.n	8006f78 <_printf_i+0x234>
 8006f50:	68e0      	ldr	r0, [r4, #12]
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	4298      	cmp	r0, r3
 8006f56:	bfb8      	it	lt
 8006f58:	4618      	movlt	r0, r3
 8006f5a:	e7a6      	b.n	8006eaa <_printf_i+0x166>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4632      	mov	r2, r6
 8006f60:	4649      	mov	r1, r9
 8006f62:	4640      	mov	r0, r8
 8006f64:	47d0      	blx	sl
 8006f66:	3001      	adds	r0, #1
 8006f68:	d09d      	beq.n	8006ea6 <_printf_i+0x162>
 8006f6a:	3501      	adds	r5, #1
 8006f6c:	68e3      	ldr	r3, [r4, #12]
 8006f6e:	9903      	ldr	r1, [sp, #12]
 8006f70:	1a5b      	subs	r3, r3, r1
 8006f72:	42ab      	cmp	r3, r5
 8006f74:	dcf2      	bgt.n	8006f5c <_printf_i+0x218>
 8006f76:	e7eb      	b.n	8006f50 <_printf_i+0x20c>
 8006f78:	2500      	movs	r5, #0
 8006f7a:	f104 0619 	add.w	r6, r4, #25
 8006f7e:	e7f5      	b.n	8006f6c <_printf_i+0x228>
 8006f80:	0800aedc 	.word	0x0800aedc
 8006f84:	0800aeed 	.word	0x0800aeed

08006f88 <_scanf_float>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	b087      	sub	sp, #28
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	688b      	ldr	r3, [r1, #8]
 8006f92:	4617      	mov	r7, r2
 8006f94:	1e5a      	subs	r2, r3, #1
 8006f96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006f9a:	bf85      	ittet	hi
 8006f9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006fa0:	195b      	addhi	r3, r3, r5
 8006fa2:	2300      	movls	r3, #0
 8006fa4:	9302      	strhi	r3, [sp, #8]
 8006fa6:	bf88      	it	hi
 8006fa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006fac:	468b      	mov	fp, r1
 8006fae:	f04f 0500 	mov.w	r5, #0
 8006fb2:	bf8c      	ite	hi
 8006fb4:	608b      	strhi	r3, [r1, #8]
 8006fb6:	9302      	strls	r3, [sp, #8]
 8006fb8:	680b      	ldr	r3, [r1, #0]
 8006fba:	4680      	mov	r8, r0
 8006fbc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006fc0:	f84b 3b1c 	str.w	r3, [fp], #28
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	465e      	mov	r6, fp
 8006fc8:	46aa      	mov	sl, r5
 8006fca:	46a9      	mov	r9, r5
 8006fcc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006fd0:	9501      	str	r5, [sp, #4]
 8006fd2:	68a2      	ldr	r2, [r4, #8]
 8006fd4:	b152      	cbz	r2, 8006fec <_scanf_float+0x64>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b4e      	cmp	r3, #78	; 0x4e
 8006fdc:	d864      	bhi.n	80070a8 <_scanf_float+0x120>
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d83c      	bhi.n	800705c <_scanf_float+0xd4>
 8006fe2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006fe6:	b2c8      	uxtb	r0, r1
 8006fe8:	280e      	cmp	r0, #14
 8006fea:	d93a      	bls.n	8007062 <_scanf_float+0xda>
 8006fec:	f1b9 0f00 	cmp.w	r9, #0
 8006ff0:	d003      	beq.n	8006ffa <_scanf_float+0x72>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ffe:	f1ba 0f01 	cmp.w	sl, #1
 8007002:	f200 8113 	bhi.w	800722c <_scanf_float+0x2a4>
 8007006:	455e      	cmp	r6, fp
 8007008:	f200 8105 	bhi.w	8007216 <_scanf_float+0x28e>
 800700c:	2501      	movs	r5, #1
 800700e:	4628      	mov	r0, r5
 8007010:	b007      	add	sp, #28
 8007012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007016:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800701a:	2a0d      	cmp	r2, #13
 800701c:	d8e6      	bhi.n	8006fec <_scanf_float+0x64>
 800701e:	a101      	add	r1, pc, #4	; (adr r1, 8007024 <_scanf_float+0x9c>)
 8007020:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007024:	08007163 	.word	0x08007163
 8007028:	08006fed 	.word	0x08006fed
 800702c:	08006fed 	.word	0x08006fed
 8007030:	08006fed 	.word	0x08006fed
 8007034:	080071c3 	.word	0x080071c3
 8007038:	0800719b 	.word	0x0800719b
 800703c:	08006fed 	.word	0x08006fed
 8007040:	08006fed 	.word	0x08006fed
 8007044:	08007171 	.word	0x08007171
 8007048:	08006fed 	.word	0x08006fed
 800704c:	08006fed 	.word	0x08006fed
 8007050:	08006fed 	.word	0x08006fed
 8007054:	08006fed 	.word	0x08006fed
 8007058:	08007129 	.word	0x08007129
 800705c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007060:	e7db      	b.n	800701a <_scanf_float+0x92>
 8007062:	290e      	cmp	r1, #14
 8007064:	d8c2      	bhi.n	8006fec <_scanf_float+0x64>
 8007066:	a001      	add	r0, pc, #4	; (adr r0, 800706c <_scanf_float+0xe4>)
 8007068:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800706c:	0800711b 	.word	0x0800711b
 8007070:	08006fed 	.word	0x08006fed
 8007074:	0800711b 	.word	0x0800711b
 8007078:	080071af 	.word	0x080071af
 800707c:	08006fed 	.word	0x08006fed
 8007080:	080070c9 	.word	0x080070c9
 8007084:	08007105 	.word	0x08007105
 8007088:	08007105 	.word	0x08007105
 800708c:	08007105 	.word	0x08007105
 8007090:	08007105 	.word	0x08007105
 8007094:	08007105 	.word	0x08007105
 8007098:	08007105 	.word	0x08007105
 800709c:	08007105 	.word	0x08007105
 80070a0:	08007105 	.word	0x08007105
 80070a4:	08007105 	.word	0x08007105
 80070a8:	2b6e      	cmp	r3, #110	; 0x6e
 80070aa:	d809      	bhi.n	80070c0 <_scanf_float+0x138>
 80070ac:	2b60      	cmp	r3, #96	; 0x60
 80070ae:	d8b2      	bhi.n	8007016 <_scanf_float+0x8e>
 80070b0:	2b54      	cmp	r3, #84	; 0x54
 80070b2:	d077      	beq.n	80071a4 <_scanf_float+0x21c>
 80070b4:	2b59      	cmp	r3, #89	; 0x59
 80070b6:	d199      	bne.n	8006fec <_scanf_float+0x64>
 80070b8:	2d07      	cmp	r5, #7
 80070ba:	d197      	bne.n	8006fec <_scanf_float+0x64>
 80070bc:	2508      	movs	r5, #8
 80070be:	e029      	b.n	8007114 <_scanf_float+0x18c>
 80070c0:	2b74      	cmp	r3, #116	; 0x74
 80070c2:	d06f      	beq.n	80071a4 <_scanf_float+0x21c>
 80070c4:	2b79      	cmp	r3, #121	; 0x79
 80070c6:	e7f6      	b.n	80070b6 <_scanf_float+0x12e>
 80070c8:	6821      	ldr	r1, [r4, #0]
 80070ca:	05c8      	lsls	r0, r1, #23
 80070cc:	d51a      	bpl.n	8007104 <_scanf_float+0x17c>
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80070d4:	6021      	str	r1, [r4, #0]
 80070d6:	f109 0901 	add.w	r9, r9, #1
 80070da:	b11b      	cbz	r3, 80070e4 <_scanf_float+0x15c>
 80070dc:	3b01      	subs	r3, #1
 80070de:	3201      	adds	r2, #1
 80070e0:	9302      	str	r3, [sp, #8]
 80070e2:	60a2      	str	r2, [r4, #8]
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	60a3      	str	r3, [r4, #8]
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	3301      	adds	r3, #1
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	607b      	str	r3, [r7, #4]
 80070f8:	f340 8084 	ble.w	8007204 <_scanf_float+0x27c>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	3301      	adds	r3, #1
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	e766      	b.n	8006fd2 <_scanf_float+0x4a>
 8007104:	eb1a 0f05 	cmn.w	sl, r5
 8007108:	f47f af70 	bne.w	8006fec <_scanf_float+0x64>
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007112:	6022      	str	r2, [r4, #0]
 8007114:	f806 3b01 	strb.w	r3, [r6], #1
 8007118:	e7e4      	b.n	80070e4 <_scanf_float+0x15c>
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	0610      	lsls	r0, r2, #24
 800711e:	f57f af65 	bpl.w	8006fec <_scanf_float+0x64>
 8007122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007126:	e7f4      	b.n	8007112 <_scanf_float+0x18a>
 8007128:	f1ba 0f00 	cmp.w	sl, #0
 800712c:	d10e      	bne.n	800714c <_scanf_float+0x1c4>
 800712e:	f1b9 0f00 	cmp.w	r9, #0
 8007132:	d10e      	bne.n	8007152 <_scanf_float+0x1ca>
 8007134:	6822      	ldr	r2, [r4, #0]
 8007136:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800713a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800713e:	d108      	bne.n	8007152 <_scanf_float+0x1ca>
 8007140:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007144:	f04f 0a01 	mov.w	sl, #1
 8007148:	6022      	str	r2, [r4, #0]
 800714a:	e7e3      	b.n	8007114 <_scanf_float+0x18c>
 800714c:	f1ba 0f02 	cmp.w	sl, #2
 8007150:	d055      	beq.n	80071fe <_scanf_float+0x276>
 8007152:	2d01      	cmp	r5, #1
 8007154:	d002      	beq.n	800715c <_scanf_float+0x1d4>
 8007156:	2d04      	cmp	r5, #4
 8007158:	f47f af48 	bne.w	8006fec <_scanf_float+0x64>
 800715c:	3501      	adds	r5, #1
 800715e:	b2ed      	uxtb	r5, r5
 8007160:	e7d8      	b.n	8007114 <_scanf_float+0x18c>
 8007162:	f1ba 0f01 	cmp.w	sl, #1
 8007166:	f47f af41 	bne.w	8006fec <_scanf_float+0x64>
 800716a:	f04f 0a02 	mov.w	sl, #2
 800716e:	e7d1      	b.n	8007114 <_scanf_float+0x18c>
 8007170:	b97d      	cbnz	r5, 8007192 <_scanf_float+0x20a>
 8007172:	f1b9 0f00 	cmp.w	r9, #0
 8007176:	f47f af3c 	bne.w	8006ff2 <_scanf_float+0x6a>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007180:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007184:	f47f af39 	bne.w	8006ffa <_scanf_float+0x72>
 8007188:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800718c:	2501      	movs	r5, #1
 800718e:	6022      	str	r2, [r4, #0]
 8007190:	e7c0      	b.n	8007114 <_scanf_float+0x18c>
 8007192:	2d03      	cmp	r5, #3
 8007194:	d0e2      	beq.n	800715c <_scanf_float+0x1d4>
 8007196:	2d05      	cmp	r5, #5
 8007198:	e7de      	b.n	8007158 <_scanf_float+0x1d0>
 800719a:	2d02      	cmp	r5, #2
 800719c:	f47f af26 	bne.w	8006fec <_scanf_float+0x64>
 80071a0:	2503      	movs	r5, #3
 80071a2:	e7b7      	b.n	8007114 <_scanf_float+0x18c>
 80071a4:	2d06      	cmp	r5, #6
 80071a6:	f47f af21 	bne.w	8006fec <_scanf_float+0x64>
 80071aa:	2507      	movs	r5, #7
 80071ac:	e7b2      	b.n	8007114 <_scanf_float+0x18c>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	0591      	lsls	r1, r2, #22
 80071b2:	f57f af1b 	bpl.w	8006fec <_scanf_float+0x64>
 80071b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80071ba:	6022      	str	r2, [r4, #0]
 80071bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80071c0:	e7a8      	b.n	8007114 <_scanf_float+0x18c>
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80071c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80071cc:	d006      	beq.n	80071dc <_scanf_float+0x254>
 80071ce:	0550      	lsls	r0, r2, #21
 80071d0:	f57f af0c 	bpl.w	8006fec <_scanf_float+0x64>
 80071d4:	f1b9 0f00 	cmp.w	r9, #0
 80071d8:	f43f af0f 	beq.w	8006ffa <_scanf_float+0x72>
 80071dc:	0591      	lsls	r1, r2, #22
 80071de:	bf58      	it	pl
 80071e0:	9901      	ldrpl	r1, [sp, #4]
 80071e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071e6:	bf58      	it	pl
 80071e8:	eba9 0101 	subpl.w	r1, r9, r1
 80071ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80071f0:	f04f 0900 	mov.w	r9, #0
 80071f4:	bf58      	it	pl
 80071f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80071fa:	6022      	str	r2, [r4, #0]
 80071fc:	e78a      	b.n	8007114 <_scanf_float+0x18c>
 80071fe:	f04f 0a03 	mov.w	sl, #3
 8007202:	e787      	b.n	8007114 <_scanf_float+0x18c>
 8007204:	4639      	mov	r1, r7
 8007206:	4640      	mov	r0, r8
 8007208:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800720c:	4798      	blx	r3
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f aedf 	beq.w	8006fd2 <_scanf_float+0x4a>
 8007214:	e6ea      	b.n	8006fec <_scanf_float+0x64>
 8007216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800721a:	463a      	mov	r2, r7
 800721c:	4640      	mov	r0, r8
 800721e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007222:	4798      	blx	r3
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	3b01      	subs	r3, #1
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	e6ec      	b.n	8007006 <_scanf_float+0x7e>
 800722c:	1e6b      	subs	r3, r5, #1
 800722e:	2b06      	cmp	r3, #6
 8007230:	d825      	bhi.n	800727e <_scanf_float+0x2f6>
 8007232:	2d02      	cmp	r5, #2
 8007234:	d836      	bhi.n	80072a4 <_scanf_float+0x31c>
 8007236:	455e      	cmp	r6, fp
 8007238:	f67f aee8 	bls.w	800700c <_scanf_float+0x84>
 800723c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007240:	463a      	mov	r2, r7
 8007242:	4640      	mov	r0, r8
 8007244:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007248:	4798      	blx	r3
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	3b01      	subs	r3, #1
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	e7f1      	b.n	8007236 <_scanf_float+0x2ae>
 8007252:	9802      	ldr	r0, [sp, #8]
 8007254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007258:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800725c:	463a      	mov	r2, r7
 800725e:	9002      	str	r0, [sp, #8]
 8007260:	4640      	mov	r0, r8
 8007262:	4798      	blx	r3
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	3b01      	subs	r3, #1
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800726e:	fa5f fa8a 	uxtb.w	sl, sl
 8007272:	f1ba 0f02 	cmp.w	sl, #2
 8007276:	d1ec      	bne.n	8007252 <_scanf_float+0x2ca>
 8007278:	3d03      	subs	r5, #3
 800727a:	b2ed      	uxtb	r5, r5
 800727c:	1b76      	subs	r6, r6, r5
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	05da      	lsls	r2, r3, #23
 8007282:	d52f      	bpl.n	80072e4 <_scanf_float+0x35c>
 8007284:	055b      	lsls	r3, r3, #21
 8007286:	d510      	bpl.n	80072aa <_scanf_float+0x322>
 8007288:	455e      	cmp	r6, fp
 800728a:	f67f aebf 	bls.w	800700c <_scanf_float+0x84>
 800728e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007292:	463a      	mov	r2, r7
 8007294:	4640      	mov	r0, r8
 8007296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800729a:	4798      	blx	r3
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	3b01      	subs	r3, #1
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	e7f1      	b.n	8007288 <_scanf_float+0x300>
 80072a4:	46aa      	mov	sl, r5
 80072a6:	9602      	str	r6, [sp, #8]
 80072a8:	e7df      	b.n	800726a <_scanf_float+0x2e2>
 80072aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	2965      	cmp	r1, #101	; 0x65
 80072b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80072b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	d00c      	beq.n	80072d8 <_scanf_float+0x350>
 80072be:	2945      	cmp	r1, #69	; 0x45
 80072c0:	d00a      	beq.n	80072d8 <_scanf_float+0x350>
 80072c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072c6:	463a      	mov	r2, r7
 80072c8:	4640      	mov	r0, r8
 80072ca:	4798      	blx	r3
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	1eb5      	subs	r5, r6, #2
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	463a      	mov	r2, r7
 80072da:	4640      	mov	r0, r8
 80072dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072e0:	4798      	blx	r3
 80072e2:	462e      	mov	r6, r5
 80072e4:	6825      	ldr	r5, [r4, #0]
 80072e6:	f015 0510 	ands.w	r5, r5, #16
 80072ea:	d155      	bne.n	8007398 <_scanf_float+0x410>
 80072ec:	7035      	strb	r5, [r6, #0]
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f8:	d11d      	bne.n	8007336 <_scanf_float+0x3ae>
 80072fa:	9b01      	ldr	r3, [sp, #4]
 80072fc:	454b      	cmp	r3, r9
 80072fe:	eba3 0209 	sub.w	r2, r3, r9
 8007302:	d125      	bne.n	8007350 <_scanf_float+0x3c8>
 8007304:	2200      	movs	r2, #0
 8007306:	4659      	mov	r1, fp
 8007308:	4640      	mov	r0, r8
 800730a:	f002 fc41 	bl	8009b90 <_strtod_r>
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	f8d4 c000 	ldr.w	ip, [r4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f01c 0f02 	tst.w	ip, #2
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	f103 0204 	add.w	r2, r3, #4
 8007322:	d020      	beq.n	8007366 <_scanf_float+0x3de>
 8007324:	9903      	ldr	r1, [sp, #12]
 8007326:	600a      	str	r2, [r1, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	e9c3 6700 	strd	r6, r7, [r3]
 800732e:	68e3      	ldr	r3, [r4, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	60e3      	str	r3, [r4, #12]
 8007334:	e66b      	b.n	800700e <_scanf_float+0x86>
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0e3      	beq.n	8007304 <_scanf_float+0x37c>
 800733c:	9905      	ldr	r1, [sp, #20]
 800733e:	230a      	movs	r3, #10
 8007340:	462a      	mov	r2, r5
 8007342:	4640      	mov	r0, r8
 8007344:	3101      	adds	r1, #1
 8007346:	f002 fca7 	bl	8009c98 <_strtol_r>
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	9e05      	ldr	r6, [sp, #20]
 800734e:	1ac2      	subs	r2, r0, r3
 8007350:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007354:	429e      	cmp	r6, r3
 8007356:	bf28      	it	cs
 8007358:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800735c:	4630      	mov	r0, r6
 800735e:	490f      	ldr	r1, [pc, #60]	; (800739c <_scanf_float+0x414>)
 8007360:	f000 f8e2 	bl	8007528 <siprintf>
 8007364:	e7ce      	b.n	8007304 <_scanf_float+0x37c>
 8007366:	f01c 0f04 	tst.w	ip, #4
 800736a:	d1db      	bne.n	8007324 <_scanf_float+0x39c>
 800736c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007370:	f8cc 2000 	str.w	r2, [ip]
 8007374:	f8d3 8000 	ldr.w	r8, [r3]
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	f7f9 fbb2 	bl	8000ae4 <__aeabi_dcmpun>
 8007380:	b128      	cbz	r0, 800738e <_scanf_float+0x406>
 8007382:	4807      	ldr	r0, [pc, #28]	; (80073a0 <_scanf_float+0x418>)
 8007384:	f000 f9e2 	bl	800774c <nanf>
 8007388:	f8c8 0000 	str.w	r0, [r8]
 800738c:	e7cf      	b.n	800732e <_scanf_float+0x3a6>
 800738e:	4630      	mov	r0, r6
 8007390:	4639      	mov	r1, r7
 8007392:	f7f9 fc05 	bl	8000ba0 <__aeabi_d2f>
 8007396:	e7f7      	b.n	8007388 <_scanf_float+0x400>
 8007398:	2500      	movs	r5, #0
 800739a:	e638      	b.n	800700e <_scanf_float+0x86>
 800739c:	0800aefe 	.word	0x0800aefe
 80073a0:	0800b295 	.word	0x0800b295

080073a4 <std>:
 80073a4:	2300      	movs	r3, #0
 80073a6:	b510      	push	{r4, lr}
 80073a8:	4604      	mov	r4, r0
 80073aa:	e9c0 3300 	strd	r3, r3, [r0]
 80073ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073b2:	6083      	str	r3, [r0, #8]
 80073b4:	8181      	strh	r1, [r0, #12]
 80073b6:	6643      	str	r3, [r0, #100]	; 0x64
 80073b8:	81c2      	strh	r2, [r0, #14]
 80073ba:	6183      	str	r3, [r0, #24]
 80073bc:	4619      	mov	r1, r3
 80073be:	2208      	movs	r2, #8
 80073c0:	305c      	adds	r0, #92	; 0x5c
 80073c2:	f000 f935 	bl	8007630 <memset>
 80073c6:	4b0d      	ldr	r3, [pc, #52]	; (80073fc <std+0x58>)
 80073c8:	6224      	str	r4, [r4, #32]
 80073ca:	6263      	str	r3, [r4, #36]	; 0x24
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <std+0x5c>)
 80073ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80073d0:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <std+0x60>)
 80073d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <std+0x64>)
 80073d6:	6323      	str	r3, [r4, #48]	; 0x30
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <std+0x68>)
 80073da:	429c      	cmp	r4, r3
 80073dc:	d006      	beq.n	80073ec <std+0x48>
 80073de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80073e2:	4294      	cmp	r4, r2
 80073e4:	d002      	beq.n	80073ec <std+0x48>
 80073e6:	33d0      	adds	r3, #208	; 0xd0
 80073e8:	429c      	cmp	r4, r3
 80073ea:	d105      	bne.n	80073f8 <std+0x54>
 80073ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f4:	f000 b998 	b.w	8007728 <__retarget_lock_init_recursive>
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	bf00      	nop
 80073fc:	08007569 	.word	0x08007569
 8007400:	0800758b 	.word	0x0800758b
 8007404:	080075c3 	.word	0x080075c3
 8007408:	080075e7 	.word	0x080075e7
 800740c:	200005c0 	.word	0x200005c0

08007410 <stdio_exit_handler>:
 8007410:	4a02      	ldr	r2, [pc, #8]	; (800741c <stdio_exit_handler+0xc>)
 8007412:	4903      	ldr	r1, [pc, #12]	; (8007420 <stdio_exit_handler+0x10>)
 8007414:	4803      	ldr	r0, [pc, #12]	; (8007424 <stdio_exit_handler+0x14>)
 8007416:	f000 b869 	b.w	80074ec <_fwalk_sglue>
 800741a:	bf00      	nop
 800741c:	20000024 	.word	0x20000024
 8007420:	0800a051 	.word	0x0800a051
 8007424:	20000030 	.word	0x20000030

08007428 <cleanup_stdio>:
 8007428:	6841      	ldr	r1, [r0, #4]
 800742a:	4b0c      	ldr	r3, [pc, #48]	; (800745c <cleanup_stdio+0x34>)
 800742c:	b510      	push	{r4, lr}
 800742e:	4299      	cmp	r1, r3
 8007430:	4604      	mov	r4, r0
 8007432:	d001      	beq.n	8007438 <cleanup_stdio+0x10>
 8007434:	f002 fe0c 	bl	800a050 <_fflush_r>
 8007438:	68a1      	ldr	r1, [r4, #8]
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <cleanup_stdio+0x38>)
 800743c:	4299      	cmp	r1, r3
 800743e:	d002      	beq.n	8007446 <cleanup_stdio+0x1e>
 8007440:	4620      	mov	r0, r4
 8007442:	f002 fe05 	bl	800a050 <_fflush_r>
 8007446:	68e1      	ldr	r1, [r4, #12]
 8007448:	4b06      	ldr	r3, [pc, #24]	; (8007464 <cleanup_stdio+0x3c>)
 800744a:	4299      	cmp	r1, r3
 800744c:	d004      	beq.n	8007458 <cleanup_stdio+0x30>
 800744e:	4620      	mov	r0, r4
 8007450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007454:	f002 bdfc 	b.w	800a050 <_fflush_r>
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	200005c0 	.word	0x200005c0
 8007460:	20000628 	.word	0x20000628
 8007464:	20000690 	.word	0x20000690

08007468 <global_stdio_init.part.0>:
 8007468:	b510      	push	{r4, lr}
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <global_stdio_init.part.0+0x30>)
 800746c:	4c0b      	ldr	r4, [pc, #44]	; (800749c <global_stdio_init.part.0+0x34>)
 800746e:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <global_stdio_init.part.0+0x38>)
 8007470:	4620      	mov	r0, r4
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	2104      	movs	r1, #4
 8007476:	2200      	movs	r2, #0
 8007478:	f7ff ff94 	bl	80073a4 <std>
 800747c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007480:	2201      	movs	r2, #1
 8007482:	2109      	movs	r1, #9
 8007484:	f7ff ff8e 	bl	80073a4 <std>
 8007488:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800748c:	2202      	movs	r2, #2
 800748e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007492:	2112      	movs	r1, #18
 8007494:	f7ff bf86 	b.w	80073a4 <std>
 8007498:	200006f8 	.word	0x200006f8
 800749c:	200005c0 	.word	0x200005c0
 80074a0:	08007411 	.word	0x08007411

080074a4 <__sfp_lock_acquire>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__sfp_lock_acquire+0x8>)
 80074a6:	f000 b940 	b.w	800772a <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	20000701 	.word	0x20000701

080074b0 <__sfp_lock_release>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__sfp_lock_release+0x8>)
 80074b2:	f000 b93b 	b.w	800772c <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	20000701 	.word	0x20000701

080074bc <__sinit>:
 80074bc:	b510      	push	{r4, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	f7ff fff0 	bl	80074a4 <__sfp_lock_acquire>
 80074c4:	6a23      	ldr	r3, [r4, #32]
 80074c6:	b11b      	cbz	r3, 80074d0 <__sinit+0x14>
 80074c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074cc:	f7ff bff0 	b.w	80074b0 <__sfp_lock_release>
 80074d0:	4b04      	ldr	r3, [pc, #16]	; (80074e4 <__sinit+0x28>)
 80074d2:	6223      	str	r3, [r4, #32]
 80074d4:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <__sinit+0x2c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f5      	bne.n	80074c8 <__sinit+0xc>
 80074dc:	f7ff ffc4 	bl	8007468 <global_stdio_init.part.0>
 80074e0:	e7f2      	b.n	80074c8 <__sinit+0xc>
 80074e2:	bf00      	nop
 80074e4:	08007429 	.word	0x08007429
 80074e8:	200006f8 	.word	0x200006f8

080074ec <_fwalk_sglue>:
 80074ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f0:	4607      	mov	r7, r0
 80074f2:	4688      	mov	r8, r1
 80074f4:	4614      	mov	r4, r2
 80074f6:	2600      	movs	r6, #0
 80074f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007500:	d505      	bpl.n	800750e <_fwalk_sglue+0x22>
 8007502:	6824      	ldr	r4, [r4, #0]
 8007504:	2c00      	cmp	r4, #0
 8007506:	d1f7      	bne.n	80074f8 <_fwalk_sglue+0xc>
 8007508:	4630      	mov	r0, r6
 800750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750e:	89ab      	ldrh	r3, [r5, #12]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d907      	bls.n	8007524 <_fwalk_sglue+0x38>
 8007514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007518:	3301      	adds	r3, #1
 800751a:	d003      	beq.n	8007524 <_fwalk_sglue+0x38>
 800751c:	4629      	mov	r1, r5
 800751e:	4638      	mov	r0, r7
 8007520:	47c0      	blx	r8
 8007522:	4306      	orrs	r6, r0
 8007524:	3568      	adds	r5, #104	; 0x68
 8007526:	e7e9      	b.n	80074fc <_fwalk_sglue+0x10>

08007528 <siprintf>:
 8007528:	b40e      	push	{r1, r2, r3}
 800752a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800752e:	b500      	push	{lr}
 8007530:	b09c      	sub	sp, #112	; 0x70
 8007532:	ab1d      	add	r3, sp, #116	; 0x74
 8007534:	9002      	str	r0, [sp, #8]
 8007536:	9006      	str	r0, [sp, #24]
 8007538:	9107      	str	r1, [sp, #28]
 800753a:	9104      	str	r1, [sp, #16]
 800753c:	4808      	ldr	r0, [pc, #32]	; (8007560 <siprintf+0x38>)
 800753e:	4909      	ldr	r1, [pc, #36]	; (8007564 <siprintf+0x3c>)
 8007540:	f853 2b04 	ldr.w	r2, [r3], #4
 8007544:	9105      	str	r1, [sp, #20]
 8007546:	6800      	ldr	r0, [r0, #0]
 8007548:	a902      	add	r1, sp, #8
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	f002 fc00 	bl	8009d50 <_svfiprintf_r>
 8007550:	2200      	movs	r2, #0
 8007552:	9b02      	ldr	r3, [sp, #8]
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	b01c      	add	sp, #112	; 0x70
 8007558:	f85d eb04 	ldr.w	lr, [sp], #4
 800755c:	b003      	add	sp, #12
 800755e:	4770      	bx	lr
 8007560:	2000007c 	.word	0x2000007c
 8007564:	ffff0208 	.word	0xffff0208

08007568 <__sread>:
 8007568:	b510      	push	{r4, lr}
 800756a:	460c      	mov	r4, r1
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	f000 f88c 	bl	800768c <_read_r>
 8007574:	2800      	cmp	r0, #0
 8007576:	bfab      	itete	ge
 8007578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800757a:	89a3      	ldrhlt	r3, [r4, #12]
 800757c:	181b      	addge	r3, r3, r0
 800757e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007582:	bfac      	ite	ge
 8007584:	6563      	strge	r3, [r4, #84]	; 0x54
 8007586:	81a3      	strhlt	r3, [r4, #12]
 8007588:	bd10      	pop	{r4, pc}

0800758a <__swrite>:
 800758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	461f      	mov	r7, r3
 8007590:	898b      	ldrh	r3, [r1, #12]
 8007592:	4605      	mov	r5, r0
 8007594:	05db      	lsls	r3, r3, #23
 8007596:	460c      	mov	r4, r1
 8007598:	4616      	mov	r6, r2
 800759a:	d505      	bpl.n	80075a8 <__swrite+0x1e>
 800759c:	2302      	movs	r3, #2
 800759e:	2200      	movs	r2, #0
 80075a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a4:	f000 f860 	bl	8007668 <_lseek_r>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	4632      	mov	r2, r6
 80075ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	4628      	mov	r0, r5
 80075b4:	463b      	mov	r3, r7
 80075b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	f000 b877 	b.w	80076b0 <_write_r>

080075c2 <__sseek>:
 80075c2:	b510      	push	{r4, lr}
 80075c4:	460c      	mov	r4, r1
 80075c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ca:	f000 f84d 	bl	8007668 <_lseek_r>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	bf15      	itete	ne
 80075d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80075d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075de:	81a3      	strheq	r3, [r4, #12]
 80075e0:	bf18      	it	ne
 80075e2:	81a3      	strhne	r3, [r4, #12]
 80075e4:	bd10      	pop	{r4, pc}

080075e6 <__sclose>:
 80075e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ea:	f000 b82d 	b.w	8007648 <_close_r>
	...

080075f0 <_vsiprintf_r>:
 80075f0:	b500      	push	{lr}
 80075f2:	b09b      	sub	sp, #108	; 0x6c
 80075f4:	9100      	str	r1, [sp, #0]
 80075f6:	9104      	str	r1, [sp, #16]
 80075f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075fc:	9105      	str	r1, [sp, #20]
 80075fe:	9102      	str	r1, [sp, #8]
 8007600:	4905      	ldr	r1, [pc, #20]	; (8007618 <_vsiprintf_r+0x28>)
 8007602:	9103      	str	r1, [sp, #12]
 8007604:	4669      	mov	r1, sp
 8007606:	f002 fba3 	bl	8009d50 <_svfiprintf_r>
 800760a:	2200      	movs	r2, #0
 800760c:	9b00      	ldr	r3, [sp, #0]
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	b01b      	add	sp, #108	; 0x6c
 8007612:	f85d fb04 	ldr.w	pc, [sp], #4
 8007616:	bf00      	nop
 8007618:	ffff0208 	.word	0xffff0208

0800761c <vsiprintf>:
 800761c:	4613      	mov	r3, r2
 800761e:	460a      	mov	r2, r1
 8007620:	4601      	mov	r1, r0
 8007622:	4802      	ldr	r0, [pc, #8]	; (800762c <vsiprintf+0x10>)
 8007624:	6800      	ldr	r0, [r0, #0]
 8007626:	f7ff bfe3 	b.w	80075f0 <_vsiprintf_r>
 800762a:	bf00      	nop
 800762c:	2000007c 	.word	0x2000007c

08007630 <memset>:
 8007630:	4603      	mov	r3, r0
 8007632:	4402      	add	r2, r0
 8007634:	4293      	cmp	r3, r2
 8007636:	d100      	bne.n	800763a <memset+0xa>
 8007638:	4770      	bx	lr
 800763a:	f803 1b01 	strb.w	r1, [r3], #1
 800763e:	e7f9      	b.n	8007634 <memset+0x4>

08007640 <_localeconv_r>:
 8007640:	4800      	ldr	r0, [pc, #0]	; (8007644 <_localeconv_r+0x4>)
 8007642:	4770      	bx	lr
 8007644:	20000170 	.word	0x20000170

08007648 <_close_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	2300      	movs	r3, #0
 800764c:	4d05      	ldr	r5, [pc, #20]	; (8007664 <_close_r+0x1c>)
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	f7fa fd7c 	bl	8002150 <_close>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d102      	bne.n	8007662 <_close_r+0x1a>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	b103      	cbz	r3, 8007662 <_close_r+0x1a>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	200006fc 	.word	0x200006fc

08007668 <_lseek_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	2200      	movs	r2, #0
 8007672:	4d05      	ldr	r5, [pc, #20]	; (8007688 <_lseek_r+0x20>)
 8007674:	602a      	str	r2, [r5, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	f7fa fd8e 	bl	8002198 <_lseek>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d102      	bne.n	8007686 <_lseek_r+0x1e>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	b103      	cbz	r3, 8007686 <_lseek_r+0x1e>
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	200006fc 	.word	0x200006fc

0800768c <_read_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	2200      	movs	r2, #0
 8007696:	4d05      	ldr	r5, [pc, #20]	; (80076ac <_read_r+0x20>)
 8007698:	602a      	str	r2, [r5, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	f7fa fd1f 	bl	80020de <_read>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_read_r+0x1e>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_read_r+0x1e>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	200006fc 	.word	0x200006fc

080076b0 <_write_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
 80076b6:	4611      	mov	r1, r2
 80076b8:	2200      	movs	r2, #0
 80076ba:	4d05      	ldr	r5, [pc, #20]	; (80076d0 <_write_r+0x20>)
 80076bc:	602a      	str	r2, [r5, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	f7fa fd2a 	bl	8002118 <_write>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d102      	bne.n	80076ce <_write_r+0x1e>
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	b103      	cbz	r3, 80076ce <_write_r+0x1e>
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	200006fc 	.word	0x200006fc

080076d4 <__errno>:
 80076d4:	4b01      	ldr	r3, [pc, #4]	; (80076dc <__errno+0x8>)
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	2000007c 	.word	0x2000007c

080076e0 <__libc_init_array>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	2600      	movs	r6, #0
 80076e4:	4d0c      	ldr	r5, [pc, #48]	; (8007718 <__libc_init_array+0x38>)
 80076e6:	4c0d      	ldr	r4, [pc, #52]	; (800771c <__libc_init_array+0x3c>)
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	42a6      	cmp	r6, r4
 80076ee:	d109      	bne.n	8007704 <__libc_init_array+0x24>
 80076f0:	f003 fbc0 	bl	800ae74 <_init>
 80076f4:	2600      	movs	r6, #0
 80076f6:	4d0a      	ldr	r5, [pc, #40]	; (8007720 <__libc_init_array+0x40>)
 80076f8:	4c0a      	ldr	r4, [pc, #40]	; (8007724 <__libc_init_array+0x44>)
 80076fa:	1b64      	subs	r4, r4, r5
 80076fc:	10a4      	asrs	r4, r4, #2
 80076fe:	42a6      	cmp	r6, r4
 8007700:	d105      	bne.n	800770e <__libc_init_array+0x2e>
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	f855 3b04 	ldr.w	r3, [r5], #4
 8007708:	4798      	blx	r3
 800770a:	3601      	adds	r6, #1
 800770c:	e7ee      	b.n	80076ec <__libc_init_array+0xc>
 800770e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007712:	4798      	blx	r3
 8007714:	3601      	adds	r6, #1
 8007716:	e7f2      	b.n	80076fe <__libc_init_array+0x1e>
 8007718:	0800b2f8 	.word	0x0800b2f8
 800771c:	0800b2f8 	.word	0x0800b2f8
 8007720:	0800b2f8 	.word	0x0800b2f8
 8007724:	0800b2fc 	.word	0x0800b2fc

08007728 <__retarget_lock_init_recursive>:
 8007728:	4770      	bx	lr

0800772a <__retarget_lock_acquire_recursive>:
 800772a:	4770      	bx	lr

0800772c <__retarget_lock_release_recursive>:
 800772c:	4770      	bx	lr

0800772e <memchr>:
 800772e:	4603      	mov	r3, r0
 8007730:	b510      	push	{r4, lr}
 8007732:	b2c9      	uxtb	r1, r1
 8007734:	4402      	add	r2, r0
 8007736:	4293      	cmp	r3, r2
 8007738:	4618      	mov	r0, r3
 800773a:	d101      	bne.n	8007740 <memchr+0x12>
 800773c:	2000      	movs	r0, #0
 800773e:	e003      	b.n	8007748 <memchr+0x1a>
 8007740:	7804      	ldrb	r4, [r0, #0]
 8007742:	3301      	adds	r3, #1
 8007744:	428c      	cmp	r4, r1
 8007746:	d1f6      	bne.n	8007736 <memchr+0x8>
 8007748:	bd10      	pop	{r4, pc}
	...

0800774c <nanf>:
 800774c:	4800      	ldr	r0, [pc, #0]	; (8007750 <nanf+0x4>)
 800774e:	4770      	bx	lr
 8007750:	7fc00000 	.word	0x7fc00000

08007754 <quorem>:
 8007754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	6903      	ldr	r3, [r0, #16]
 800775a:	690c      	ldr	r4, [r1, #16]
 800775c:	4607      	mov	r7, r0
 800775e:	42a3      	cmp	r3, r4
 8007760:	db7f      	blt.n	8007862 <quorem+0x10e>
 8007762:	3c01      	subs	r4, #1
 8007764:	f100 0514 	add.w	r5, r0, #20
 8007768:	f101 0814 	add.w	r8, r1, #20
 800776c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800777a:	3301      	adds	r3, #1
 800777c:	429a      	cmp	r2, r3
 800777e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007782:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007786:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800778a:	d331      	bcc.n	80077f0 <quorem+0x9c>
 800778c:	f04f 0e00 	mov.w	lr, #0
 8007790:	4640      	mov	r0, r8
 8007792:	46ac      	mov	ip, r5
 8007794:	46f2      	mov	sl, lr
 8007796:	f850 2b04 	ldr.w	r2, [r0], #4
 800779a:	b293      	uxth	r3, r2
 800779c:	fb06 e303 	mla	r3, r6, r3, lr
 80077a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077a4:	0c1a      	lsrs	r2, r3, #16
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	fb06 220e 	mla	r2, r6, lr, r2
 80077ac:	ebaa 0303 	sub.w	r3, sl, r3
 80077b0:	f8dc a000 	ldr.w	sl, [ip]
 80077b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077b8:	fa1f fa8a 	uxth.w	sl, sl
 80077bc:	4453      	add	r3, sl
 80077be:	f8dc a000 	ldr.w	sl, [ip]
 80077c2:	b292      	uxth	r2, r2
 80077c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077d2:	4581      	cmp	r9, r0
 80077d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077d8:	f84c 3b04 	str.w	r3, [ip], #4
 80077dc:	d2db      	bcs.n	8007796 <quorem+0x42>
 80077de:	f855 300b 	ldr.w	r3, [r5, fp]
 80077e2:	b92b      	cbnz	r3, 80077f0 <quorem+0x9c>
 80077e4:	9b01      	ldr	r3, [sp, #4]
 80077e6:	3b04      	subs	r3, #4
 80077e8:	429d      	cmp	r5, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	d32d      	bcc.n	800784a <quorem+0xf6>
 80077ee:	613c      	str	r4, [r7, #16]
 80077f0:	4638      	mov	r0, r7
 80077f2:	f001 f9dd 	bl	8008bb0 <__mcmp>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	db23      	blt.n	8007842 <quorem+0xee>
 80077fa:	4629      	mov	r1, r5
 80077fc:	2000      	movs	r0, #0
 80077fe:	3601      	adds	r6, #1
 8007800:	f858 2b04 	ldr.w	r2, [r8], #4
 8007804:	f8d1 c000 	ldr.w	ip, [r1]
 8007808:	b293      	uxth	r3, r2
 800780a:	1ac3      	subs	r3, r0, r3
 800780c:	0c12      	lsrs	r2, r2, #16
 800780e:	fa1f f08c 	uxth.w	r0, ip
 8007812:	4403      	add	r3, r0
 8007814:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800781c:	b29b      	uxth	r3, r3
 800781e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007822:	45c1      	cmp	r9, r8
 8007824:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007828:	f841 3b04 	str.w	r3, [r1], #4
 800782c:	d2e8      	bcs.n	8007800 <quorem+0xac>
 800782e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007836:	b922      	cbnz	r2, 8007842 <quorem+0xee>
 8007838:	3b04      	subs	r3, #4
 800783a:	429d      	cmp	r5, r3
 800783c:	461a      	mov	r2, r3
 800783e:	d30a      	bcc.n	8007856 <quorem+0x102>
 8007840:	613c      	str	r4, [r7, #16]
 8007842:	4630      	mov	r0, r6
 8007844:	b003      	add	sp, #12
 8007846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	3b04      	subs	r3, #4
 800784e:	2a00      	cmp	r2, #0
 8007850:	d1cd      	bne.n	80077ee <quorem+0x9a>
 8007852:	3c01      	subs	r4, #1
 8007854:	e7c8      	b.n	80077e8 <quorem+0x94>
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	3b04      	subs	r3, #4
 800785a:	2a00      	cmp	r2, #0
 800785c:	d1f0      	bne.n	8007840 <quorem+0xec>
 800785e:	3c01      	subs	r4, #1
 8007860:	e7eb      	b.n	800783a <quorem+0xe6>
 8007862:	2000      	movs	r0, #0
 8007864:	e7ee      	b.n	8007844 <quorem+0xf0>
	...

08007868 <_dtoa_r>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	4616      	mov	r6, r2
 800786e:	461f      	mov	r7, r3
 8007870:	69c4      	ldr	r4, [r0, #28]
 8007872:	b099      	sub	sp, #100	; 0x64
 8007874:	4605      	mov	r5, r0
 8007876:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800787a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800787e:	b974      	cbnz	r4, 800789e <_dtoa_r+0x36>
 8007880:	2010      	movs	r0, #16
 8007882:	f000 fe1d 	bl	80084c0 <malloc>
 8007886:	4602      	mov	r2, r0
 8007888:	61e8      	str	r0, [r5, #28]
 800788a:	b920      	cbnz	r0, 8007896 <_dtoa_r+0x2e>
 800788c:	21ef      	movs	r1, #239	; 0xef
 800788e:	4bac      	ldr	r3, [pc, #688]	; (8007b40 <_dtoa_r+0x2d8>)
 8007890:	48ac      	ldr	r0, [pc, #688]	; (8007b44 <_dtoa_r+0x2dc>)
 8007892:	f002 fc55 	bl	800a140 <__assert_func>
 8007896:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800789a:	6004      	str	r4, [r0, #0]
 800789c:	60c4      	str	r4, [r0, #12]
 800789e:	69eb      	ldr	r3, [r5, #28]
 80078a0:	6819      	ldr	r1, [r3, #0]
 80078a2:	b151      	cbz	r1, 80078ba <_dtoa_r+0x52>
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	2301      	movs	r3, #1
 80078a8:	4093      	lsls	r3, r2
 80078aa:	604a      	str	r2, [r1, #4]
 80078ac:	608b      	str	r3, [r1, #8]
 80078ae:	4628      	mov	r0, r5
 80078b0:	f000 fefa 	bl	80086a8 <_Bfree>
 80078b4:	2200      	movs	r2, #0
 80078b6:	69eb      	ldr	r3, [r5, #28]
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	1e3b      	subs	r3, r7, #0
 80078bc:	bfaf      	iteee	ge
 80078be:	2300      	movge	r3, #0
 80078c0:	2201      	movlt	r2, #1
 80078c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078c6:	9305      	strlt	r3, [sp, #20]
 80078c8:	bfa8      	it	ge
 80078ca:	f8c8 3000 	strge.w	r3, [r8]
 80078ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80078d2:	4b9d      	ldr	r3, [pc, #628]	; (8007b48 <_dtoa_r+0x2e0>)
 80078d4:	bfb8      	it	lt
 80078d6:	f8c8 2000 	strlt.w	r2, [r8]
 80078da:	ea33 0309 	bics.w	r3, r3, r9
 80078de:	d119      	bne.n	8007914 <_dtoa_r+0xac>
 80078e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80078e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078ec:	4333      	orrs	r3, r6
 80078ee:	f000 8589 	beq.w	8008404 <_dtoa_r+0xb9c>
 80078f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078f4:	b953      	cbnz	r3, 800790c <_dtoa_r+0xa4>
 80078f6:	4b95      	ldr	r3, [pc, #596]	; (8007b4c <_dtoa_r+0x2e4>)
 80078f8:	e023      	b.n	8007942 <_dtoa_r+0xda>
 80078fa:	4b95      	ldr	r3, [pc, #596]	; (8007b50 <_dtoa_r+0x2e8>)
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	3308      	adds	r3, #8
 8007900:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	9803      	ldr	r0, [sp, #12]
 8007906:	b019      	add	sp, #100	; 0x64
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	4b8f      	ldr	r3, [pc, #572]	; (8007b4c <_dtoa_r+0x2e4>)
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	3303      	adds	r3, #3
 8007912:	e7f5      	b.n	8007900 <_dtoa_r+0x98>
 8007914:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007918:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800791c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007920:	2200      	movs	r2, #0
 8007922:	2300      	movs	r3, #0
 8007924:	f7f9 f8ac 	bl	8000a80 <__aeabi_dcmpeq>
 8007928:	4680      	mov	r8, r0
 800792a:	b160      	cbz	r0, 8007946 <_dtoa_r+0xde>
 800792c:	2301      	movs	r3, #1
 800792e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8562 	beq.w	80083fe <_dtoa_r+0xb96>
 800793a:	4b86      	ldr	r3, [pc, #536]	; (8007b54 <_dtoa_r+0x2ec>)
 800793c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	3b01      	subs	r3, #1
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	e7de      	b.n	8007904 <_dtoa_r+0x9c>
 8007946:	ab16      	add	r3, sp, #88	; 0x58
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	ab17      	add	r3, sp, #92	; 0x5c
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	4628      	mov	r0, r5
 8007950:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007954:	f001 fa3c 	bl	8008dd0 <__d2b>
 8007958:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800795c:	4682      	mov	sl, r0
 800795e:	2c00      	cmp	r4, #0
 8007960:	d07e      	beq.n	8007a60 <_dtoa_r+0x1f8>
 8007962:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007968:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800796c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007970:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007974:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007978:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800797c:	4619      	mov	r1, r3
 800797e:	2200      	movs	r2, #0
 8007980:	4b75      	ldr	r3, [pc, #468]	; (8007b58 <_dtoa_r+0x2f0>)
 8007982:	f7f8 fc5d 	bl	8000240 <__aeabi_dsub>
 8007986:	a368      	add	r3, pc, #416	; (adr r3, 8007b28 <_dtoa_r+0x2c0>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f7f8 fe10 	bl	80005b0 <__aeabi_dmul>
 8007990:	a367      	add	r3, pc, #412	; (adr r3, 8007b30 <_dtoa_r+0x2c8>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f7f8 fc55 	bl	8000244 <__adddf3>
 800799a:	4606      	mov	r6, r0
 800799c:	4620      	mov	r0, r4
 800799e:	460f      	mov	r7, r1
 80079a0:	f7f8 fd9c 	bl	80004dc <__aeabi_i2d>
 80079a4:	a364      	add	r3, pc, #400	; (adr r3, 8007b38 <_dtoa_r+0x2d0>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f7f8 fe01 	bl	80005b0 <__aeabi_dmul>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4630      	mov	r0, r6
 80079b4:	4639      	mov	r1, r7
 80079b6:	f7f8 fc45 	bl	8000244 <__adddf3>
 80079ba:	4606      	mov	r6, r0
 80079bc:	460f      	mov	r7, r1
 80079be:	f7f9 f8a7 	bl	8000b10 <__aeabi_d2iz>
 80079c2:	2200      	movs	r2, #0
 80079c4:	4683      	mov	fp, r0
 80079c6:	2300      	movs	r3, #0
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	f7f9 f862 	bl	8000a94 <__aeabi_dcmplt>
 80079d0:	b148      	cbz	r0, 80079e6 <_dtoa_r+0x17e>
 80079d2:	4658      	mov	r0, fp
 80079d4:	f7f8 fd82 	bl	80004dc <__aeabi_i2d>
 80079d8:	4632      	mov	r2, r6
 80079da:	463b      	mov	r3, r7
 80079dc:	f7f9 f850 	bl	8000a80 <__aeabi_dcmpeq>
 80079e0:	b908      	cbnz	r0, 80079e6 <_dtoa_r+0x17e>
 80079e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079e6:	f1bb 0f16 	cmp.w	fp, #22
 80079ea:	d857      	bhi.n	8007a9c <_dtoa_r+0x234>
 80079ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079f0:	4b5a      	ldr	r3, [pc, #360]	; (8007b5c <_dtoa_r+0x2f4>)
 80079f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f7f9 f84b 	bl	8000a94 <__aeabi_dcmplt>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d04e      	beq.n	8007aa0 <_dtoa_r+0x238>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a08:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a0c:	1b1b      	subs	r3, r3, r4
 8007a0e:	1e5a      	subs	r2, r3, #1
 8007a10:	bf46      	itte	mi
 8007a12:	f1c3 0901 	rsbmi	r9, r3, #1
 8007a16:	2300      	movmi	r3, #0
 8007a18:	f04f 0900 	movpl.w	r9, #0
 8007a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a1e:	bf48      	it	mi
 8007a20:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007a22:	f1bb 0f00 	cmp.w	fp, #0
 8007a26:	db3d      	blt.n	8007aa4 <_dtoa_r+0x23c>
 8007a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007a2e:	445b      	add	r3, fp
 8007a30:	9309      	str	r3, [sp, #36]	; 0x24
 8007a32:	2300      	movs	r3, #0
 8007a34:	930a      	str	r3, [sp, #40]	; 0x28
 8007a36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	d867      	bhi.n	8007b0c <_dtoa_r+0x2a4>
 8007a3c:	2b05      	cmp	r3, #5
 8007a3e:	bfc4      	itt	gt
 8007a40:	3b04      	subgt	r3, #4
 8007a42:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a46:	bfc8      	it	gt
 8007a48:	2400      	movgt	r4, #0
 8007a4a:	f1a3 0302 	sub.w	r3, r3, #2
 8007a4e:	bfd8      	it	le
 8007a50:	2401      	movle	r4, #1
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	f200 8086 	bhi.w	8007b64 <_dtoa_r+0x2fc>
 8007a58:	e8df f003 	tbb	[pc, r3]
 8007a5c:	5637392c 	.word	0x5637392c
 8007a60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007a64:	441c      	add	r4, r3
 8007a66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	bfc1      	itttt	gt
 8007a6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a72:	fa09 f903 	lslgt.w	r9, r9, r3
 8007a76:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007a7a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007a7e:	bfd6      	itet	le
 8007a80:	f1c3 0320 	rsble	r3, r3, #32
 8007a84:	ea49 0003 	orrgt.w	r0, r9, r3
 8007a88:	fa06 f003 	lslle.w	r0, r6, r3
 8007a8c:	f7f8 fd16 	bl	80004bc <__aeabi_ui2d>
 8007a90:	2201      	movs	r2, #1
 8007a92:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a96:	3c01      	subs	r4, #1
 8007a98:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a9a:	e76f      	b.n	800797c <_dtoa_r+0x114>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e7b3      	b.n	8007a08 <_dtoa_r+0x1a0>
 8007aa0:	900f      	str	r0, [sp, #60]	; 0x3c
 8007aa2:	e7b2      	b.n	8007a0a <_dtoa_r+0x1a2>
 8007aa4:	f1cb 0300 	rsb	r3, fp, #0
 8007aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8007aaa:	2300      	movs	r3, #0
 8007aac:	eba9 090b 	sub.w	r9, r9, fp
 8007ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ab2:	e7c0      	b.n	8007a36 <_dtoa_r+0x1ce>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dc55      	bgt.n	8007b6a <_dtoa_r+0x302>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	9306      	str	r3, [sp, #24]
 8007ac4:	9308      	str	r3, [sp, #32]
 8007ac6:	9223      	str	r2, [sp, #140]	; 0x8c
 8007ac8:	e00b      	b.n	8007ae2 <_dtoa_r+0x27a>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e7f3      	b.n	8007ab6 <_dtoa_r+0x24e>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ad2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ad4:	445b      	add	r3, fp
 8007ad6:	9306      	str	r3, [sp, #24]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	9308      	str	r3, [sp, #32]
 8007ade:	bfb8      	it	lt
 8007ae0:	2301      	movlt	r3, #1
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	69e8      	ldr	r0, [r5, #28]
 8007ae8:	f102 0614 	add.w	r6, r2, #20
 8007aec:	429e      	cmp	r6, r3
 8007aee:	d940      	bls.n	8007b72 <_dtoa_r+0x30a>
 8007af0:	6041      	str	r1, [r0, #4]
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 fd98 	bl	8008628 <_Balloc>
 8007af8:	9003      	str	r0, [sp, #12]
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d13c      	bne.n	8007b78 <_dtoa_r+0x310>
 8007afe:	4602      	mov	r2, r0
 8007b00:	f240 11af 	movw	r1, #431	; 0x1af
 8007b04:	4b16      	ldr	r3, [pc, #88]	; (8007b60 <_dtoa_r+0x2f8>)
 8007b06:	e6c3      	b.n	8007890 <_dtoa_r+0x28>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7e1      	b.n	8007ad0 <_dtoa_r+0x268>
 8007b0c:	2401      	movs	r4, #1
 8007b0e:	2300      	movs	r3, #0
 8007b10:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b12:	9322      	str	r3, [sp, #136]	; 0x88
 8007b14:	f04f 33ff 	mov.w	r3, #4294967295
 8007b18:	2200      	movs	r2, #0
 8007b1a:	9306      	str	r3, [sp, #24]
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	2312      	movs	r3, #18
 8007b20:	e7d1      	b.n	8007ac6 <_dtoa_r+0x25e>
 8007b22:	bf00      	nop
 8007b24:	f3af 8000 	nop.w
 8007b28:	636f4361 	.word	0x636f4361
 8007b2c:	3fd287a7 	.word	0x3fd287a7
 8007b30:	8b60c8b3 	.word	0x8b60c8b3
 8007b34:	3fc68a28 	.word	0x3fc68a28
 8007b38:	509f79fb 	.word	0x509f79fb
 8007b3c:	3fd34413 	.word	0x3fd34413
 8007b40:	0800af10 	.word	0x0800af10
 8007b44:	0800af27 	.word	0x0800af27
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	0800af0c 	.word	0x0800af0c
 8007b50:	0800af03 	.word	0x0800af03
 8007b54:	0800aedb 	.word	0x0800aedb
 8007b58:	3ff80000 	.word	0x3ff80000
 8007b5c:	0800b018 	.word	0x0800b018
 8007b60:	0800af7f 	.word	0x0800af7f
 8007b64:	2301      	movs	r3, #1
 8007b66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b68:	e7d4      	b.n	8007b14 <_dtoa_r+0x2ac>
 8007b6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b6c:	9306      	str	r3, [sp, #24]
 8007b6e:	9308      	str	r3, [sp, #32]
 8007b70:	e7b7      	b.n	8007ae2 <_dtoa_r+0x27a>
 8007b72:	3101      	adds	r1, #1
 8007b74:	0052      	lsls	r2, r2, #1
 8007b76:	e7b7      	b.n	8007ae8 <_dtoa_r+0x280>
 8007b78:	69eb      	ldr	r3, [r5, #28]
 8007b7a:	9a03      	ldr	r2, [sp, #12]
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	9b08      	ldr	r3, [sp, #32]
 8007b80:	2b0e      	cmp	r3, #14
 8007b82:	f200 80a8 	bhi.w	8007cd6 <_dtoa_r+0x46e>
 8007b86:	2c00      	cmp	r4, #0
 8007b88:	f000 80a5 	beq.w	8007cd6 <_dtoa_r+0x46e>
 8007b8c:	f1bb 0f00 	cmp.w	fp, #0
 8007b90:	dd34      	ble.n	8007bfc <_dtoa_r+0x394>
 8007b92:	4b9a      	ldr	r3, [pc, #616]	; (8007dfc <_dtoa_r+0x594>)
 8007b94:	f00b 020f 	and.w	r2, fp, #15
 8007b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007ba0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ba4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ba8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007bac:	d016      	beq.n	8007bdc <_dtoa_r+0x374>
 8007bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bb2:	4b93      	ldr	r3, [pc, #588]	; (8007e00 <_dtoa_r+0x598>)
 8007bb4:	2703      	movs	r7, #3
 8007bb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bba:	f7f8 fe23 	bl	8000804 <__aeabi_ddiv>
 8007bbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc2:	f004 040f 	and.w	r4, r4, #15
 8007bc6:	4e8e      	ldr	r6, [pc, #568]	; (8007e00 <_dtoa_r+0x598>)
 8007bc8:	b954      	cbnz	r4, 8007be0 <_dtoa_r+0x378>
 8007bca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd2:	f7f8 fe17 	bl	8000804 <__aeabi_ddiv>
 8007bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bda:	e029      	b.n	8007c30 <_dtoa_r+0x3c8>
 8007bdc:	2702      	movs	r7, #2
 8007bde:	e7f2      	b.n	8007bc6 <_dtoa_r+0x35e>
 8007be0:	07e1      	lsls	r1, r4, #31
 8007be2:	d508      	bpl.n	8007bf6 <_dtoa_r+0x38e>
 8007be4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007be8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bec:	f7f8 fce0 	bl	80005b0 <__aeabi_dmul>
 8007bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bf4:	3701      	adds	r7, #1
 8007bf6:	1064      	asrs	r4, r4, #1
 8007bf8:	3608      	adds	r6, #8
 8007bfa:	e7e5      	b.n	8007bc8 <_dtoa_r+0x360>
 8007bfc:	f000 80a5 	beq.w	8007d4a <_dtoa_r+0x4e2>
 8007c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c04:	f1cb 0400 	rsb	r4, fp, #0
 8007c08:	4b7c      	ldr	r3, [pc, #496]	; (8007dfc <_dtoa_r+0x594>)
 8007c0a:	f004 020f 	and.w	r2, r4, #15
 8007c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fccb 	bl	80005b0 <__aeabi_dmul>
 8007c1a:	2702      	movs	r7, #2
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c22:	4e77      	ldr	r6, [pc, #476]	; (8007e00 <_dtoa_r+0x598>)
 8007c24:	1124      	asrs	r4, r4, #4
 8007c26:	2c00      	cmp	r4, #0
 8007c28:	f040 8084 	bne.w	8007d34 <_dtoa_r+0x4cc>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1d2      	bne.n	8007bd6 <_dtoa_r+0x36e>
 8007c30:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 8087 	beq.w	8007d4e <_dtoa_r+0x4e6>
 8007c40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c44:	2200      	movs	r2, #0
 8007c46:	4b6f      	ldr	r3, [pc, #444]	; (8007e04 <_dtoa_r+0x59c>)
 8007c48:	f7f8 ff24 	bl	8000a94 <__aeabi_dcmplt>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d07e      	beq.n	8007d4e <_dtoa_r+0x4e6>
 8007c50:	9b08      	ldr	r3, [sp, #32]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d07b      	beq.n	8007d4e <_dtoa_r+0x4e6>
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dd38      	ble.n	8007cce <_dtoa_r+0x466>
 8007c5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c60:	2200      	movs	r2, #0
 8007c62:	4b69      	ldr	r3, [pc, #420]	; (8007e08 <_dtoa_r+0x5a0>)
 8007c64:	f7f8 fca4 	bl	80005b0 <__aeabi_dmul>
 8007c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c6c:	9c06      	ldr	r4, [sp, #24]
 8007c6e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007c72:	3701      	adds	r7, #1
 8007c74:	4638      	mov	r0, r7
 8007c76:	f7f8 fc31 	bl	80004dc <__aeabi_i2d>
 8007c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c7e:	f7f8 fc97 	bl	80005b0 <__aeabi_dmul>
 8007c82:	2200      	movs	r2, #0
 8007c84:	4b61      	ldr	r3, [pc, #388]	; (8007e0c <_dtoa_r+0x5a4>)
 8007c86:	f7f8 fadd 	bl	8000244 <__adddf3>
 8007c8a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c92:	9611      	str	r6, [sp, #68]	; 0x44
 8007c94:	2c00      	cmp	r4, #0
 8007c96:	d15d      	bne.n	8007d54 <_dtoa_r+0x4ec>
 8007c98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4b5c      	ldr	r3, [pc, #368]	; (8007e10 <_dtoa_r+0x5a8>)
 8007ca0:	f7f8 face 	bl	8000240 <__aeabi_dsub>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cac:	4633      	mov	r3, r6
 8007cae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cb0:	f7f8 ff0e 	bl	8000ad0 <__aeabi_dcmpgt>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f040 8295 	bne.w	80081e4 <_dtoa_r+0x97c>
 8007cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007cc4:	f7f8 fee6 	bl	8000a94 <__aeabi_dcmplt>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	f040 8289 	bne.w	80081e0 <_dtoa_r+0x978>
 8007cce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007cd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007cd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f2c0 8151 	blt.w	8007f80 <_dtoa_r+0x718>
 8007cde:	f1bb 0f0e 	cmp.w	fp, #14
 8007ce2:	f300 814d 	bgt.w	8007f80 <_dtoa_r+0x718>
 8007ce6:	4b45      	ldr	r3, [pc, #276]	; (8007dfc <_dtoa_r+0x594>)
 8007ce8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cf0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007cf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f280 80da 	bge.w	8007eb0 <_dtoa_r+0x648>
 8007cfc:	9b08      	ldr	r3, [sp, #32]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f300 80d6 	bgt.w	8007eb0 <_dtoa_r+0x648>
 8007d04:	f040 826b 	bne.w	80081de <_dtoa_r+0x976>
 8007d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4b40      	ldr	r3, [pc, #256]	; (8007e10 <_dtoa_r+0x5a8>)
 8007d10:	f7f8 fc4e 	bl	80005b0 <__aeabi_dmul>
 8007d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d18:	f7f8 fed0 	bl	8000abc <__aeabi_dcmpge>
 8007d1c:	9c08      	ldr	r4, [sp, #32]
 8007d1e:	4626      	mov	r6, r4
 8007d20:	2800      	cmp	r0, #0
 8007d22:	f040 8241 	bne.w	80081a8 <_dtoa_r+0x940>
 8007d26:	2331      	movs	r3, #49	; 0x31
 8007d28:	9f03      	ldr	r7, [sp, #12]
 8007d2a:	f10b 0b01 	add.w	fp, fp, #1
 8007d2e:	f807 3b01 	strb.w	r3, [r7], #1
 8007d32:	e23d      	b.n	80081b0 <_dtoa_r+0x948>
 8007d34:	07e2      	lsls	r2, r4, #31
 8007d36:	d505      	bpl.n	8007d44 <_dtoa_r+0x4dc>
 8007d38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d3c:	f7f8 fc38 	bl	80005b0 <__aeabi_dmul>
 8007d40:	2301      	movs	r3, #1
 8007d42:	3701      	adds	r7, #1
 8007d44:	1064      	asrs	r4, r4, #1
 8007d46:	3608      	adds	r6, #8
 8007d48:	e76d      	b.n	8007c26 <_dtoa_r+0x3be>
 8007d4a:	2702      	movs	r7, #2
 8007d4c:	e770      	b.n	8007c30 <_dtoa_r+0x3c8>
 8007d4e:	46d8      	mov	r8, fp
 8007d50:	9c08      	ldr	r4, [sp, #32]
 8007d52:	e78f      	b.n	8007c74 <_dtoa_r+0x40c>
 8007d54:	9903      	ldr	r1, [sp, #12]
 8007d56:	4b29      	ldr	r3, [pc, #164]	; (8007dfc <_dtoa_r+0x594>)
 8007d58:	4421      	add	r1, r4
 8007d5a:	9112      	str	r1, [sp, #72]	; 0x48
 8007d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d6a:	2900      	cmp	r1, #0
 8007d6c:	d054      	beq.n	8007e18 <_dtoa_r+0x5b0>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	4928      	ldr	r1, [pc, #160]	; (8007e14 <_dtoa_r+0x5ac>)
 8007d72:	f7f8 fd47 	bl	8000804 <__aeabi_ddiv>
 8007d76:	463b      	mov	r3, r7
 8007d78:	4632      	mov	r2, r6
 8007d7a:	f7f8 fa61 	bl	8000240 <__aeabi_dsub>
 8007d7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d82:	9f03      	ldr	r7, [sp, #12]
 8007d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d88:	f7f8 fec2 	bl	8000b10 <__aeabi_d2iz>
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	f7f8 fba5 	bl	80004dc <__aeabi_i2d>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d9a:	f7f8 fa51 	bl	8000240 <__aeabi_dsub>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	3430      	adds	r4, #48	; 0x30
 8007da4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007da8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dac:	f807 4b01 	strb.w	r4, [r7], #1
 8007db0:	f7f8 fe70 	bl	8000a94 <__aeabi_dcmplt>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d173      	bne.n	8007ea0 <_dtoa_r+0x638>
 8007db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4911      	ldr	r1, [pc, #68]	; (8007e04 <_dtoa_r+0x59c>)
 8007dc0:	f7f8 fa3e 	bl	8000240 <__aeabi_dsub>
 8007dc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dc8:	f7f8 fe64 	bl	8000a94 <__aeabi_dcmplt>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	f040 80b6 	bne.w	8007f3e <_dtoa_r+0x6d6>
 8007dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dd4:	429f      	cmp	r7, r3
 8007dd6:	f43f af7a 	beq.w	8007cce <_dtoa_r+0x466>
 8007dda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dde:	2200      	movs	r2, #0
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <_dtoa_r+0x5a0>)
 8007de2:	f7f8 fbe5 	bl	80005b0 <__aeabi_dmul>
 8007de6:	2200      	movs	r2, #0
 8007de8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <_dtoa_r+0x5a0>)
 8007df2:	f7f8 fbdd 	bl	80005b0 <__aeabi_dmul>
 8007df6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dfa:	e7c3      	b.n	8007d84 <_dtoa_r+0x51c>
 8007dfc:	0800b018 	.word	0x0800b018
 8007e00:	0800aff0 	.word	0x0800aff0
 8007e04:	3ff00000 	.word	0x3ff00000
 8007e08:	40240000 	.word	0x40240000
 8007e0c:	401c0000 	.word	0x401c0000
 8007e10:	40140000 	.word	0x40140000
 8007e14:	3fe00000 	.word	0x3fe00000
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fbc8 	bl	80005b0 <__aeabi_dmul>
 8007e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e26:	9c03      	ldr	r4, [sp, #12]
 8007e28:	9314      	str	r3, [sp, #80]	; 0x50
 8007e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e2e:	f7f8 fe6f 	bl	8000b10 <__aeabi_d2iz>
 8007e32:	9015      	str	r0, [sp, #84]	; 0x54
 8007e34:	f7f8 fb52 	bl	80004dc <__aeabi_i2d>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e40:	f7f8 f9fe 	bl	8000240 <__aeabi_dsub>
 8007e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e46:	4606      	mov	r6, r0
 8007e48:	3330      	adds	r3, #48	; 0x30
 8007e4a:	f804 3b01 	strb.w	r3, [r4], #1
 8007e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e50:	460f      	mov	r7, r1
 8007e52:	429c      	cmp	r4, r3
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	d124      	bne.n	8007ea4 <_dtoa_r+0x63c>
 8007e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e5e:	4baf      	ldr	r3, [pc, #700]	; (800811c <_dtoa_r+0x8b4>)
 8007e60:	f7f8 f9f0 	bl	8000244 <__adddf3>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fe30 	bl	8000ad0 <__aeabi_dcmpgt>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d163      	bne.n	8007f3c <_dtoa_r+0x6d4>
 8007e74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e78:	2000      	movs	r0, #0
 8007e7a:	49a8      	ldr	r1, [pc, #672]	; (800811c <_dtoa_r+0x8b4>)
 8007e7c:	f7f8 f9e0 	bl	8000240 <__aeabi_dsub>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fe04 	bl	8000a94 <__aeabi_dcmplt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f43f af1e 	beq.w	8007cce <_dtoa_r+0x466>
 8007e92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e94:	1e7b      	subs	r3, r7, #1
 8007e96:	9314      	str	r3, [sp, #80]	; 0x50
 8007e98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007e9c:	2b30      	cmp	r3, #48	; 0x30
 8007e9e:	d0f8      	beq.n	8007e92 <_dtoa_r+0x62a>
 8007ea0:	46c3      	mov	fp, r8
 8007ea2:	e03b      	b.n	8007f1c <_dtoa_r+0x6b4>
 8007ea4:	4b9e      	ldr	r3, [pc, #632]	; (8008120 <_dtoa_r+0x8b8>)
 8007ea6:	f7f8 fb83 	bl	80005b0 <__aeabi_dmul>
 8007eaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eae:	e7bc      	b.n	8007e2a <_dtoa_r+0x5c2>
 8007eb0:	9f03      	ldr	r7, [sp, #12]
 8007eb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f7f8 fca1 	bl	8000804 <__aeabi_ddiv>
 8007ec2:	f7f8 fe25 	bl	8000b10 <__aeabi_d2iz>
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	f7f8 fb08 	bl	80004dc <__aeabi_i2d>
 8007ecc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ed0:	f7f8 fb6e 	bl	80005b0 <__aeabi_dmul>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4649      	mov	r1, r9
 8007edc:	f7f8 f9b0 	bl	8000240 <__aeabi_dsub>
 8007ee0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007ee4:	f807 6b01 	strb.w	r6, [r7], #1
 8007ee8:	9e03      	ldr	r6, [sp, #12]
 8007eea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007eee:	1bbe      	subs	r6, r7, r6
 8007ef0:	45b4      	cmp	ip, r6
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	d136      	bne.n	8007f66 <_dtoa_r+0x6fe>
 8007ef8:	f7f8 f9a4 	bl	8000244 <__adddf3>
 8007efc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f00:	4680      	mov	r8, r0
 8007f02:	4689      	mov	r9, r1
 8007f04:	f7f8 fde4 	bl	8000ad0 <__aeabi_dcmpgt>
 8007f08:	bb58      	cbnz	r0, 8007f62 <_dtoa_r+0x6fa>
 8007f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 fdb5 	bl	8000a80 <__aeabi_dcmpeq>
 8007f16:	b108      	cbz	r0, 8007f1c <_dtoa_r+0x6b4>
 8007f18:	07e3      	lsls	r3, r4, #31
 8007f1a:	d422      	bmi.n	8007f62 <_dtoa_r+0x6fa>
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f000 fbc2 	bl	80086a8 <_Bfree>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f28:	703b      	strb	r3, [r7, #0]
 8007f2a:	f10b 0301 	add.w	r3, fp, #1
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f43f ace6 	beq.w	8007904 <_dtoa_r+0x9c>
 8007f38:	601f      	str	r7, [r3, #0]
 8007f3a:	e4e3      	b.n	8007904 <_dtoa_r+0x9c>
 8007f3c:	4627      	mov	r7, r4
 8007f3e:	463b      	mov	r3, r7
 8007f40:	461f      	mov	r7, r3
 8007f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f46:	2a39      	cmp	r2, #57	; 0x39
 8007f48:	d107      	bne.n	8007f5a <_dtoa_r+0x6f2>
 8007f4a:	9a03      	ldr	r2, [sp, #12]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d1f7      	bne.n	8007f40 <_dtoa_r+0x6d8>
 8007f50:	2230      	movs	r2, #48	; 0x30
 8007f52:	9903      	ldr	r1, [sp, #12]
 8007f54:	f108 0801 	add.w	r8, r8, #1
 8007f58:	700a      	strb	r2, [r1, #0]
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	3201      	adds	r2, #1
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	e79e      	b.n	8007ea0 <_dtoa_r+0x638>
 8007f62:	46d8      	mov	r8, fp
 8007f64:	e7eb      	b.n	8007f3e <_dtoa_r+0x6d6>
 8007f66:	2200      	movs	r2, #0
 8007f68:	4b6d      	ldr	r3, [pc, #436]	; (8008120 <_dtoa_r+0x8b8>)
 8007f6a:	f7f8 fb21 	bl	80005b0 <__aeabi_dmul>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2300      	movs	r3, #0
 8007f72:	4680      	mov	r8, r0
 8007f74:	4689      	mov	r9, r1
 8007f76:	f7f8 fd83 	bl	8000a80 <__aeabi_dcmpeq>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d09b      	beq.n	8007eb6 <_dtoa_r+0x64e>
 8007f7e:	e7cd      	b.n	8007f1c <_dtoa_r+0x6b4>
 8007f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	f000 80c4 	beq.w	8008110 <_dtoa_r+0x8a8>
 8007f88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f8a:	2a01      	cmp	r2, #1
 8007f8c:	f300 80a8 	bgt.w	80080e0 <_dtoa_r+0x878>
 8007f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f92:	2a00      	cmp	r2, #0
 8007f94:	f000 80a0 	beq.w	80080d8 <_dtoa_r+0x870>
 8007f98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f9c:	464f      	mov	r7, r9
 8007f9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	441a      	add	r2, r3
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	4499      	add	r9, r3
 8007faa:	9209      	str	r2, [sp, #36]	; 0x24
 8007fac:	f000 fc7c 	bl	80088a8 <__i2b>
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	b15f      	cbz	r7, 8007fcc <_dtoa_r+0x764>
 8007fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd08      	ble.n	8007fcc <_dtoa_r+0x764>
 8007fba:	42bb      	cmp	r3, r7
 8007fbc:	bfa8      	it	ge
 8007fbe:	463b      	movge	r3, r7
 8007fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc2:	eba9 0903 	sub.w	r9, r9, r3
 8007fc6:	1aff      	subs	r7, r7, r3
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	9309      	str	r3, [sp, #36]	; 0x24
 8007fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fce:	b1f3      	cbz	r3, 800800e <_dtoa_r+0x7a6>
 8007fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 80a0 	beq.w	8008118 <_dtoa_r+0x8b0>
 8007fd8:	2c00      	cmp	r4, #0
 8007fda:	dd10      	ble.n	8007ffe <_dtoa_r+0x796>
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4622      	mov	r2, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 fd1f 	bl	8008a24 <__pow5mult>
 8007fe6:	4652      	mov	r2, sl
 8007fe8:	4601      	mov	r1, r0
 8007fea:	4606      	mov	r6, r0
 8007fec:	4628      	mov	r0, r5
 8007fee:	f000 fc71 	bl	80088d4 <__multiply>
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 fb56 	bl	80086a8 <_Bfree>
 8007ffc:	46c2      	mov	sl, r8
 8007ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008000:	1b1a      	subs	r2, r3, r4
 8008002:	d004      	beq.n	800800e <_dtoa_r+0x7a6>
 8008004:	4651      	mov	r1, sl
 8008006:	4628      	mov	r0, r5
 8008008:	f000 fd0c 	bl	8008a24 <__pow5mult>
 800800c:	4682      	mov	sl, r0
 800800e:	2101      	movs	r1, #1
 8008010:	4628      	mov	r0, r5
 8008012:	f000 fc49 	bl	80088a8 <__i2b>
 8008016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008018:	4604      	mov	r4, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	f340 8082 	ble.w	8008124 <_dtoa_r+0x8bc>
 8008020:	461a      	mov	r2, r3
 8008022:	4601      	mov	r1, r0
 8008024:	4628      	mov	r0, r5
 8008026:	f000 fcfd 	bl	8008a24 <__pow5mult>
 800802a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800802c:	4604      	mov	r4, r0
 800802e:	2b01      	cmp	r3, #1
 8008030:	dd7b      	ble.n	800812a <_dtoa_r+0x8c2>
 8008032:	f04f 0800 	mov.w	r8, #0
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800803c:	6918      	ldr	r0, [r3, #16]
 800803e:	f000 fbe5 	bl	800880c <__hi0bits>
 8008042:	f1c0 0020 	rsb	r0, r0, #32
 8008046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008048:	4418      	add	r0, r3
 800804a:	f010 001f 	ands.w	r0, r0, #31
 800804e:	f000 8092 	beq.w	8008176 <_dtoa_r+0x90e>
 8008052:	f1c0 0320 	rsb	r3, r0, #32
 8008056:	2b04      	cmp	r3, #4
 8008058:	f340 8085 	ble.w	8008166 <_dtoa_r+0x8fe>
 800805c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800805e:	f1c0 001c 	rsb	r0, r0, #28
 8008062:	4403      	add	r3, r0
 8008064:	4481      	add	r9, r0
 8008066:	4407      	add	r7, r0
 8008068:	9309      	str	r3, [sp, #36]	; 0x24
 800806a:	f1b9 0f00 	cmp.w	r9, #0
 800806e:	dd05      	ble.n	800807c <_dtoa_r+0x814>
 8008070:	4651      	mov	r1, sl
 8008072:	464a      	mov	r2, r9
 8008074:	4628      	mov	r0, r5
 8008076:	f000 fd2f 	bl	8008ad8 <__lshift>
 800807a:	4682      	mov	sl, r0
 800807c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	dd05      	ble.n	800808e <_dtoa_r+0x826>
 8008082:	4621      	mov	r1, r4
 8008084:	461a      	mov	r2, r3
 8008086:	4628      	mov	r0, r5
 8008088:	f000 fd26 	bl	8008ad8 <__lshift>
 800808c:	4604      	mov	r4, r0
 800808e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d072      	beq.n	800817a <_dtoa_r+0x912>
 8008094:	4621      	mov	r1, r4
 8008096:	4650      	mov	r0, sl
 8008098:	f000 fd8a 	bl	8008bb0 <__mcmp>
 800809c:	2800      	cmp	r0, #0
 800809e:	da6c      	bge.n	800817a <_dtoa_r+0x912>
 80080a0:	2300      	movs	r3, #0
 80080a2:	4651      	mov	r1, sl
 80080a4:	220a      	movs	r2, #10
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 fb20 	bl	80086ec <__multadd>
 80080ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ae:	4682      	mov	sl, r0
 80080b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 81ac 	beq.w	8008412 <_dtoa_r+0xbaa>
 80080ba:	2300      	movs	r3, #0
 80080bc:	4631      	mov	r1, r6
 80080be:	220a      	movs	r2, #10
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 fb13 	bl	80086ec <__multadd>
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	4606      	mov	r6, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f300 8093 	bgt.w	80081f6 <_dtoa_r+0x98e>
 80080d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	dc59      	bgt.n	800818a <_dtoa_r+0x922>
 80080d6:	e08e      	b.n	80081f6 <_dtoa_r+0x98e>
 80080d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080de:	e75d      	b.n	8007f9c <_dtoa_r+0x734>
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	1e5c      	subs	r4, r3, #1
 80080e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e6:	42a3      	cmp	r3, r4
 80080e8:	bfbf      	itttt	lt
 80080ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80080ee:	1ae3      	sublt	r3, r4, r3
 80080f0:	18d2      	addlt	r2, r2, r3
 80080f2:	bfa8      	it	ge
 80080f4:	1b1c      	subge	r4, r3, r4
 80080f6:	9b08      	ldr	r3, [sp, #32]
 80080f8:	bfbe      	ittt	lt
 80080fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80080fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80080fe:	2400      	movlt	r4, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfb5      	itete	lt
 8008104:	eba9 0703 	sublt.w	r7, r9, r3
 8008108:	464f      	movge	r7, r9
 800810a:	2300      	movlt	r3, #0
 800810c:	9b08      	ldrge	r3, [sp, #32]
 800810e:	e747      	b.n	8007fa0 <_dtoa_r+0x738>
 8008110:	464f      	mov	r7, r9
 8008112:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008114:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008116:	e74c      	b.n	8007fb2 <_dtoa_r+0x74a>
 8008118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800811a:	e773      	b.n	8008004 <_dtoa_r+0x79c>
 800811c:	3fe00000 	.word	0x3fe00000
 8008120:	40240000 	.word	0x40240000
 8008124:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008126:	2b01      	cmp	r3, #1
 8008128:	dc18      	bgt.n	800815c <_dtoa_r+0x8f4>
 800812a:	9b04      	ldr	r3, [sp, #16]
 800812c:	b9b3      	cbnz	r3, 800815c <_dtoa_r+0x8f4>
 800812e:	9b05      	ldr	r3, [sp, #20]
 8008130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008134:	b993      	cbnz	r3, 800815c <_dtoa_r+0x8f4>
 8008136:	9b05      	ldr	r3, [sp, #20]
 8008138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800813c:	0d1b      	lsrs	r3, r3, #20
 800813e:	051b      	lsls	r3, r3, #20
 8008140:	b17b      	cbz	r3, 8008162 <_dtoa_r+0x8fa>
 8008142:	f04f 0801 	mov.w	r8, #1
 8008146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008148:	f109 0901 	add.w	r9, r9, #1
 800814c:	3301      	adds	r3, #1
 800814e:	9309      	str	r3, [sp, #36]	; 0x24
 8008150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008152:	2b00      	cmp	r3, #0
 8008154:	f47f af6f 	bne.w	8008036 <_dtoa_r+0x7ce>
 8008158:	2001      	movs	r0, #1
 800815a:	e774      	b.n	8008046 <_dtoa_r+0x7de>
 800815c:	f04f 0800 	mov.w	r8, #0
 8008160:	e7f6      	b.n	8008150 <_dtoa_r+0x8e8>
 8008162:	4698      	mov	r8, r3
 8008164:	e7f4      	b.n	8008150 <_dtoa_r+0x8e8>
 8008166:	d080      	beq.n	800806a <_dtoa_r+0x802>
 8008168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800816a:	331c      	adds	r3, #28
 800816c:	441a      	add	r2, r3
 800816e:	4499      	add	r9, r3
 8008170:	441f      	add	r7, r3
 8008172:	9209      	str	r2, [sp, #36]	; 0x24
 8008174:	e779      	b.n	800806a <_dtoa_r+0x802>
 8008176:	4603      	mov	r3, r0
 8008178:	e7f6      	b.n	8008168 <_dtoa_r+0x900>
 800817a:	9b08      	ldr	r3, [sp, #32]
 800817c:	2b00      	cmp	r3, #0
 800817e:	dc34      	bgt.n	80081ea <_dtoa_r+0x982>
 8008180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008182:	2b02      	cmp	r3, #2
 8008184:	dd31      	ble.n	80081ea <_dtoa_r+0x982>
 8008186:	9b08      	ldr	r3, [sp, #32]
 8008188:	9306      	str	r3, [sp, #24]
 800818a:	9b06      	ldr	r3, [sp, #24]
 800818c:	b963      	cbnz	r3, 80081a8 <_dtoa_r+0x940>
 800818e:	4621      	mov	r1, r4
 8008190:	2205      	movs	r2, #5
 8008192:	4628      	mov	r0, r5
 8008194:	f000 faaa 	bl	80086ec <__multadd>
 8008198:	4601      	mov	r1, r0
 800819a:	4604      	mov	r4, r0
 800819c:	4650      	mov	r0, sl
 800819e:	f000 fd07 	bl	8008bb0 <__mcmp>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f73f adbf 	bgt.w	8007d26 <_dtoa_r+0x4be>
 80081a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081aa:	9f03      	ldr	r7, [sp, #12]
 80081ac:	ea6f 0b03 	mvn.w	fp, r3
 80081b0:	f04f 0800 	mov.w	r8, #0
 80081b4:	4621      	mov	r1, r4
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 fa76 	bl	80086a8 <_Bfree>
 80081bc:	2e00      	cmp	r6, #0
 80081be:	f43f aead 	beq.w	8007f1c <_dtoa_r+0x6b4>
 80081c2:	f1b8 0f00 	cmp.w	r8, #0
 80081c6:	d005      	beq.n	80081d4 <_dtoa_r+0x96c>
 80081c8:	45b0      	cmp	r8, r6
 80081ca:	d003      	beq.n	80081d4 <_dtoa_r+0x96c>
 80081cc:	4641      	mov	r1, r8
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 fa6a 	bl	80086a8 <_Bfree>
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 fa66 	bl	80086a8 <_Bfree>
 80081dc:	e69e      	b.n	8007f1c <_dtoa_r+0x6b4>
 80081de:	2400      	movs	r4, #0
 80081e0:	4626      	mov	r6, r4
 80081e2:	e7e1      	b.n	80081a8 <_dtoa_r+0x940>
 80081e4:	46c3      	mov	fp, r8
 80081e6:	4626      	mov	r6, r4
 80081e8:	e59d      	b.n	8007d26 <_dtoa_r+0x4be>
 80081ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 80c8 	beq.w	8008382 <_dtoa_r+0xb1a>
 80081f2:	9b08      	ldr	r3, [sp, #32]
 80081f4:	9306      	str	r3, [sp, #24]
 80081f6:	2f00      	cmp	r7, #0
 80081f8:	dd05      	ble.n	8008206 <_dtoa_r+0x99e>
 80081fa:	4631      	mov	r1, r6
 80081fc:	463a      	mov	r2, r7
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 fc6a 	bl	8008ad8 <__lshift>
 8008204:	4606      	mov	r6, r0
 8008206:	f1b8 0f00 	cmp.w	r8, #0
 800820a:	d05b      	beq.n	80082c4 <_dtoa_r+0xa5c>
 800820c:	4628      	mov	r0, r5
 800820e:	6871      	ldr	r1, [r6, #4]
 8008210:	f000 fa0a 	bl	8008628 <_Balloc>
 8008214:	4607      	mov	r7, r0
 8008216:	b928      	cbnz	r0, 8008224 <_dtoa_r+0x9bc>
 8008218:	4602      	mov	r2, r0
 800821a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800821e:	4b81      	ldr	r3, [pc, #516]	; (8008424 <_dtoa_r+0xbbc>)
 8008220:	f7ff bb36 	b.w	8007890 <_dtoa_r+0x28>
 8008224:	6932      	ldr	r2, [r6, #16]
 8008226:	f106 010c 	add.w	r1, r6, #12
 800822a:	3202      	adds	r2, #2
 800822c:	0092      	lsls	r2, r2, #2
 800822e:	300c      	adds	r0, #12
 8008230:	f001 ff72 	bl	800a118 <memcpy>
 8008234:	2201      	movs	r2, #1
 8008236:	4639      	mov	r1, r7
 8008238:	4628      	mov	r0, r5
 800823a:	f000 fc4d 	bl	8008ad8 <__lshift>
 800823e:	46b0      	mov	r8, r6
 8008240:	4606      	mov	r6, r0
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	9a03      	ldr	r2, [sp, #12]
 8008246:	3301      	adds	r3, #1
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	9b06      	ldr	r3, [sp, #24]
 800824c:	4413      	add	r3, r2
 800824e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	930a      	str	r3, [sp, #40]	; 0x28
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	4621      	mov	r1, r4
 800825c:	3b01      	subs	r3, #1
 800825e:	4650      	mov	r0, sl
 8008260:	9304      	str	r3, [sp, #16]
 8008262:	f7ff fa77 	bl	8007754 <quorem>
 8008266:	4641      	mov	r1, r8
 8008268:	9006      	str	r0, [sp, #24]
 800826a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800826e:	4650      	mov	r0, sl
 8008270:	f000 fc9e 	bl	8008bb0 <__mcmp>
 8008274:	4632      	mov	r2, r6
 8008276:	9009      	str	r0, [sp, #36]	; 0x24
 8008278:	4621      	mov	r1, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f000 fcb4 	bl	8008be8 <__mdiff>
 8008280:	68c2      	ldr	r2, [r0, #12]
 8008282:	4607      	mov	r7, r0
 8008284:	bb02      	cbnz	r2, 80082c8 <_dtoa_r+0xa60>
 8008286:	4601      	mov	r1, r0
 8008288:	4650      	mov	r0, sl
 800828a:	f000 fc91 	bl	8008bb0 <__mcmp>
 800828e:	4602      	mov	r2, r0
 8008290:	4639      	mov	r1, r7
 8008292:	4628      	mov	r0, r5
 8008294:	920c      	str	r2, [sp, #48]	; 0x30
 8008296:	f000 fa07 	bl	80086a8 <_Bfree>
 800829a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800829c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800829e:	9f08      	ldr	r7, [sp, #32]
 80082a0:	ea43 0102 	orr.w	r1, r3, r2
 80082a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a6:	4319      	orrs	r1, r3
 80082a8:	d110      	bne.n	80082cc <_dtoa_r+0xa64>
 80082aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082ae:	d029      	beq.n	8008304 <_dtoa_r+0xa9c>
 80082b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dd02      	ble.n	80082bc <_dtoa_r+0xa54>
 80082b6:	9b06      	ldr	r3, [sp, #24]
 80082b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	f883 9000 	strb.w	r9, [r3]
 80082c2:	e777      	b.n	80081b4 <_dtoa_r+0x94c>
 80082c4:	4630      	mov	r0, r6
 80082c6:	e7ba      	b.n	800823e <_dtoa_r+0x9d6>
 80082c8:	2201      	movs	r2, #1
 80082ca:	e7e1      	b.n	8008290 <_dtoa_r+0xa28>
 80082cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	db04      	blt.n	80082dc <_dtoa_r+0xa74>
 80082d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80082d4:	430b      	orrs	r3, r1
 80082d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082d8:	430b      	orrs	r3, r1
 80082da:	d120      	bne.n	800831e <_dtoa_r+0xab6>
 80082dc:	2a00      	cmp	r2, #0
 80082de:	dded      	ble.n	80082bc <_dtoa_r+0xa54>
 80082e0:	4651      	mov	r1, sl
 80082e2:	2201      	movs	r2, #1
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 fbf7 	bl	8008ad8 <__lshift>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4682      	mov	sl, r0
 80082ee:	f000 fc5f 	bl	8008bb0 <__mcmp>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	dc03      	bgt.n	80082fe <_dtoa_r+0xa96>
 80082f6:	d1e1      	bne.n	80082bc <_dtoa_r+0xa54>
 80082f8:	f019 0f01 	tst.w	r9, #1
 80082fc:	d0de      	beq.n	80082bc <_dtoa_r+0xa54>
 80082fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008302:	d1d8      	bne.n	80082b6 <_dtoa_r+0xa4e>
 8008304:	2339      	movs	r3, #57	; 0x39
 8008306:	9a04      	ldr	r2, [sp, #16]
 8008308:	7013      	strb	r3, [r2, #0]
 800830a:	463b      	mov	r3, r7
 800830c:	461f      	mov	r7, r3
 800830e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008312:	3b01      	subs	r3, #1
 8008314:	2a39      	cmp	r2, #57	; 0x39
 8008316:	d06b      	beq.n	80083f0 <_dtoa_r+0xb88>
 8008318:	3201      	adds	r2, #1
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	e74a      	b.n	80081b4 <_dtoa_r+0x94c>
 800831e:	2a00      	cmp	r2, #0
 8008320:	dd07      	ble.n	8008332 <_dtoa_r+0xaca>
 8008322:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008326:	d0ed      	beq.n	8008304 <_dtoa_r+0xa9c>
 8008328:	9a04      	ldr	r2, [sp, #16]
 800832a:	f109 0301 	add.w	r3, r9, #1
 800832e:	7013      	strb	r3, [r2, #0]
 8008330:	e740      	b.n	80081b4 <_dtoa_r+0x94c>
 8008332:	9b08      	ldr	r3, [sp, #32]
 8008334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008336:	f803 9c01 	strb.w	r9, [r3, #-1]
 800833a:	4293      	cmp	r3, r2
 800833c:	d042      	beq.n	80083c4 <_dtoa_r+0xb5c>
 800833e:	4651      	mov	r1, sl
 8008340:	2300      	movs	r3, #0
 8008342:	220a      	movs	r2, #10
 8008344:	4628      	mov	r0, r5
 8008346:	f000 f9d1 	bl	80086ec <__multadd>
 800834a:	45b0      	cmp	r8, r6
 800834c:	4682      	mov	sl, r0
 800834e:	f04f 0300 	mov.w	r3, #0
 8008352:	f04f 020a 	mov.w	r2, #10
 8008356:	4641      	mov	r1, r8
 8008358:	4628      	mov	r0, r5
 800835a:	d107      	bne.n	800836c <_dtoa_r+0xb04>
 800835c:	f000 f9c6 	bl	80086ec <__multadd>
 8008360:	4680      	mov	r8, r0
 8008362:	4606      	mov	r6, r0
 8008364:	9b08      	ldr	r3, [sp, #32]
 8008366:	3301      	adds	r3, #1
 8008368:	9308      	str	r3, [sp, #32]
 800836a:	e775      	b.n	8008258 <_dtoa_r+0x9f0>
 800836c:	f000 f9be 	bl	80086ec <__multadd>
 8008370:	4631      	mov	r1, r6
 8008372:	4680      	mov	r8, r0
 8008374:	2300      	movs	r3, #0
 8008376:	220a      	movs	r2, #10
 8008378:	4628      	mov	r0, r5
 800837a:	f000 f9b7 	bl	80086ec <__multadd>
 800837e:	4606      	mov	r6, r0
 8008380:	e7f0      	b.n	8008364 <_dtoa_r+0xafc>
 8008382:	9b08      	ldr	r3, [sp, #32]
 8008384:	9306      	str	r3, [sp, #24]
 8008386:	9f03      	ldr	r7, [sp, #12]
 8008388:	4621      	mov	r1, r4
 800838a:	4650      	mov	r0, sl
 800838c:	f7ff f9e2 	bl	8007754 <quorem>
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008396:	f807 9b01 	strb.w	r9, [r7], #1
 800839a:	1afa      	subs	r2, r7, r3
 800839c:	9b06      	ldr	r3, [sp, #24]
 800839e:	4293      	cmp	r3, r2
 80083a0:	dd07      	ble.n	80083b2 <_dtoa_r+0xb4a>
 80083a2:	4651      	mov	r1, sl
 80083a4:	2300      	movs	r3, #0
 80083a6:	220a      	movs	r2, #10
 80083a8:	4628      	mov	r0, r5
 80083aa:	f000 f99f 	bl	80086ec <__multadd>
 80083ae:	4682      	mov	sl, r0
 80083b0:	e7ea      	b.n	8008388 <_dtoa_r+0xb20>
 80083b2:	9b06      	ldr	r3, [sp, #24]
 80083b4:	f04f 0800 	mov.w	r8, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bfcc      	ite	gt
 80083bc:	461f      	movgt	r7, r3
 80083be:	2701      	movle	r7, #1
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	441f      	add	r7, r3
 80083c4:	4651      	mov	r1, sl
 80083c6:	2201      	movs	r2, #1
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 fb85 	bl	8008ad8 <__lshift>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4682      	mov	sl, r0
 80083d2:	f000 fbed 	bl	8008bb0 <__mcmp>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	dc97      	bgt.n	800830a <_dtoa_r+0xaa2>
 80083da:	d102      	bne.n	80083e2 <_dtoa_r+0xb7a>
 80083dc:	f019 0f01 	tst.w	r9, #1
 80083e0:	d193      	bne.n	800830a <_dtoa_r+0xaa2>
 80083e2:	463b      	mov	r3, r7
 80083e4:	461f      	mov	r7, r3
 80083e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083ea:	2a30      	cmp	r2, #48	; 0x30
 80083ec:	d0fa      	beq.n	80083e4 <_dtoa_r+0xb7c>
 80083ee:	e6e1      	b.n	80081b4 <_dtoa_r+0x94c>
 80083f0:	9a03      	ldr	r2, [sp, #12]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d18a      	bne.n	800830c <_dtoa_r+0xaa4>
 80083f6:	2331      	movs	r3, #49	; 0x31
 80083f8:	f10b 0b01 	add.w	fp, fp, #1
 80083fc:	e797      	b.n	800832e <_dtoa_r+0xac6>
 80083fe:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <_dtoa_r+0xbc0>)
 8008400:	f7ff ba9f 	b.w	8007942 <_dtoa_r+0xda>
 8008404:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008406:	2b00      	cmp	r3, #0
 8008408:	f47f aa77 	bne.w	80078fa <_dtoa_r+0x92>
 800840c:	4b07      	ldr	r3, [pc, #28]	; (800842c <_dtoa_r+0xbc4>)
 800840e:	f7ff ba98 	b.w	8007942 <_dtoa_r+0xda>
 8008412:	9b06      	ldr	r3, [sp, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	dcb6      	bgt.n	8008386 <_dtoa_r+0xb1e>
 8008418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800841a:	2b02      	cmp	r3, #2
 800841c:	f73f aeb5 	bgt.w	800818a <_dtoa_r+0x922>
 8008420:	e7b1      	b.n	8008386 <_dtoa_r+0xb1e>
 8008422:	bf00      	nop
 8008424:	0800af7f 	.word	0x0800af7f
 8008428:	0800aeda 	.word	0x0800aeda
 800842c:	0800af03 	.word	0x0800af03

08008430 <_free_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4605      	mov	r5, r0
 8008434:	2900      	cmp	r1, #0
 8008436:	d040      	beq.n	80084ba <_free_r+0x8a>
 8008438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800843c:	1f0c      	subs	r4, r1, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	bfb8      	it	lt
 8008442:	18e4      	addlt	r4, r4, r3
 8008444:	f000 f8e4 	bl	8008610 <__malloc_lock>
 8008448:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <_free_r+0x8c>)
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	b933      	cbnz	r3, 800845c <_free_r+0x2c>
 800844e:	6063      	str	r3, [r4, #4]
 8008450:	6014      	str	r4, [r2, #0]
 8008452:	4628      	mov	r0, r5
 8008454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008458:	f000 b8e0 	b.w	800861c <__malloc_unlock>
 800845c:	42a3      	cmp	r3, r4
 800845e:	d908      	bls.n	8008472 <_free_r+0x42>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	1821      	adds	r1, r4, r0
 8008464:	428b      	cmp	r3, r1
 8008466:	bf01      	itttt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	1809      	addeq	r1, r1, r0
 800846e:	6021      	streq	r1, [r4, #0]
 8008470:	e7ed      	b.n	800844e <_free_r+0x1e>
 8008472:	461a      	mov	r2, r3
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	b10b      	cbz	r3, 800847c <_free_r+0x4c>
 8008478:	42a3      	cmp	r3, r4
 800847a:	d9fa      	bls.n	8008472 <_free_r+0x42>
 800847c:	6811      	ldr	r1, [r2, #0]
 800847e:	1850      	adds	r0, r2, r1
 8008480:	42a0      	cmp	r0, r4
 8008482:	d10b      	bne.n	800849c <_free_r+0x6c>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	4401      	add	r1, r0
 8008488:	1850      	adds	r0, r2, r1
 800848a:	4283      	cmp	r3, r0
 800848c:	6011      	str	r1, [r2, #0]
 800848e:	d1e0      	bne.n	8008452 <_free_r+0x22>
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4408      	add	r0, r1
 8008496:	6010      	str	r0, [r2, #0]
 8008498:	6053      	str	r3, [r2, #4]
 800849a:	e7da      	b.n	8008452 <_free_r+0x22>
 800849c:	d902      	bls.n	80084a4 <_free_r+0x74>
 800849e:	230c      	movs	r3, #12
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	e7d6      	b.n	8008452 <_free_r+0x22>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	1821      	adds	r1, r4, r0
 80084a8:	428b      	cmp	r3, r1
 80084aa:	bf01      	itttt	eq
 80084ac:	6819      	ldreq	r1, [r3, #0]
 80084ae:	685b      	ldreq	r3, [r3, #4]
 80084b0:	1809      	addeq	r1, r1, r0
 80084b2:	6021      	streq	r1, [r4, #0]
 80084b4:	6063      	str	r3, [r4, #4]
 80084b6:	6054      	str	r4, [r2, #4]
 80084b8:	e7cb      	b.n	8008452 <_free_r+0x22>
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20000704 	.word	0x20000704

080084c0 <malloc>:
 80084c0:	4b02      	ldr	r3, [pc, #8]	; (80084cc <malloc+0xc>)
 80084c2:	4601      	mov	r1, r0
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	f000 b823 	b.w	8008510 <_malloc_r>
 80084ca:	bf00      	nop
 80084cc:	2000007c 	.word	0x2000007c

080084d0 <sbrk_aligned>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4e0e      	ldr	r6, [pc, #56]	; (800850c <sbrk_aligned+0x3c>)
 80084d4:	460c      	mov	r4, r1
 80084d6:	6831      	ldr	r1, [r6, #0]
 80084d8:	4605      	mov	r5, r0
 80084da:	b911      	cbnz	r1, 80084e2 <sbrk_aligned+0x12>
 80084dc:	f001 fe0c 	bl	800a0f8 <_sbrk_r>
 80084e0:	6030      	str	r0, [r6, #0]
 80084e2:	4621      	mov	r1, r4
 80084e4:	4628      	mov	r0, r5
 80084e6:	f001 fe07 	bl	800a0f8 <_sbrk_r>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d00a      	beq.n	8008504 <sbrk_aligned+0x34>
 80084ee:	1cc4      	adds	r4, r0, #3
 80084f0:	f024 0403 	bic.w	r4, r4, #3
 80084f4:	42a0      	cmp	r0, r4
 80084f6:	d007      	beq.n	8008508 <sbrk_aligned+0x38>
 80084f8:	1a21      	subs	r1, r4, r0
 80084fa:	4628      	mov	r0, r5
 80084fc:	f001 fdfc 	bl	800a0f8 <_sbrk_r>
 8008500:	3001      	adds	r0, #1
 8008502:	d101      	bne.n	8008508 <sbrk_aligned+0x38>
 8008504:	f04f 34ff 	mov.w	r4, #4294967295
 8008508:	4620      	mov	r0, r4
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	20000708 	.word	0x20000708

08008510 <_malloc_r>:
 8008510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008514:	1ccd      	adds	r5, r1, #3
 8008516:	f025 0503 	bic.w	r5, r5, #3
 800851a:	3508      	adds	r5, #8
 800851c:	2d0c      	cmp	r5, #12
 800851e:	bf38      	it	cc
 8008520:	250c      	movcc	r5, #12
 8008522:	2d00      	cmp	r5, #0
 8008524:	4607      	mov	r7, r0
 8008526:	db01      	blt.n	800852c <_malloc_r+0x1c>
 8008528:	42a9      	cmp	r1, r5
 800852a:	d905      	bls.n	8008538 <_malloc_r+0x28>
 800852c:	230c      	movs	r3, #12
 800852e:	2600      	movs	r6, #0
 8008530:	603b      	str	r3, [r7, #0]
 8008532:	4630      	mov	r0, r6
 8008534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008538:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800860c <_malloc_r+0xfc>
 800853c:	f000 f868 	bl	8008610 <__malloc_lock>
 8008540:	f8d8 3000 	ldr.w	r3, [r8]
 8008544:	461c      	mov	r4, r3
 8008546:	bb5c      	cbnz	r4, 80085a0 <_malloc_r+0x90>
 8008548:	4629      	mov	r1, r5
 800854a:	4638      	mov	r0, r7
 800854c:	f7ff ffc0 	bl	80084d0 <sbrk_aligned>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	4604      	mov	r4, r0
 8008554:	d155      	bne.n	8008602 <_malloc_r+0xf2>
 8008556:	f8d8 4000 	ldr.w	r4, [r8]
 800855a:	4626      	mov	r6, r4
 800855c:	2e00      	cmp	r6, #0
 800855e:	d145      	bne.n	80085ec <_malloc_r+0xdc>
 8008560:	2c00      	cmp	r4, #0
 8008562:	d048      	beq.n	80085f6 <_malloc_r+0xe6>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	4631      	mov	r1, r6
 8008568:	4638      	mov	r0, r7
 800856a:	eb04 0903 	add.w	r9, r4, r3
 800856e:	f001 fdc3 	bl	800a0f8 <_sbrk_r>
 8008572:	4581      	cmp	r9, r0
 8008574:	d13f      	bne.n	80085f6 <_malloc_r+0xe6>
 8008576:	6821      	ldr	r1, [r4, #0]
 8008578:	4638      	mov	r0, r7
 800857a:	1a6d      	subs	r5, r5, r1
 800857c:	4629      	mov	r1, r5
 800857e:	f7ff ffa7 	bl	80084d0 <sbrk_aligned>
 8008582:	3001      	adds	r0, #1
 8008584:	d037      	beq.n	80085f6 <_malloc_r+0xe6>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	442b      	add	r3, r5
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	f8d8 3000 	ldr.w	r3, [r8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d038      	beq.n	8008606 <_malloc_r+0xf6>
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	42a2      	cmp	r2, r4
 8008598:	d12b      	bne.n	80085f2 <_malloc_r+0xe2>
 800859a:	2200      	movs	r2, #0
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	e00f      	b.n	80085c0 <_malloc_r+0xb0>
 80085a0:	6822      	ldr	r2, [r4, #0]
 80085a2:	1b52      	subs	r2, r2, r5
 80085a4:	d41f      	bmi.n	80085e6 <_malloc_r+0xd6>
 80085a6:	2a0b      	cmp	r2, #11
 80085a8:	d917      	bls.n	80085da <_malloc_r+0xca>
 80085aa:	1961      	adds	r1, r4, r5
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	6025      	str	r5, [r4, #0]
 80085b0:	bf18      	it	ne
 80085b2:	6059      	strne	r1, [r3, #4]
 80085b4:	6863      	ldr	r3, [r4, #4]
 80085b6:	bf08      	it	eq
 80085b8:	f8c8 1000 	streq.w	r1, [r8]
 80085bc:	5162      	str	r2, [r4, r5]
 80085be:	604b      	str	r3, [r1, #4]
 80085c0:	4638      	mov	r0, r7
 80085c2:	f104 060b 	add.w	r6, r4, #11
 80085c6:	f000 f829 	bl	800861c <__malloc_unlock>
 80085ca:	f026 0607 	bic.w	r6, r6, #7
 80085ce:	1d23      	adds	r3, r4, #4
 80085d0:	1af2      	subs	r2, r6, r3
 80085d2:	d0ae      	beq.n	8008532 <_malloc_r+0x22>
 80085d4:	1b9b      	subs	r3, r3, r6
 80085d6:	50a3      	str	r3, [r4, r2]
 80085d8:	e7ab      	b.n	8008532 <_malloc_r+0x22>
 80085da:	42a3      	cmp	r3, r4
 80085dc:	6862      	ldr	r2, [r4, #4]
 80085de:	d1dd      	bne.n	800859c <_malloc_r+0x8c>
 80085e0:	f8c8 2000 	str.w	r2, [r8]
 80085e4:	e7ec      	b.n	80085c0 <_malloc_r+0xb0>
 80085e6:	4623      	mov	r3, r4
 80085e8:	6864      	ldr	r4, [r4, #4]
 80085ea:	e7ac      	b.n	8008546 <_malloc_r+0x36>
 80085ec:	4634      	mov	r4, r6
 80085ee:	6876      	ldr	r6, [r6, #4]
 80085f0:	e7b4      	b.n	800855c <_malloc_r+0x4c>
 80085f2:	4613      	mov	r3, r2
 80085f4:	e7cc      	b.n	8008590 <_malloc_r+0x80>
 80085f6:	230c      	movs	r3, #12
 80085f8:	4638      	mov	r0, r7
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	f000 f80e 	bl	800861c <__malloc_unlock>
 8008600:	e797      	b.n	8008532 <_malloc_r+0x22>
 8008602:	6025      	str	r5, [r4, #0]
 8008604:	e7dc      	b.n	80085c0 <_malloc_r+0xb0>
 8008606:	605b      	str	r3, [r3, #4]
 8008608:	deff      	udf	#255	; 0xff
 800860a:	bf00      	nop
 800860c:	20000704 	.word	0x20000704

08008610 <__malloc_lock>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__malloc_lock+0x8>)
 8008612:	f7ff b88a 	b.w	800772a <__retarget_lock_acquire_recursive>
 8008616:	bf00      	nop
 8008618:	20000700 	.word	0x20000700

0800861c <__malloc_unlock>:
 800861c:	4801      	ldr	r0, [pc, #4]	; (8008624 <__malloc_unlock+0x8>)
 800861e:	f7ff b885 	b.w	800772c <__retarget_lock_release_recursive>
 8008622:	bf00      	nop
 8008624:	20000700 	.word	0x20000700

08008628 <_Balloc>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	69c6      	ldr	r6, [r0, #28]
 800862c:	4604      	mov	r4, r0
 800862e:	460d      	mov	r5, r1
 8008630:	b976      	cbnz	r6, 8008650 <_Balloc+0x28>
 8008632:	2010      	movs	r0, #16
 8008634:	f7ff ff44 	bl	80084c0 <malloc>
 8008638:	4602      	mov	r2, r0
 800863a:	61e0      	str	r0, [r4, #28]
 800863c:	b920      	cbnz	r0, 8008648 <_Balloc+0x20>
 800863e:	216b      	movs	r1, #107	; 0x6b
 8008640:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <_Balloc+0x78>)
 8008642:	4818      	ldr	r0, [pc, #96]	; (80086a4 <_Balloc+0x7c>)
 8008644:	f001 fd7c 	bl	800a140 <__assert_func>
 8008648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800864c:	6006      	str	r6, [r0, #0]
 800864e:	60c6      	str	r6, [r0, #12]
 8008650:	69e6      	ldr	r6, [r4, #28]
 8008652:	68f3      	ldr	r3, [r6, #12]
 8008654:	b183      	cbz	r3, 8008678 <_Balloc+0x50>
 8008656:	69e3      	ldr	r3, [r4, #28]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800865e:	b9b8      	cbnz	r0, 8008690 <_Balloc+0x68>
 8008660:	2101      	movs	r1, #1
 8008662:	fa01 f605 	lsl.w	r6, r1, r5
 8008666:	1d72      	adds	r2, r6, #5
 8008668:	4620      	mov	r0, r4
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	f001 fd86 	bl	800a17c <_calloc_r>
 8008670:	b160      	cbz	r0, 800868c <_Balloc+0x64>
 8008672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008676:	e00e      	b.n	8008696 <_Balloc+0x6e>
 8008678:	2221      	movs	r2, #33	; 0x21
 800867a:	2104      	movs	r1, #4
 800867c:	4620      	mov	r0, r4
 800867e:	f001 fd7d 	bl	800a17c <_calloc_r>
 8008682:	69e3      	ldr	r3, [r4, #28]
 8008684:	60f0      	str	r0, [r6, #12]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e4      	bne.n	8008656 <_Balloc+0x2e>
 800868c:	2000      	movs	r0, #0
 800868e:	bd70      	pop	{r4, r5, r6, pc}
 8008690:	6802      	ldr	r2, [r0, #0]
 8008692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008696:	2300      	movs	r3, #0
 8008698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800869c:	e7f7      	b.n	800868e <_Balloc+0x66>
 800869e:	bf00      	nop
 80086a0:	0800af10 	.word	0x0800af10
 80086a4:	0800af90 	.word	0x0800af90

080086a8 <_Bfree>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	69c6      	ldr	r6, [r0, #28]
 80086ac:	4605      	mov	r5, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	b976      	cbnz	r6, 80086d0 <_Bfree+0x28>
 80086b2:	2010      	movs	r0, #16
 80086b4:	f7ff ff04 	bl	80084c0 <malloc>
 80086b8:	4602      	mov	r2, r0
 80086ba:	61e8      	str	r0, [r5, #28]
 80086bc:	b920      	cbnz	r0, 80086c8 <_Bfree+0x20>
 80086be:	218f      	movs	r1, #143	; 0x8f
 80086c0:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <_Bfree+0x3c>)
 80086c2:	4809      	ldr	r0, [pc, #36]	; (80086e8 <_Bfree+0x40>)
 80086c4:	f001 fd3c 	bl	800a140 <__assert_func>
 80086c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086cc:	6006      	str	r6, [r0, #0]
 80086ce:	60c6      	str	r6, [r0, #12]
 80086d0:	b13c      	cbz	r4, 80086e2 <_Bfree+0x3a>
 80086d2:	69eb      	ldr	r3, [r5, #28]
 80086d4:	6862      	ldr	r2, [r4, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086dc:	6021      	str	r1, [r4, #0]
 80086de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	0800af10 	.word	0x0800af10
 80086e8:	0800af90 	.word	0x0800af90

080086ec <__multadd>:
 80086ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f0:	4607      	mov	r7, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	461e      	mov	r6, r3
 80086f6:	2000      	movs	r0, #0
 80086f8:	690d      	ldr	r5, [r1, #16]
 80086fa:	f101 0c14 	add.w	ip, r1, #20
 80086fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008702:	3001      	adds	r0, #1
 8008704:	b299      	uxth	r1, r3
 8008706:	fb02 6101 	mla	r1, r2, r1, r6
 800870a:	0c1e      	lsrs	r6, r3, #16
 800870c:	0c0b      	lsrs	r3, r1, #16
 800870e:	fb02 3306 	mla	r3, r2, r6, r3
 8008712:	b289      	uxth	r1, r1
 8008714:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008718:	4285      	cmp	r5, r0
 800871a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800871e:	f84c 1b04 	str.w	r1, [ip], #4
 8008722:	dcec      	bgt.n	80086fe <__multadd+0x12>
 8008724:	b30e      	cbz	r6, 800876a <__multadd+0x7e>
 8008726:	68a3      	ldr	r3, [r4, #8]
 8008728:	42ab      	cmp	r3, r5
 800872a:	dc19      	bgt.n	8008760 <__multadd+0x74>
 800872c:	6861      	ldr	r1, [r4, #4]
 800872e:	4638      	mov	r0, r7
 8008730:	3101      	adds	r1, #1
 8008732:	f7ff ff79 	bl	8008628 <_Balloc>
 8008736:	4680      	mov	r8, r0
 8008738:	b928      	cbnz	r0, 8008746 <__multadd+0x5a>
 800873a:	4602      	mov	r2, r0
 800873c:	21ba      	movs	r1, #186	; 0xba
 800873e:	4b0c      	ldr	r3, [pc, #48]	; (8008770 <__multadd+0x84>)
 8008740:	480c      	ldr	r0, [pc, #48]	; (8008774 <__multadd+0x88>)
 8008742:	f001 fcfd 	bl	800a140 <__assert_func>
 8008746:	6922      	ldr	r2, [r4, #16]
 8008748:	f104 010c 	add.w	r1, r4, #12
 800874c:	3202      	adds	r2, #2
 800874e:	0092      	lsls	r2, r2, #2
 8008750:	300c      	adds	r0, #12
 8008752:	f001 fce1 	bl	800a118 <memcpy>
 8008756:	4621      	mov	r1, r4
 8008758:	4638      	mov	r0, r7
 800875a:	f7ff ffa5 	bl	80086a8 <_Bfree>
 800875e:	4644      	mov	r4, r8
 8008760:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008764:	3501      	adds	r5, #1
 8008766:	615e      	str	r6, [r3, #20]
 8008768:	6125      	str	r5, [r4, #16]
 800876a:	4620      	mov	r0, r4
 800876c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008770:	0800af7f 	.word	0x0800af7f
 8008774:	0800af90 	.word	0x0800af90

08008778 <__s2b>:
 8008778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800877c:	4615      	mov	r5, r2
 800877e:	2209      	movs	r2, #9
 8008780:	461f      	mov	r7, r3
 8008782:	3308      	adds	r3, #8
 8008784:	460c      	mov	r4, r1
 8008786:	fb93 f3f2 	sdiv	r3, r3, r2
 800878a:	4606      	mov	r6, r0
 800878c:	2201      	movs	r2, #1
 800878e:	2100      	movs	r1, #0
 8008790:	429a      	cmp	r2, r3
 8008792:	db09      	blt.n	80087a8 <__s2b+0x30>
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff ff47 	bl	8008628 <_Balloc>
 800879a:	b940      	cbnz	r0, 80087ae <__s2b+0x36>
 800879c:	4602      	mov	r2, r0
 800879e:	21d3      	movs	r1, #211	; 0xd3
 80087a0:	4b18      	ldr	r3, [pc, #96]	; (8008804 <__s2b+0x8c>)
 80087a2:	4819      	ldr	r0, [pc, #100]	; (8008808 <__s2b+0x90>)
 80087a4:	f001 fccc 	bl	800a140 <__assert_func>
 80087a8:	0052      	lsls	r2, r2, #1
 80087aa:	3101      	adds	r1, #1
 80087ac:	e7f0      	b.n	8008790 <__s2b+0x18>
 80087ae:	9b08      	ldr	r3, [sp, #32]
 80087b0:	2d09      	cmp	r5, #9
 80087b2:	6143      	str	r3, [r0, #20]
 80087b4:	f04f 0301 	mov.w	r3, #1
 80087b8:	6103      	str	r3, [r0, #16]
 80087ba:	dd16      	ble.n	80087ea <__s2b+0x72>
 80087bc:	f104 0909 	add.w	r9, r4, #9
 80087c0:	46c8      	mov	r8, r9
 80087c2:	442c      	add	r4, r5
 80087c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087c8:	4601      	mov	r1, r0
 80087ca:	220a      	movs	r2, #10
 80087cc:	4630      	mov	r0, r6
 80087ce:	3b30      	subs	r3, #48	; 0x30
 80087d0:	f7ff ff8c 	bl	80086ec <__multadd>
 80087d4:	45a0      	cmp	r8, r4
 80087d6:	d1f5      	bne.n	80087c4 <__s2b+0x4c>
 80087d8:	f1a5 0408 	sub.w	r4, r5, #8
 80087dc:	444c      	add	r4, r9
 80087de:	1b2d      	subs	r5, r5, r4
 80087e0:	1963      	adds	r3, r4, r5
 80087e2:	42bb      	cmp	r3, r7
 80087e4:	db04      	blt.n	80087f0 <__s2b+0x78>
 80087e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ea:	2509      	movs	r5, #9
 80087ec:	340a      	adds	r4, #10
 80087ee:	e7f6      	b.n	80087de <__s2b+0x66>
 80087f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087f4:	4601      	mov	r1, r0
 80087f6:	220a      	movs	r2, #10
 80087f8:	4630      	mov	r0, r6
 80087fa:	3b30      	subs	r3, #48	; 0x30
 80087fc:	f7ff ff76 	bl	80086ec <__multadd>
 8008800:	e7ee      	b.n	80087e0 <__s2b+0x68>
 8008802:	bf00      	nop
 8008804:	0800af7f 	.word	0x0800af7f
 8008808:	0800af90 	.word	0x0800af90

0800880c <__hi0bits>:
 800880c:	0c02      	lsrs	r2, r0, #16
 800880e:	0412      	lsls	r2, r2, #16
 8008810:	4603      	mov	r3, r0
 8008812:	b9ca      	cbnz	r2, 8008848 <__hi0bits+0x3c>
 8008814:	0403      	lsls	r3, r0, #16
 8008816:	2010      	movs	r0, #16
 8008818:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800881c:	bf04      	itt	eq
 800881e:	021b      	lsleq	r3, r3, #8
 8008820:	3008      	addeq	r0, #8
 8008822:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008826:	bf04      	itt	eq
 8008828:	011b      	lsleq	r3, r3, #4
 800882a:	3004      	addeq	r0, #4
 800882c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008830:	bf04      	itt	eq
 8008832:	009b      	lsleq	r3, r3, #2
 8008834:	3002      	addeq	r0, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	db05      	blt.n	8008846 <__hi0bits+0x3a>
 800883a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800883e:	f100 0001 	add.w	r0, r0, #1
 8008842:	bf08      	it	eq
 8008844:	2020      	moveq	r0, #32
 8008846:	4770      	bx	lr
 8008848:	2000      	movs	r0, #0
 800884a:	e7e5      	b.n	8008818 <__hi0bits+0xc>

0800884c <__lo0bits>:
 800884c:	6803      	ldr	r3, [r0, #0]
 800884e:	4602      	mov	r2, r0
 8008850:	f013 0007 	ands.w	r0, r3, #7
 8008854:	d00b      	beq.n	800886e <__lo0bits+0x22>
 8008856:	07d9      	lsls	r1, r3, #31
 8008858:	d421      	bmi.n	800889e <__lo0bits+0x52>
 800885a:	0798      	lsls	r0, r3, #30
 800885c:	bf49      	itett	mi
 800885e:	085b      	lsrmi	r3, r3, #1
 8008860:	089b      	lsrpl	r3, r3, #2
 8008862:	2001      	movmi	r0, #1
 8008864:	6013      	strmi	r3, [r2, #0]
 8008866:	bf5c      	itt	pl
 8008868:	2002      	movpl	r0, #2
 800886a:	6013      	strpl	r3, [r2, #0]
 800886c:	4770      	bx	lr
 800886e:	b299      	uxth	r1, r3
 8008870:	b909      	cbnz	r1, 8008876 <__lo0bits+0x2a>
 8008872:	2010      	movs	r0, #16
 8008874:	0c1b      	lsrs	r3, r3, #16
 8008876:	b2d9      	uxtb	r1, r3
 8008878:	b909      	cbnz	r1, 800887e <__lo0bits+0x32>
 800887a:	3008      	adds	r0, #8
 800887c:	0a1b      	lsrs	r3, r3, #8
 800887e:	0719      	lsls	r1, r3, #28
 8008880:	bf04      	itt	eq
 8008882:	091b      	lsreq	r3, r3, #4
 8008884:	3004      	addeq	r0, #4
 8008886:	0799      	lsls	r1, r3, #30
 8008888:	bf04      	itt	eq
 800888a:	089b      	lsreq	r3, r3, #2
 800888c:	3002      	addeq	r0, #2
 800888e:	07d9      	lsls	r1, r3, #31
 8008890:	d403      	bmi.n	800889a <__lo0bits+0x4e>
 8008892:	085b      	lsrs	r3, r3, #1
 8008894:	f100 0001 	add.w	r0, r0, #1
 8008898:	d003      	beq.n	80088a2 <__lo0bits+0x56>
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	4770      	bx	lr
 800889e:	2000      	movs	r0, #0
 80088a0:	4770      	bx	lr
 80088a2:	2020      	movs	r0, #32
 80088a4:	4770      	bx	lr
	...

080088a8 <__i2b>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	460c      	mov	r4, r1
 80088ac:	2101      	movs	r1, #1
 80088ae:	f7ff febb 	bl	8008628 <_Balloc>
 80088b2:	4602      	mov	r2, r0
 80088b4:	b928      	cbnz	r0, 80088c2 <__i2b+0x1a>
 80088b6:	f240 1145 	movw	r1, #325	; 0x145
 80088ba:	4b04      	ldr	r3, [pc, #16]	; (80088cc <__i2b+0x24>)
 80088bc:	4804      	ldr	r0, [pc, #16]	; (80088d0 <__i2b+0x28>)
 80088be:	f001 fc3f 	bl	800a140 <__assert_func>
 80088c2:	2301      	movs	r3, #1
 80088c4:	6144      	str	r4, [r0, #20]
 80088c6:	6103      	str	r3, [r0, #16]
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	bf00      	nop
 80088cc:	0800af7f 	.word	0x0800af7f
 80088d0:	0800af90 	.word	0x0800af90

080088d4 <__multiply>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	4691      	mov	r9, r2
 80088da:	690a      	ldr	r2, [r1, #16]
 80088dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088e0:	460c      	mov	r4, r1
 80088e2:	429a      	cmp	r2, r3
 80088e4:	bfbe      	ittt	lt
 80088e6:	460b      	movlt	r3, r1
 80088e8:	464c      	movlt	r4, r9
 80088ea:	4699      	movlt	r9, r3
 80088ec:	6927      	ldr	r7, [r4, #16]
 80088ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088f2:	68a3      	ldr	r3, [r4, #8]
 80088f4:	6861      	ldr	r1, [r4, #4]
 80088f6:	eb07 060a 	add.w	r6, r7, sl
 80088fa:	42b3      	cmp	r3, r6
 80088fc:	b085      	sub	sp, #20
 80088fe:	bfb8      	it	lt
 8008900:	3101      	addlt	r1, #1
 8008902:	f7ff fe91 	bl	8008628 <_Balloc>
 8008906:	b930      	cbnz	r0, 8008916 <__multiply+0x42>
 8008908:	4602      	mov	r2, r0
 800890a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800890e:	4b43      	ldr	r3, [pc, #268]	; (8008a1c <__multiply+0x148>)
 8008910:	4843      	ldr	r0, [pc, #268]	; (8008a20 <__multiply+0x14c>)
 8008912:	f001 fc15 	bl	800a140 <__assert_func>
 8008916:	f100 0514 	add.w	r5, r0, #20
 800891a:	462b      	mov	r3, r5
 800891c:	2200      	movs	r2, #0
 800891e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008922:	4543      	cmp	r3, r8
 8008924:	d321      	bcc.n	800896a <__multiply+0x96>
 8008926:	f104 0314 	add.w	r3, r4, #20
 800892a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800892e:	f109 0314 	add.w	r3, r9, #20
 8008932:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008936:	9202      	str	r2, [sp, #8]
 8008938:	1b3a      	subs	r2, r7, r4
 800893a:	3a15      	subs	r2, #21
 800893c:	f022 0203 	bic.w	r2, r2, #3
 8008940:	3204      	adds	r2, #4
 8008942:	f104 0115 	add.w	r1, r4, #21
 8008946:	428f      	cmp	r7, r1
 8008948:	bf38      	it	cc
 800894a:	2204      	movcc	r2, #4
 800894c:	9201      	str	r2, [sp, #4]
 800894e:	9a02      	ldr	r2, [sp, #8]
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	429a      	cmp	r2, r3
 8008954:	d80c      	bhi.n	8008970 <__multiply+0x9c>
 8008956:	2e00      	cmp	r6, #0
 8008958:	dd03      	ble.n	8008962 <__multiply+0x8e>
 800895a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800895e:	2b00      	cmp	r3, #0
 8008960:	d05a      	beq.n	8008a18 <__multiply+0x144>
 8008962:	6106      	str	r6, [r0, #16]
 8008964:	b005      	add	sp, #20
 8008966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896a:	f843 2b04 	str.w	r2, [r3], #4
 800896e:	e7d8      	b.n	8008922 <__multiply+0x4e>
 8008970:	f8b3 a000 	ldrh.w	sl, [r3]
 8008974:	f1ba 0f00 	cmp.w	sl, #0
 8008978:	d023      	beq.n	80089c2 <__multiply+0xee>
 800897a:	46a9      	mov	r9, r5
 800897c:	f04f 0c00 	mov.w	ip, #0
 8008980:	f104 0e14 	add.w	lr, r4, #20
 8008984:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008988:	f8d9 1000 	ldr.w	r1, [r9]
 800898c:	fa1f fb82 	uxth.w	fp, r2
 8008990:	b289      	uxth	r1, r1
 8008992:	fb0a 110b 	mla	r1, sl, fp, r1
 8008996:	4461      	add	r1, ip
 8008998:	f8d9 c000 	ldr.w	ip, [r9]
 800899c:	0c12      	lsrs	r2, r2, #16
 800899e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80089a2:	fb0a c202 	mla	r2, sl, r2, ip
 80089a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089aa:	b289      	uxth	r1, r1
 80089ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089b0:	4577      	cmp	r7, lr
 80089b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089b6:	f849 1b04 	str.w	r1, [r9], #4
 80089ba:	d8e3      	bhi.n	8008984 <__multiply+0xb0>
 80089bc:	9a01      	ldr	r2, [sp, #4]
 80089be:	f845 c002 	str.w	ip, [r5, r2]
 80089c2:	9a03      	ldr	r2, [sp, #12]
 80089c4:	3304      	adds	r3, #4
 80089c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089ca:	f1b9 0f00 	cmp.w	r9, #0
 80089ce:	d021      	beq.n	8008a14 <__multiply+0x140>
 80089d0:	46ae      	mov	lr, r5
 80089d2:	f04f 0a00 	mov.w	sl, #0
 80089d6:	6829      	ldr	r1, [r5, #0]
 80089d8:	f104 0c14 	add.w	ip, r4, #20
 80089dc:	f8bc b000 	ldrh.w	fp, [ip]
 80089e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089e4:	b289      	uxth	r1, r1
 80089e6:	fb09 220b 	mla	r2, r9, fp, r2
 80089ea:	4452      	add	r2, sl
 80089ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089f0:	f84e 1b04 	str.w	r1, [lr], #4
 80089f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80089f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089fc:	f8be 1000 	ldrh.w	r1, [lr]
 8008a00:	4567      	cmp	r7, ip
 8008a02:	fb09 110a 	mla	r1, r9, sl, r1
 8008a06:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008a0a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a0e:	d8e5      	bhi.n	80089dc <__multiply+0x108>
 8008a10:	9a01      	ldr	r2, [sp, #4]
 8008a12:	50a9      	str	r1, [r5, r2]
 8008a14:	3504      	adds	r5, #4
 8008a16:	e79a      	b.n	800894e <__multiply+0x7a>
 8008a18:	3e01      	subs	r6, #1
 8008a1a:	e79c      	b.n	8008956 <__multiply+0x82>
 8008a1c:	0800af7f 	.word	0x0800af7f
 8008a20:	0800af90 	.word	0x0800af90

08008a24 <__pow5mult>:
 8008a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a28:	4615      	mov	r5, r2
 8008a2a:	f012 0203 	ands.w	r2, r2, #3
 8008a2e:	4606      	mov	r6, r0
 8008a30:	460f      	mov	r7, r1
 8008a32:	d007      	beq.n	8008a44 <__pow5mult+0x20>
 8008a34:	4c25      	ldr	r4, [pc, #148]	; (8008acc <__pow5mult+0xa8>)
 8008a36:	3a01      	subs	r2, #1
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a3e:	f7ff fe55 	bl	80086ec <__multadd>
 8008a42:	4607      	mov	r7, r0
 8008a44:	10ad      	asrs	r5, r5, #2
 8008a46:	d03d      	beq.n	8008ac4 <__pow5mult+0xa0>
 8008a48:	69f4      	ldr	r4, [r6, #28]
 8008a4a:	b97c      	cbnz	r4, 8008a6c <__pow5mult+0x48>
 8008a4c:	2010      	movs	r0, #16
 8008a4e:	f7ff fd37 	bl	80084c0 <malloc>
 8008a52:	4602      	mov	r2, r0
 8008a54:	61f0      	str	r0, [r6, #28]
 8008a56:	b928      	cbnz	r0, 8008a64 <__pow5mult+0x40>
 8008a58:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008a5c:	4b1c      	ldr	r3, [pc, #112]	; (8008ad0 <__pow5mult+0xac>)
 8008a5e:	481d      	ldr	r0, [pc, #116]	; (8008ad4 <__pow5mult+0xb0>)
 8008a60:	f001 fb6e 	bl	800a140 <__assert_func>
 8008a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a68:	6004      	str	r4, [r0, #0]
 8008a6a:	60c4      	str	r4, [r0, #12]
 8008a6c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a74:	b94c      	cbnz	r4, 8008a8a <__pow5mult+0x66>
 8008a76:	f240 2171 	movw	r1, #625	; 0x271
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ff14 	bl	80088a8 <__i2b>
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a88:	6003      	str	r3, [r0, #0]
 8008a8a:	f04f 0900 	mov.w	r9, #0
 8008a8e:	07eb      	lsls	r3, r5, #31
 8008a90:	d50a      	bpl.n	8008aa8 <__pow5mult+0x84>
 8008a92:	4639      	mov	r1, r7
 8008a94:	4622      	mov	r2, r4
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7ff ff1c 	bl	80088d4 <__multiply>
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff fe01 	bl	80086a8 <_Bfree>
 8008aa6:	4647      	mov	r7, r8
 8008aa8:	106d      	asrs	r5, r5, #1
 8008aaa:	d00b      	beq.n	8008ac4 <__pow5mult+0xa0>
 8008aac:	6820      	ldr	r0, [r4, #0]
 8008aae:	b938      	cbnz	r0, 8008ac0 <__pow5mult+0x9c>
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff ff0d 	bl	80088d4 <__multiply>
 8008aba:	6020      	str	r0, [r4, #0]
 8008abc:	f8c0 9000 	str.w	r9, [r0]
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	e7e4      	b.n	8008a8e <__pow5mult+0x6a>
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aca:	bf00      	nop
 8008acc:	0800b0e0 	.word	0x0800b0e0
 8008ad0:	0800af10 	.word	0x0800af10
 8008ad4:	0800af90 	.word	0x0800af90

08008ad8 <__lshift>:
 8008ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	460c      	mov	r4, r1
 8008ade:	4607      	mov	r7, r0
 8008ae0:	4691      	mov	r9, r2
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	6849      	ldr	r1, [r1, #4]
 8008ae6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008af0:	f108 0601 	add.w	r6, r8, #1
 8008af4:	42b3      	cmp	r3, r6
 8008af6:	db0b      	blt.n	8008b10 <__lshift+0x38>
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff fd95 	bl	8008628 <_Balloc>
 8008afe:	4605      	mov	r5, r0
 8008b00:	b948      	cbnz	r0, 8008b16 <__lshift+0x3e>
 8008b02:	4602      	mov	r2, r0
 8008b04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008b08:	4b27      	ldr	r3, [pc, #156]	; (8008ba8 <__lshift+0xd0>)
 8008b0a:	4828      	ldr	r0, [pc, #160]	; (8008bac <__lshift+0xd4>)
 8008b0c:	f001 fb18 	bl	800a140 <__assert_func>
 8008b10:	3101      	adds	r1, #1
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	e7ee      	b.n	8008af4 <__lshift+0x1c>
 8008b16:	2300      	movs	r3, #0
 8008b18:	f100 0114 	add.w	r1, r0, #20
 8008b1c:	f100 0210 	add.w	r2, r0, #16
 8008b20:	4618      	mov	r0, r3
 8008b22:	4553      	cmp	r3, sl
 8008b24:	db33      	blt.n	8008b8e <__lshift+0xb6>
 8008b26:	6920      	ldr	r0, [r4, #16]
 8008b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b2c:	f104 0314 	add.w	r3, r4, #20
 8008b30:	f019 091f 	ands.w	r9, r9, #31
 8008b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b3c:	d02b      	beq.n	8008b96 <__lshift+0xbe>
 8008b3e:	468a      	mov	sl, r1
 8008b40:	2200      	movs	r2, #0
 8008b42:	f1c9 0e20 	rsb	lr, r9, #32
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	fa00 f009 	lsl.w	r0, r0, r9
 8008b4c:	4310      	orrs	r0, r2
 8008b4e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b56:	459c      	cmp	ip, r3
 8008b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b5c:	d8f3      	bhi.n	8008b46 <__lshift+0x6e>
 8008b5e:	ebac 0304 	sub.w	r3, ip, r4
 8008b62:	3b15      	subs	r3, #21
 8008b64:	f023 0303 	bic.w	r3, r3, #3
 8008b68:	3304      	adds	r3, #4
 8008b6a:	f104 0015 	add.w	r0, r4, #21
 8008b6e:	4584      	cmp	ip, r0
 8008b70:	bf38      	it	cc
 8008b72:	2304      	movcc	r3, #4
 8008b74:	50ca      	str	r2, [r1, r3]
 8008b76:	b10a      	cbz	r2, 8008b7c <__lshift+0xa4>
 8008b78:	f108 0602 	add.w	r6, r8, #2
 8008b7c:	3e01      	subs	r6, #1
 8008b7e:	4638      	mov	r0, r7
 8008b80:	4621      	mov	r1, r4
 8008b82:	612e      	str	r6, [r5, #16]
 8008b84:	f7ff fd90 	bl	80086a8 <_Bfree>
 8008b88:	4628      	mov	r0, r5
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b92:	3301      	adds	r3, #1
 8008b94:	e7c5      	b.n	8008b22 <__lshift+0x4a>
 8008b96:	3904      	subs	r1, #4
 8008b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b9c:	459c      	cmp	ip, r3
 8008b9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ba2:	d8f9      	bhi.n	8008b98 <__lshift+0xc0>
 8008ba4:	e7ea      	b.n	8008b7c <__lshift+0xa4>
 8008ba6:	bf00      	nop
 8008ba8:	0800af7f 	.word	0x0800af7f
 8008bac:	0800af90 	.word	0x0800af90

08008bb0 <__mcmp>:
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	690a      	ldr	r2, [r1, #16]
 8008bb4:	6900      	ldr	r0, [r0, #16]
 8008bb6:	b530      	push	{r4, r5, lr}
 8008bb8:	1a80      	subs	r0, r0, r2
 8008bba:	d10d      	bne.n	8008bd8 <__mcmp+0x28>
 8008bbc:	3314      	adds	r3, #20
 8008bbe:	3114      	adds	r1, #20
 8008bc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bd0:	4295      	cmp	r5, r2
 8008bd2:	d002      	beq.n	8008bda <__mcmp+0x2a>
 8008bd4:	d304      	bcc.n	8008be0 <__mcmp+0x30>
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	bd30      	pop	{r4, r5, pc}
 8008bda:	42a3      	cmp	r3, r4
 8008bdc:	d3f4      	bcc.n	8008bc8 <__mcmp+0x18>
 8008bde:	e7fb      	b.n	8008bd8 <__mcmp+0x28>
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	e7f8      	b.n	8008bd8 <__mcmp+0x28>
	...

08008be8 <__mdiff>:
 8008be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	460d      	mov	r5, r1
 8008bee:	4607      	mov	r7, r0
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	4614      	mov	r4, r2
 8008bf6:	f7ff ffdb 	bl	8008bb0 <__mcmp>
 8008bfa:	1e06      	subs	r6, r0, #0
 8008bfc:	d111      	bne.n	8008c22 <__mdiff+0x3a>
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff fd11 	bl	8008628 <_Balloc>
 8008c06:	4602      	mov	r2, r0
 8008c08:	b928      	cbnz	r0, 8008c16 <__mdiff+0x2e>
 8008c0a:	f240 2137 	movw	r1, #567	; 0x237
 8008c0e:	4b3a      	ldr	r3, [pc, #232]	; (8008cf8 <__mdiff+0x110>)
 8008c10:	483a      	ldr	r0, [pc, #232]	; (8008cfc <__mdiff+0x114>)
 8008c12:	f001 fa95 	bl	800a140 <__assert_func>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c22:	bfa4      	itt	ge
 8008c24:	4623      	movge	r3, r4
 8008c26:	462c      	movge	r4, r5
 8008c28:	4638      	mov	r0, r7
 8008c2a:	6861      	ldr	r1, [r4, #4]
 8008c2c:	bfa6      	itte	ge
 8008c2e:	461d      	movge	r5, r3
 8008c30:	2600      	movge	r6, #0
 8008c32:	2601      	movlt	r6, #1
 8008c34:	f7ff fcf8 	bl	8008628 <_Balloc>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	b918      	cbnz	r0, 8008c44 <__mdiff+0x5c>
 8008c3c:	f240 2145 	movw	r1, #581	; 0x245
 8008c40:	4b2d      	ldr	r3, [pc, #180]	; (8008cf8 <__mdiff+0x110>)
 8008c42:	e7e5      	b.n	8008c10 <__mdiff+0x28>
 8008c44:	f102 0814 	add.w	r8, r2, #20
 8008c48:	46c2      	mov	sl, r8
 8008c4a:	f04f 0c00 	mov.w	ip, #0
 8008c4e:	6927      	ldr	r7, [r4, #16]
 8008c50:	60c6      	str	r6, [r0, #12]
 8008c52:	692e      	ldr	r6, [r5, #16]
 8008c54:	f104 0014 	add.w	r0, r4, #20
 8008c58:	f105 0914 	add.w	r9, r5, #20
 8008c5c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008c60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c64:	3410      	adds	r4, #16
 8008c66:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008c6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c6e:	fa1f f18b 	uxth.w	r1, fp
 8008c72:	4461      	add	r1, ip
 8008c74:	fa1f fc83 	uxth.w	ip, r3
 8008c78:	0c1b      	lsrs	r3, r3, #16
 8008c7a:	eba1 010c 	sub.w	r1, r1, ip
 8008c7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c86:	b289      	uxth	r1, r1
 8008c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c8c:	454e      	cmp	r6, r9
 8008c8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008c92:	f84a 1b04 	str.w	r1, [sl], #4
 8008c96:	d8e6      	bhi.n	8008c66 <__mdiff+0x7e>
 8008c98:	1b73      	subs	r3, r6, r5
 8008c9a:	3b15      	subs	r3, #21
 8008c9c:	f023 0303 	bic.w	r3, r3, #3
 8008ca0:	3515      	adds	r5, #21
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	42ae      	cmp	r6, r5
 8008ca6:	bf38      	it	cc
 8008ca8:	2304      	movcc	r3, #4
 8008caa:	4418      	add	r0, r3
 8008cac:	4443      	add	r3, r8
 8008cae:	461e      	mov	r6, r3
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	4575      	cmp	r5, lr
 8008cb4:	d30e      	bcc.n	8008cd4 <__mdiff+0xec>
 8008cb6:	f10e 0103 	add.w	r1, lr, #3
 8008cba:	1a09      	subs	r1, r1, r0
 8008cbc:	f021 0103 	bic.w	r1, r1, #3
 8008cc0:	3803      	subs	r0, #3
 8008cc2:	4586      	cmp	lr, r0
 8008cc4:	bf38      	it	cc
 8008cc6:	2100      	movcc	r1, #0
 8008cc8:	440b      	add	r3, r1
 8008cca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cce:	b189      	cbz	r1, 8008cf4 <__mdiff+0x10c>
 8008cd0:	6117      	str	r7, [r2, #16]
 8008cd2:	e7a3      	b.n	8008c1c <__mdiff+0x34>
 8008cd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8008cd8:	fa1f f188 	uxth.w	r1, r8
 8008cdc:	4461      	add	r1, ip
 8008cde:	140c      	asrs	r4, r1, #16
 8008ce0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ce4:	b289      	uxth	r1, r1
 8008ce6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008cea:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008cee:	f846 1b04 	str.w	r1, [r6], #4
 8008cf2:	e7de      	b.n	8008cb2 <__mdiff+0xca>
 8008cf4:	3f01      	subs	r7, #1
 8008cf6:	e7e8      	b.n	8008cca <__mdiff+0xe2>
 8008cf8:	0800af7f 	.word	0x0800af7f
 8008cfc:	0800af90 	.word	0x0800af90

08008d00 <__ulp>:
 8008d00:	4b0e      	ldr	r3, [pc, #56]	; (8008d3c <__ulp+0x3c>)
 8008d02:	400b      	ands	r3, r1
 8008d04:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	dc08      	bgt.n	8008d1e <__ulp+0x1e>
 8008d0c:	425b      	negs	r3, r3
 8008d0e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008d12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d16:	da04      	bge.n	8008d22 <__ulp+0x22>
 8008d18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d1c:	4113      	asrs	r3, r2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	e008      	b.n	8008d34 <__ulp+0x34>
 8008d22:	f1a2 0314 	sub.w	r3, r2, #20
 8008d26:	2b1e      	cmp	r3, #30
 8008d28:	bfd6      	itet	le
 8008d2a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008d2e:	2201      	movgt	r2, #1
 8008d30:	40da      	lsrle	r2, r3
 8008d32:	2300      	movs	r3, #0
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	7ff00000 	.word	0x7ff00000

08008d40 <__b2d>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	6905      	ldr	r5, [r0, #16]
 8008d44:	f100 0714 	add.w	r7, r0, #20
 8008d48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008d4c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008d50:	1f2e      	subs	r6, r5, #4
 8008d52:	4620      	mov	r0, r4
 8008d54:	f7ff fd5a 	bl	800880c <__hi0bits>
 8008d58:	f1c0 0220 	rsb	r2, r0, #32
 8008d5c:	280a      	cmp	r0, #10
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008dcc <__b2d+0x8c>
 8008d64:	600a      	str	r2, [r1, #0]
 8008d66:	dc12      	bgt.n	8008d8e <__b2d+0x4e>
 8008d68:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d6c:	fa24 f20e 	lsr.w	r2, r4, lr
 8008d70:	42b7      	cmp	r7, r6
 8008d72:	ea42 010c 	orr.w	r1, r2, ip
 8008d76:	bf2c      	ite	cs
 8008d78:	2200      	movcs	r2, #0
 8008d7a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008d7e:	3315      	adds	r3, #21
 8008d80:	fa04 f303 	lsl.w	r3, r4, r3
 8008d84:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d8e:	42b7      	cmp	r7, r6
 8008d90:	bf2e      	itee	cs
 8008d92:	2200      	movcs	r2, #0
 8008d94:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008d98:	f1a5 0608 	subcc.w	r6, r5, #8
 8008d9c:	3b0b      	subs	r3, #11
 8008d9e:	d012      	beq.n	8008dc6 <__b2d+0x86>
 8008da0:	f1c3 0520 	rsb	r5, r3, #32
 8008da4:	fa22 f105 	lsr.w	r1, r2, r5
 8008da8:	409c      	lsls	r4, r3
 8008daa:	430c      	orrs	r4, r1
 8008dac:	42be      	cmp	r6, r7
 8008dae:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8008db2:	bf94      	ite	ls
 8008db4:	2400      	movls	r4, #0
 8008db6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008dba:	409a      	lsls	r2, r3
 8008dbc:	40ec      	lsrs	r4, r5
 8008dbe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008dc2:	4322      	orrs	r2, r4
 8008dc4:	e7e1      	b.n	8008d8a <__b2d+0x4a>
 8008dc6:	ea44 010c 	orr.w	r1, r4, ip
 8008dca:	e7de      	b.n	8008d8a <__b2d+0x4a>
 8008dcc:	3ff00000 	.word	0x3ff00000

08008dd0 <__d2b>:
 8008dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	4617      	mov	r7, r2
 8008dd6:	461c      	mov	r4, r3
 8008dd8:	9e08      	ldr	r6, [sp, #32]
 8008dda:	f7ff fc25 	bl	8008628 <_Balloc>
 8008dde:	4605      	mov	r5, r0
 8008de0:	b930      	cbnz	r0, 8008df0 <__d2b+0x20>
 8008de2:	4602      	mov	r2, r0
 8008de4:	f240 310f 	movw	r1, #783	; 0x30f
 8008de8:	4b22      	ldr	r3, [pc, #136]	; (8008e74 <__d2b+0xa4>)
 8008dea:	4823      	ldr	r0, [pc, #140]	; (8008e78 <__d2b+0xa8>)
 8008dec:	f001 f9a8 	bl	800a140 <__assert_func>
 8008df0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008df4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008df8:	bb24      	cbnz	r4, 8008e44 <__d2b+0x74>
 8008dfa:	2f00      	cmp	r7, #0
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	d026      	beq.n	8008e4e <__d2b+0x7e>
 8008e00:	4668      	mov	r0, sp
 8008e02:	9700      	str	r7, [sp, #0]
 8008e04:	f7ff fd22 	bl	800884c <__lo0bits>
 8008e08:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e0c:	b1e8      	cbz	r0, 8008e4a <__d2b+0x7a>
 8008e0e:	f1c0 0320 	rsb	r3, r0, #32
 8008e12:	fa02 f303 	lsl.w	r3, r2, r3
 8008e16:	430b      	orrs	r3, r1
 8008e18:	40c2      	lsrs	r2, r0
 8008e1a:	616b      	str	r3, [r5, #20]
 8008e1c:	9201      	str	r2, [sp, #4]
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bf14      	ite	ne
 8008e24:	2102      	movne	r1, #2
 8008e26:	2101      	moveq	r1, #1
 8008e28:	61ab      	str	r3, [r5, #24]
 8008e2a:	6129      	str	r1, [r5, #16]
 8008e2c:	b1bc      	cbz	r4, 8008e5e <__d2b+0x8e>
 8008e2e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008e32:	4404      	add	r4, r0
 8008e34:	6034      	str	r4, [r6, #0]
 8008e36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3c:	6018      	str	r0, [r3, #0]
 8008e3e:	4628      	mov	r0, r5
 8008e40:	b003      	add	sp, #12
 8008e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e48:	e7d7      	b.n	8008dfa <__d2b+0x2a>
 8008e4a:	6169      	str	r1, [r5, #20]
 8008e4c:	e7e7      	b.n	8008e1e <__d2b+0x4e>
 8008e4e:	a801      	add	r0, sp, #4
 8008e50:	f7ff fcfc 	bl	800884c <__lo0bits>
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	2101      	movs	r1, #1
 8008e58:	616b      	str	r3, [r5, #20]
 8008e5a:	3020      	adds	r0, #32
 8008e5c:	e7e5      	b.n	8008e2a <__d2b+0x5a>
 8008e5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e62:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008e66:	6030      	str	r0, [r6, #0]
 8008e68:	6918      	ldr	r0, [r3, #16]
 8008e6a:	f7ff fccf 	bl	800880c <__hi0bits>
 8008e6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008e72:	e7e2      	b.n	8008e3a <__d2b+0x6a>
 8008e74:	0800af7f 	.word	0x0800af7f
 8008e78:	0800af90 	.word	0x0800af90

08008e7c <__ratio>:
 8008e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	4688      	mov	r8, r1
 8008e82:	4669      	mov	r1, sp
 8008e84:	4681      	mov	r9, r0
 8008e86:	f7ff ff5b 	bl	8008d40 <__b2d>
 8008e8a:	460f      	mov	r7, r1
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	a901      	add	r1, sp, #4
 8008e94:	f7ff ff54 	bl	8008d40 <__b2d>
 8008e98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ea0:	468b      	mov	fp, r1
 8008ea2:	eba3 0c02 	sub.w	ip, r3, r2
 8008ea6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bfd5      	itete	le
 8008eb4:	460a      	movle	r2, r1
 8008eb6:	462a      	movgt	r2, r5
 8008eb8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ebc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ec0:	bfd8      	it	le
 8008ec2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008ec6:	465b      	mov	r3, fp
 8008ec8:	4602      	mov	r2, r0
 8008eca:	4639      	mov	r1, r7
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7f7 fc99 	bl	8000804 <__aeabi_ddiv>
 8008ed2:	b003      	add	sp, #12
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ed8 <__copybits>:
 8008ed8:	3901      	subs	r1, #1
 8008eda:	b570      	push	{r4, r5, r6, lr}
 8008edc:	1149      	asrs	r1, r1, #5
 8008ede:	6914      	ldr	r4, [r2, #16]
 8008ee0:	3101      	adds	r1, #1
 8008ee2:	f102 0314 	add.w	r3, r2, #20
 8008ee6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008eea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008eee:	1f05      	subs	r5, r0, #4
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d30c      	bcc.n	8008f0e <__copybits+0x36>
 8008ef4:	1aa3      	subs	r3, r4, r2
 8008ef6:	3b11      	subs	r3, #17
 8008ef8:	f023 0303 	bic.w	r3, r3, #3
 8008efc:	3211      	adds	r2, #17
 8008efe:	42a2      	cmp	r2, r4
 8008f00:	bf88      	it	hi
 8008f02:	2300      	movhi	r3, #0
 8008f04:	4418      	add	r0, r3
 8008f06:	2300      	movs	r3, #0
 8008f08:	4288      	cmp	r0, r1
 8008f0a:	d305      	bcc.n	8008f18 <__copybits+0x40>
 8008f0c:	bd70      	pop	{r4, r5, r6, pc}
 8008f0e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f12:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f16:	e7eb      	b.n	8008ef0 <__copybits+0x18>
 8008f18:	f840 3b04 	str.w	r3, [r0], #4
 8008f1c:	e7f4      	b.n	8008f08 <__copybits+0x30>

08008f1e <__any_on>:
 8008f1e:	f100 0214 	add.w	r2, r0, #20
 8008f22:	6900      	ldr	r0, [r0, #16]
 8008f24:	114b      	asrs	r3, r1, #5
 8008f26:	4298      	cmp	r0, r3
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	db11      	blt.n	8008f50 <__any_on+0x32>
 8008f2c:	dd0a      	ble.n	8008f44 <__any_on+0x26>
 8008f2e:	f011 011f 	ands.w	r1, r1, #31
 8008f32:	d007      	beq.n	8008f44 <__any_on+0x26>
 8008f34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f38:	fa24 f001 	lsr.w	r0, r4, r1
 8008f3c:	fa00 f101 	lsl.w	r1, r0, r1
 8008f40:	428c      	cmp	r4, r1
 8008f42:	d10b      	bne.n	8008f5c <__any_on+0x3e>
 8008f44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d803      	bhi.n	8008f54 <__any_on+0x36>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bd10      	pop	{r4, pc}
 8008f50:	4603      	mov	r3, r0
 8008f52:	e7f7      	b.n	8008f44 <__any_on+0x26>
 8008f54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	d0f5      	beq.n	8008f48 <__any_on+0x2a>
 8008f5c:	2001      	movs	r0, #1
 8008f5e:	e7f6      	b.n	8008f4e <__any_on+0x30>

08008f60 <sulp>:
 8008f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f64:	460f      	mov	r7, r1
 8008f66:	4690      	mov	r8, r2
 8008f68:	f7ff feca 	bl	8008d00 <__ulp>
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	460d      	mov	r5, r1
 8008f70:	f1b8 0f00 	cmp.w	r8, #0
 8008f74:	d011      	beq.n	8008f9a <sulp+0x3a>
 8008f76:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008f7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dd0b      	ble.n	8008f9a <sulp+0x3a>
 8008f82:	2400      	movs	r4, #0
 8008f84:	051b      	lsls	r3, r3, #20
 8008f86:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 fb0d 	bl	80005b0 <__aeabi_dmul>
 8008f96:	4604      	mov	r4, r0
 8008f98:	460d      	mov	r5, r1
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa2:	0000      	movs	r0, r0
 8008fa4:	0000      	movs	r0, r0
	...

08008fa8 <_strtod_l>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	b09f      	sub	sp, #124	; 0x7c
 8008fae:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	921a      	str	r2, [sp, #104]	; 0x68
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	f04f 0800 	mov.w	r8, #0
 8008fbc:	f04f 0900 	mov.w	r9, #0
 8008fc0:	460a      	mov	r2, r1
 8008fc2:	9219      	str	r2, [sp, #100]	; 0x64
 8008fc4:	7811      	ldrb	r1, [r2, #0]
 8008fc6:	292b      	cmp	r1, #43	; 0x2b
 8008fc8:	d04a      	beq.n	8009060 <_strtod_l+0xb8>
 8008fca:	d838      	bhi.n	800903e <_strtod_l+0x96>
 8008fcc:	290d      	cmp	r1, #13
 8008fce:	d832      	bhi.n	8009036 <_strtod_l+0x8e>
 8008fd0:	2908      	cmp	r1, #8
 8008fd2:	d832      	bhi.n	800903a <_strtod_l+0x92>
 8008fd4:	2900      	cmp	r1, #0
 8008fd6:	d03b      	beq.n	8009050 <_strtod_l+0xa8>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	920e      	str	r2, [sp, #56]	; 0x38
 8008fdc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008fde:	7832      	ldrb	r2, [r6, #0]
 8008fe0:	2a30      	cmp	r2, #48	; 0x30
 8008fe2:	f040 80b2 	bne.w	800914a <_strtod_l+0x1a2>
 8008fe6:	7872      	ldrb	r2, [r6, #1]
 8008fe8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008fec:	2a58      	cmp	r2, #88	; 0x58
 8008fee:	d16e      	bne.n	80090ce <_strtod_l+0x126>
 8008ff0:	9302      	str	r3, [sp, #8]
 8008ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	ab1a      	add	r3, sp, #104	; 0x68
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	4a8c      	ldr	r2, [pc, #560]	; (8009230 <_strtod_l+0x288>)
 8008ffe:	ab1b      	add	r3, sp, #108	; 0x6c
 8009000:	a919      	add	r1, sp, #100	; 0x64
 8009002:	f001 f937 	bl	800a274 <__gethex>
 8009006:	f010 070f 	ands.w	r7, r0, #15
 800900a:	4605      	mov	r5, r0
 800900c:	d005      	beq.n	800901a <_strtod_l+0x72>
 800900e:	2f06      	cmp	r7, #6
 8009010:	d128      	bne.n	8009064 <_strtod_l+0xbc>
 8009012:	2300      	movs	r3, #0
 8009014:	3601      	adds	r6, #1
 8009016:	9619      	str	r6, [sp, #100]	; 0x64
 8009018:	930e      	str	r3, [sp, #56]	; 0x38
 800901a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f040 85a0 	bne.w	8009b62 <_strtod_l+0xbba>
 8009022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009024:	b1cb      	cbz	r3, 800905a <_strtod_l+0xb2>
 8009026:	4642      	mov	r2, r8
 8009028:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	b01f      	add	sp, #124	; 0x7c
 8009032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009036:	2920      	cmp	r1, #32
 8009038:	d1ce      	bne.n	8008fd8 <_strtod_l+0x30>
 800903a:	3201      	adds	r2, #1
 800903c:	e7c1      	b.n	8008fc2 <_strtod_l+0x1a>
 800903e:	292d      	cmp	r1, #45	; 0x2d
 8009040:	d1ca      	bne.n	8008fd8 <_strtod_l+0x30>
 8009042:	2101      	movs	r1, #1
 8009044:	910e      	str	r1, [sp, #56]	; 0x38
 8009046:	1c51      	adds	r1, r2, #1
 8009048:	9119      	str	r1, [sp, #100]	; 0x64
 800904a:	7852      	ldrb	r2, [r2, #1]
 800904c:	2a00      	cmp	r2, #0
 800904e:	d1c5      	bne.n	8008fdc <_strtod_l+0x34>
 8009050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009052:	9519      	str	r5, [sp, #100]	; 0x64
 8009054:	2b00      	cmp	r3, #0
 8009056:	f040 8582 	bne.w	8009b5e <_strtod_l+0xbb6>
 800905a:	4642      	mov	r2, r8
 800905c:	464b      	mov	r3, r9
 800905e:	e7e5      	b.n	800902c <_strtod_l+0x84>
 8009060:	2100      	movs	r1, #0
 8009062:	e7ef      	b.n	8009044 <_strtod_l+0x9c>
 8009064:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009066:	b13a      	cbz	r2, 8009078 <_strtod_l+0xd0>
 8009068:	2135      	movs	r1, #53	; 0x35
 800906a:	a81c      	add	r0, sp, #112	; 0x70
 800906c:	f7ff ff34 	bl	8008ed8 <__copybits>
 8009070:	4620      	mov	r0, r4
 8009072:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009074:	f7ff fb18 	bl	80086a8 <_Bfree>
 8009078:	3f01      	subs	r7, #1
 800907a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800907c:	2f04      	cmp	r7, #4
 800907e:	d806      	bhi.n	800908e <_strtod_l+0xe6>
 8009080:	e8df f007 	tbb	[pc, r7]
 8009084:	201d0314 	.word	0x201d0314
 8009088:	14          	.byte	0x14
 8009089:	00          	.byte	0x00
 800908a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800908e:	05e9      	lsls	r1, r5, #23
 8009090:	bf48      	it	mi
 8009092:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009096:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800909a:	0d1b      	lsrs	r3, r3, #20
 800909c:	051b      	lsls	r3, r3, #20
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1bb      	bne.n	800901a <_strtod_l+0x72>
 80090a2:	f7fe fb17 	bl	80076d4 <__errno>
 80090a6:	2322      	movs	r3, #34	; 0x22
 80090a8:	6003      	str	r3, [r0, #0]
 80090aa:	e7b6      	b.n	800901a <_strtod_l+0x72>
 80090ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80090b0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80090b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80090bc:	e7e7      	b.n	800908e <_strtod_l+0xe6>
 80090be:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009234 <_strtod_l+0x28c>
 80090c2:	e7e4      	b.n	800908e <_strtod_l+0xe6>
 80090c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80090c8:	f04f 38ff 	mov.w	r8, #4294967295
 80090cc:	e7df      	b.n	800908e <_strtod_l+0xe6>
 80090ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	9219      	str	r2, [sp, #100]	; 0x64
 80090d4:	785b      	ldrb	r3, [r3, #1]
 80090d6:	2b30      	cmp	r3, #48	; 0x30
 80090d8:	d0f9      	beq.n	80090ce <_strtod_l+0x126>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d09d      	beq.n	800901a <_strtod_l+0x72>
 80090de:	2301      	movs	r3, #1
 80090e0:	f04f 0a00 	mov.w	sl, #0
 80090e4:	220a      	movs	r2, #10
 80090e6:	46d3      	mov	fp, sl
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ec:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80090f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80090f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80090f4:	7806      	ldrb	r6, [r0, #0]
 80090f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80090fa:	b2d9      	uxtb	r1, r3
 80090fc:	2909      	cmp	r1, #9
 80090fe:	d926      	bls.n	800914e <_strtod_l+0x1a6>
 8009100:	2201      	movs	r2, #1
 8009102:	494d      	ldr	r1, [pc, #308]	; (8009238 <_strtod_l+0x290>)
 8009104:	f000 ffe6 	bl	800a0d4 <strncmp>
 8009108:	2800      	cmp	r0, #0
 800910a:	d030      	beq.n	800916e <_strtod_l+0x1c6>
 800910c:	2000      	movs	r0, #0
 800910e:	4632      	mov	r2, r6
 8009110:	4603      	mov	r3, r0
 8009112:	465e      	mov	r6, fp
 8009114:	9008      	str	r0, [sp, #32]
 8009116:	2a65      	cmp	r2, #101	; 0x65
 8009118:	d001      	beq.n	800911e <_strtod_l+0x176>
 800911a:	2a45      	cmp	r2, #69	; 0x45
 800911c:	d113      	bne.n	8009146 <_strtod_l+0x19e>
 800911e:	b91e      	cbnz	r6, 8009128 <_strtod_l+0x180>
 8009120:	9a05      	ldr	r2, [sp, #20]
 8009122:	4302      	orrs	r2, r0
 8009124:	d094      	beq.n	8009050 <_strtod_l+0xa8>
 8009126:	2600      	movs	r6, #0
 8009128:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800912a:	1c6a      	adds	r2, r5, #1
 800912c:	9219      	str	r2, [sp, #100]	; 0x64
 800912e:	786a      	ldrb	r2, [r5, #1]
 8009130:	2a2b      	cmp	r2, #43	; 0x2b
 8009132:	d074      	beq.n	800921e <_strtod_l+0x276>
 8009134:	2a2d      	cmp	r2, #45	; 0x2d
 8009136:	d078      	beq.n	800922a <_strtod_l+0x282>
 8009138:	f04f 0c00 	mov.w	ip, #0
 800913c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009140:	2909      	cmp	r1, #9
 8009142:	d97f      	bls.n	8009244 <_strtod_l+0x29c>
 8009144:	9519      	str	r5, [sp, #100]	; 0x64
 8009146:	2700      	movs	r7, #0
 8009148:	e09e      	b.n	8009288 <_strtod_l+0x2e0>
 800914a:	2300      	movs	r3, #0
 800914c:	e7c8      	b.n	80090e0 <_strtod_l+0x138>
 800914e:	f1bb 0f08 	cmp.w	fp, #8
 8009152:	bfd8      	it	le
 8009154:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009156:	f100 0001 	add.w	r0, r0, #1
 800915a:	bfd6      	itet	le
 800915c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009160:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009164:	930a      	strle	r3, [sp, #40]	; 0x28
 8009166:	f10b 0b01 	add.w	fp, fp, #1
 800916a:	9019      	str	r0, [sp, #100]	; 0x64
 800916c:	e7c1      	b.n	80090f2 <_strtod_l+0x14a>
 800916e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	9219      	str	r2, [sp, #100]	; 0x64
 8009174:	785a      	ldrb	r2, [r3, #1]
 8009176:	f1bb 0f00 	cmp.w	fp, #0
 800917a:	d037      	beq.n	80091ec <_strtod_l+0x244>
 800917c:	465e      	mov	r6, fp
 800917e:	9008      	str	r0, [sp, #32]
 8009180:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009184:	2b09      	cmp	r3, #9
 8009186:	d912      	bls.n	80091ae <_strtod_l+0x206>
 8009188:	2301      	movs	r3, #1
 800918a:	e7c4      	b.n	8009116 <_strtod_l+0x16e>
 800918c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800918e:	3001      	adds	r0, #1
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	9219      	str	r2, [sp, #100]	; 0x64
 8009194:	785a      	ldrb	r2, [r3, #1]
 8009196:	2a30      	cmp	r2, #48	; 0x30
 8009198:	d0f8      	beq.n	800918c <_strtod_l+0x1e4>
 800919a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800919e:	2b08      	cmp	r3, #8
 80091a0:	f200 84e4 	bhi.w	8009b6c <_strtod_l+0xbc4>
 80091a4:	9008      	str	r0, [sp, #32]
 80091a6:	2000      	movs	r0, #0
 80091a8:	4606      	mov	r6, r0
 80091aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80091ae:	3a30      	subs	r2, #48	; 0x30
 80091b0:	f100 0301 	add.w	r3, r0, #1
 80091b4:	d014      	beq.n	80091e0 <_strtod_l+0x238>
 80091b6:	9908      	ldr	r1, [sp, #32]
 80091b8:	eb00 0c06 	add.w	ip, r0, r6
 80091bc:	4419      	add	r1, r3
 80091be:	9108      	str	r1, [sp, #32]
 80091c0:	4633      	mov	r3, r6
 80091c2:	210a      	movs	r1, #10
 80091c4:	4563      	cmp	r3, ip
 80091c6:	d113      	bne.n	80091f0 <_strtod_l+0x248>
 80091c8:	1833      	adds	r3, r6, r0
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	f106 0601 	add.w	r6, r6, #1
 80091d0:	4406      	add	r6, r0
 80091d2:	dc1a      	bgt.n	800920a <_strtod_l+0x262>
 80091d4:	230a      	movs	r3, #10
 80091d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091d8:	fb03 2301 	mla	r3, r3, r1, r2
 80091dc:	930a      	str	r3, [sp, #40]	; 0x28
 80091de:	2300      	movs	r3, #0
 80091e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80091e2:	4618      	mov	r0, r3
 80091e4:	1c51      	adds	r1, r2, #1
 80091e6:	9119      	str	r1, [sp, #100]	; 0x64
 80091e8:	7852      	ldrb	r2, [r2, #1]
 80091ea:	e7c9      	b.n	8009180 <_strtod_l+0x1d8>
 80091ec:	4658      	mov	r0, fp
 80091ee:	e7d2      	b.n	8009196 <_strtod_l+0x1ee>
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	f103 0301 	add.w	r3, r3, #1
 80091f6:	dc03      	bgt.n	8009200 <_strtod_l+0x258>
 80091f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80091fa:	434f      	muls	r7, r1
 80091fc:	970a      	str	r7, [sp, #40]	; 0x28
 80091fe:	e7e1      	b.n	80091c4 <_strtod_l+0x21c>
 8009200:	2b10      	cmp	r3, #16
 8009202:	bfd8      	it	le
 8009204:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009208:	e7dc      	b.n	80091c4 <_strtod_l+0x21c>
 800920a:	2e10      	cmp	r6, #16
 800920c:	bfdc      	itt	le
 800920e:	230a      	movle	r3, #10
 8009210:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009214:	e7e3      	b.n	80091de <_strtod_l+0x236>
 8009216:	2300      	movs	r3, #0
 8009218:	9308      	str	r3, [sp, #32]
 800921a:	2301      	movs	r3, #1
 800921c:	e780      	b.n	8009120 <_strtod_l+0x178>
 800921e:	f04f 0c00 	mov.w	ip, #0
 8009222:	1caa      	adds	r2, r5, #2
 8009224:	9219      	str	r2, [sp, #100]	; 0x64
 8009226:	78aa      	ldrb	r2, [r5, #2]
 8009228:	e788      	b.n	800913c <_strtod_l+0x194>
 800922a:	f04f 0c01 	mov.w	ip, #1
 800922e:	e7f8      	b.n	8009222 <_strtod_l+0x27a>
 8009230:	0800b0f0 	.word	0x0800b0f0
 8009234:	7ff00000 	.word	0x7ff00000
 8009238:	0800b0ec 	.word	0x0800b0ec
 800923c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800923e:	1c51      	adds	r1, r2, #1
 8009240:	9119      	str	r1, [sp, #100]	; 0x64
 8009242:	7852      	ldrb	r2, [r2, #1]
 8009244:	2a30      	cmp	r2, #48	; 0x30
 8009246:	d0f9      	beq.n	800923c <_strtod_l+0x294>
 8009248:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800924c:	2908      	cmp	r1, #8
 800924e:	f63f af7a 	bhi.w	8009146 <_strtod_l+0x19e>
 8009252:	3a30      	subs	r2, #48	; 0x30
 8009254:	9209      	str	r2, [sp, #36]	; 0x24
 8009256:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009258:	920c      	str	r2, [sp, #48]	; 0x30
 800925a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800925c:	1c57      	adds	r7, r2, #1
 800925e:	9719      	str	r7, [sp, #100]	; 0x64
 8009260:	7852      	ldrb	r2, [r2, #1]
 8009262:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009266:	f1be 0f09 	cmp.w	lr, #9
 800926a:	d938      	bls.n	80092de <_strtod_l+0x336>
 800926c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800926e:	1a7f      	subs	r7, r7, r1
 8009270:	2f08      	cmp	r7, #8
 8009272:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009276:	dc03      	bgt.n	8009280 <_strtod_l+0x2d8>
 8009278:	9909      	ldr	r1, [sp, #36]	; 0x24
 800927a:	428f      	cmp	r7, r1
 800927c:	bfa8      	it	ge
 800927e:	460f      	movge	r7, r1
 8009280:	f1bc 0f00 	cmp.w	ip, #0
 8009284:	d000      	beq.n	8009288 <_strtod_l+0x2e0>
 8009286:	427f      	negs	r7, r7
 8009288:	2e00      	cmp	r6, #0
 800928a:	d14f      	bne.n	800932c <_strtod_l+0x384>
 800928c:	9905      	ldr	r1, [sp, #20]
 800928e:	4301      	orrs	r1, r0
 8009290:	f47f aec3 	bne.w	800901a <_strtod_l+0x72>
 8009294:	2b00      	cmp	r3, #0
 8009296:	f47f aedb 	bne.w	8009050 <_strtod_l+0xa8>
 800929a:	2a69      	cmp	r2, #105	; 0x69
 800929c:	d029      	beq.n	80092f2 <_strtod_l+0x34a>
 800929e:	dc26      	bgt.n	80092ee <_strtod_l+0x346>
 80092a0:	2a49      	cmp	r2, #73	; 0x49
 80092a2:	d026      	beq.n	80092f2 <_strtod_l+0x34a>
 80092a4:	2a4e      	cmp	r2, #78	; 0x4e
 80092a6:	f47f aed3 	bne.w	8009050 <_strtod_l+0xa8>
 80092aa:	499a      	ldr	r1, [pc, #616]	; (8009514 <_strtod_l+0x56c>)
 80092ac:	a819      	add	r0, sp, #100	; 0x64
 80092ae:	f001 fa23 	bl	800a6f8 <__match>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	f43f aecc 	beq.w	8009050 <_strtod_l+0xa8>
 80092b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b28      	cmp	r3, #40	; 0x28
 80092be:	d12f      	bne.n	8009320 <_strtod_l+0x378>
 80092c0:	4995      	ldr	r1, [pc, #596]	; (8009518 <_strtod_l+0x570>)
 80092c2:	aa1c      	add	r2, sp, #112	; 0x70
 80092c4:	a819      	add	r0, sp, #100	; 0x64
 80092c6:	f001 fa2b 	bl	800a720 <__hexnan>
 80092ca:	2805      	cmp	r0, #5
 80092cc:	d128      	bne.n	8009320 <_strtod_l+0x378>
 80092ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80092d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80092d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80092dc:	e69d      	b.n	800901a <_strtod_l+0x72>
 80092de:	210a      	movs	r1, #10
 80092e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092e2:	fb01 2107 	mla	r1, r1, r7, r2
 80092e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80092ea:	9209      	str	r2, [sp, #36]	; 0x24
 80092ec:	e7b5      	b.n	800925a <_strtod_l+0x2b2>
 80092ee:	2a6e      	cmp	r2, #110	; 0x6e
 80092f0:	e7d9      	b.n	80092a6 <_strtod_l+0x2fe>
 80092f2:	498a      	ldr	r1, [pc, #552]	; (800951c <_strtod_l+0x574>)
 80092f4:	a819      	add	r0, sp, #100	; 0x64
 80092f6:	f001 f9ff 	bl	800a6f8 <__match>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	f43f aea8 	beq.w	8009050 <_strtod_l+0xa8>
 8009300:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009302:	4987      	ldr	r1, [pc, #540]	; (8009520 <_strtod_l+0x578>)
 8009304:	3b01      	subs	r3, #1
 8009306:	a819      	add	r0, sp, #100	; 0x64
 8009308:	9319      	str	r3, [sp, #100]	; 0x64
 800930a:	f001 f9f5 	bl	800a6f8 <__match>
 800930e:	b910      	cbnz	r0, 8009316 <_strtod_l+0x36e>
 8009310:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009312:	3301      	adds	r3, #1
 8009314:	9319      	str	r3, [sp, #100]	; 0x64
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009524 <_strtod_l+0x57c>
 800931e:	e67c      	b.n	800901a <_strtod_l+0x72>
 8009320:	4881      	ldr	r0, [pc, #516]	; (8009528 <_strtod_l+0x580>)
 8009322:	f000 ff07 	bl	800a134 <nan>
 8009326:	4680      	mov	r8, r0
 8009328:	4689      	mov	r9, r1
 800932a:	e676      	b.n	800901a <_strtod_l+0x72>
 800932c:	9b08      	ldr	r3, [sp, #32]
 800932e:	f1bb 0f00 	cmp.w	fp, #0
 8009332:	bf08      	it	eq
 8009334:	46b3      	moveq	fp, r6
 8009336:	1afb      	subs	r3, r7, r3
 8009338:	2e10      	cmp	r6, #16
 800933a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800933c:	4635      	mov	r5, r6
 800933e:	9309      	str	r3, [sp, #36]	; 0x24
 8009340:	bfa8      	it	ge
 8009342:	2510      	movge	r5, #16
 8009344:	f7f7 f8ba 	bl	80004bc <__aeabi_ui2d>
 8009348:	2e09      	cmp	r6, #9
 800934a:	4680      	mov	r8, r0
 800934c:	4689      	mov	r9, r1
 800934e:	dd13      	ble.n	8009378 <_strtod_l+0x3d0>
 8009350:	4b76      	ldr	r3, [pc, #472]	; (800952c <_strtod_l+0x584>)
 8009352:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009356:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800935a:	f7f7 f929 	bl	80005b0 <__aeabi_dmul>
 800935e:	4680      	mov	r8, r0
 8009360:	4650      	mov	r0, sl
 8009362:	4689      	mov	r9, r1
 8009364:	f7f7 f8aa 	bl	80004bc <__aeabi_ui2d>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4640      	mov	r0, r8
 800936e:	4649      	mov	r1, r9
 8009370:	f7f6 ff68 	bl	8000244 <__adddf3>
 8009374:	4680      	mov	r8, r0
 8009376:	4689      	mov	r9, r1
 8009378:	2e0f      	cmp	r6, #15
 800937a:	dc36      	bgt.n	80093ea <_strtod_l+0x442>
 800937c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	f43f ae4b 	beq.w	800901a <_strtod_l+0x72>
 8009384:	dd22      	ble.n	80093cc <_strtod_l+0x424>
 8009386:	2b16      	cmp	r3, #22
 8009388:	dc09      	bgt.n	800939e <_strtod_l+0x3f6>
 800938a:	4968      	ldr	r1, [pc, #416]	; (800952c <_strtod_l+0x584>)
 800938c:	4642      	mov	r2, r8
 800938e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009392:	464b      	mov	r3, r9
 8009394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009398:	f7f7 f90a 	bl	80005b0 <__aeabi_dmul>
 800939c:	e7c3      	b.n	8009326 <_strtod_l+0x37e>
 800939e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093a0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80093a4:	4293      	cmp	r3, r2
 80093a6:	db20      	blt.n	80093ea <_strtod_l+0x442>
 80093a8:	4c60      	ldr	r4, [pc, #384]	; (800952c <_strtod_l+0x584>)
 80093aa:	f1c6 060f 	rsb	r6, r6, #15
 80093ae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80093b2:	4642      	mov	r2, r8
 80093b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b8:	464b      	mov	r3, r9
 80093ba:	f7f7 f8f9 	bl	80005b0 <__aeabi_dmul>
 80093be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c0:	1b9e      	subs	r6, r3, r6
 80093c2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80093c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093ca:	e7e5      	b.n	8009398 <_strtod_l+0x3f0>
 80093cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ce:	3316      	adds	r3, #22
 80093d0:	db0b      	blt.n	80093ea <_strtod_l+0x442>
 80093d2:	9b08      	ldr	r3, [sp, #32]
 80093d4:	4640      	mov	r0, r8
 80093d6:	1bdf      	subs	r7, r3, r7
 80093d8:	4b54      	ldr	r3, [pc, #336]	; (800952c <_strtod_l+0x584>)
 80093da:	4649      	mov	r1, r9
 80093dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80093e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093e4:	f7f7 fa0e 	bl	8000804 <__aeabi_ddiv>
 80093e8:	e79d      	b.n	8009326 <_strtod_l+0x37e>
 80093ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ec:	1b75      	subs	r5, r6, r5
 80093ee:	441d      	add	r5, r3
 80093f0:	2d00      	cmp	r5, #0
 80093f2:	dd70      	ble.n	80094d6 <_strtod_l+0x52e>
 80093f4:	f015 030f 	ands.w	r3, r5, #15
 80093f8:	d00a      	beq.n	8009410 <_strtod_l+0x468>
 80093fa:	494c      	ldr	r1, [pc, #304]	; (800952c <_strtod_l+0x584>)
 80093fc:	4642      	mov	r2, r8
 80093fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009406:	464b      	mov	r3, r9
 8009408:	f7f7 f8d2 	bl	80005b0 <__aeabi_dmul>
 800940c:	4680      	mov	r8, r0
 800940e:	4689      	mov	r9, r1
 8009410:	f035 050f 	bics.w	r5, r5, #15
 8009414:	d04d      	beq.n	80094b2 <_strtod_l+0x50a>
 8009416:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800941a:	dd22      	ble.n	8009462 <_strtod_l+0x4ba>
 800941c:	2600      	movs	r6, #0
 800941e:	46b3      	mov	fp, r6
 8009420:	960b      	str	r6, [sp, #44]	; 0x2c
 8009422:	9608      	str	r6, [sp, #32]
 8009424:	2322      	movs	r3, #34	; 0x22
 8009426:	f04f 0800 	mov.w	r8, #0
 800942a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009524 <_strtod_l+0x57c>
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009432:	2b00      	cmp	r3, #0
 8009434:	f43f adf1 	beq.w	800901a <_strtod_l+0x72>
 8009438:	4620      	mov	r0, r4
 800943a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800943c:	f7ff f934 	bl	80086a8 <_Bfree>
 8009440:	4620      	mov	r0, r4
 8009442:	9908      	ldr	r1, [sp, #32]
 8009444:	f7ff f930 	bl	80086a8 <_Bfree>
 8009448:	4659      	mov	r1, fp
 800944a:	4620      	mov	r0, r4
 800944c:	f7ff f92c 	bl	80086a8 <_Bfree>
 8009450:	4620      	mov	r0, r4
 8009452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009454:	f7ff f928 	bl	80086a8 <_Bfree>
 8009458:	4631      	mov	r1, r6
 800945a:	4620      	mov	r0, r4
 800945c:	f7ff f924 	bl	80086a8 <_Bfree>
 8009460:	e5db      	b.n	800901a <_strtod_l+0x72>
 8009462:	4b33      	ldr	r3, [pc, #204]	; (8009530 <_strtod_l+0x588>)
 8009464:	4640      	mov	r0, r8
 8009466:	9305      	str	r3, [sp, #20]
 8009468:	2300      	movs	r3, #0
 800946a:	4649      	mov	r1, r9
 800946c:	469a      	mov	sl, r3
 800946e:	112d      	asrs	r5, r5, #4
 8009470:	2d01      	cmp	r5, #1
 8009472:	dc21      	bgt.n	80094b8 <_strtod_l+0x510>
 8009474:	b10b      	cbz	r3, 800947a <_strtod_l+0x4d2>
 8009476:	4680      	mov	r8, r0
 8009478:	4689      	mov	r9, r1
 800947a:	492d      	ldr	r1, [pc, #180]	; (8009530 <_strtod_l+0x588>)
 800947c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009480:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009484:	4642      	mov	r2, r8
 8009486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800948a:	464b      	mov	r3, r9
 800948c:	f7f7 f890 	bl	80005b0 <__aeabi_dmul>
 8009490:	4b24      	ldr	r3, [pc, #144]	; (8009524 <_strtod_l+0x57c>)
 8009492:	460a      	mov	r2, r1
 8009494:	400b      	ands	r3, r1
 8009496:	4927      	ldr	r1, [pc, #156]	; (8009534 <_strtod_l+0x58c>)
 8009498:	4680      	mov	r8, r0
 800949a:	428b      	cmp	r3, r1
 800949c:	d8be      	bhi.n	800941c <_strtod_l+0x474>
 800949e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80094a2:	428b      	cmp	r3, r1
 80094a4:	bf86      	itte	hi
 80094a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80094aa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009538 <_strtod_l+0x590>
 80094ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80094b2:	2300      	movs	r3, #0
 80094b4:	9305      	str	r3, [sp, #20]
 80094b6:	e07b      	b.n	80095b0 <_strtod_l+0x608>
 80094b8:	07ea      	lsls	r2, r5, #31
 80094ba:	d505      	bpl.n	80094c8 <_strtod_l+0x520>
 80094bc:	9b05      	ldr	r3, [sp, #20]
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f7f7 f875 	bl	80005b0 <__aeabi_dmul>
 80094c6:	2301      	movs	r3, #1
 80094c8:	9a05      	ldr	r2, [sp, #20]
 80094ca:	f10a 0a01 	add.w	sl, sl, #1
 80094ce:	3208      	adds	r2, #8
 80094d0:	106d      	asrs	r5, r5, #1
 80094d2:	9205      	str	r2, [sp, #20]
 80094d4:	e7cc      	b.n	8009470 <_strtod_l+0x4c8>
 80094d6:	d0ec      	beq.n	80094b2 <_strtod_l+0x50a>
 80094d8:	426d      	negs	r5, r5
 80094da:	f015 020f 	ands.w	r2, r5, #15
 80094de:	d00a      	beq.n	80094f6 <_strtod_l+0x54e>
 80094e0:	4b12      	ldr	r3, [pc, #72]	; (800952c <_strtod_l+0x584>)
 80094e2:	4640      	mov	r0, r8
 80094e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094e8:	4649      	mov	r1, r9
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f7 f989 	bl	8000804 <__aeabi_ddiv>
 80094f2:	4680      	mov	r8, r0
 80094f4:	4689      	mov	r9, r1
 80094f6:	112d      	asrs	r5, r5, #4
 80094f8:	d0db      	beq.n	80094b2 <_strtod_l+0x50a>
 80094fa:	2d1f      	cmp	r5, #31
 80094fc:	dd1e      	ble.n	800953c <_strtod_l+0x594>
 80094fe:	2600      	movs	r6, #0
 8009500:	46b3      	mov	fp, r6
 8009502:	960b      	str	r6, [sp, #44]	; 0x2c
 8009504:	9608      	str	r6, [sp, #32]
 8009506:	2322      	movs	r3, #34	; 0x22
 8009508:	f04f 0800 	mov.w	r8, #0
 800950c:	f04f 0900 	mov.w	r9, #0
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	e78d      	b.n	8009430 <_strtod_l+0x488>
 8009514:	0800aed7 	.word	0x0800aed7
 8009518:	0800b104 	.word	0x0800b104
 800951c:	0800aecf 	.word	0x0800aecf
 8009520:	0800af06 	.word	0x0800af06
 8009524:	7ff00000 	.word	0x7ff00000
 8009528:	0800b295 	.word	0x0800b295
 800952c:	0800b018 	.word	0x0800b018
 8009530:	0800aff0 	.word	0x0800aff0
 8009534:	7ca00000 	.word	0x7ca00000
 8009538:	7fefffff 	.word	0x7fefffff
 800953c:	f015 0310 	ands.w	r3, r5, #16
 8009540:	bf18      	it	ne
 8009542:	236a      	movne	r3, #106	; 0x6a
 8009544:	4640      	mov	r0, r8
 8009546:	9305      	str	r3, [sp, #20]
 8009548:	4649      	mov	r1, r9
 800954a:	2300      	movs	r3, #0
 800954c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009818 <_strtod_l+0x870>
 8009550:	07ea      	lsls	r2, r5, #31
 8009552:	d504      	bpl.n	800955e <_strtod_l+0x5b6>
 8009554:	e9da 2300 	ldrd	r2, r3, [sl]
 8009558:	f7f7 f82a 	bl	80005b0 <__aeabi_dmul>
 800955c:	2301      	movs	r3, #1
 800955e:	106d      	asrs	r5, r5, #1
 8009560:	f10a 0a08 	add.w	sl, sl, #8
 8009564:	d1f4      	bne.n	8009550 <_strtod_l+0x5a8>
 8009566:	b10b      	cbz	r3, 800956c <_strtod_l+0x5c4>
 8009568:	4680      	mov	r8, r0
 800956a:	4689      	mov	r9, r1
 800956c:	9b05      	ldr	r3, [sp, #20]
 800956e:	b1bb      	cbz	r3, 80095a0 <_strtod_l+0x5f8>
 8009570:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009574:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009578:	2b00      	cmp	r3, #0
 800957a:	4649      	mov	r1, r9
 800957c:	dd10      	ble.n	80095a0 <_strtod_l+0x5f8>
 800957e:	2b1f      	cmp	r3, #31
 8009580:	f340 8128 	ble.w	80097d4 <_strtod_l+0x82c>
 8009584:	2b34      	cmp	r3, #52	; 0x34
 8009586:	bfd8      	it	le
 8009588:	f04f 33ff 	movle.w	r3, #4294967295
 800958c:	f04f 0800 	mov.w	r8, #0
 8009590:	bfcf      	iteee	gt
 8009592:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009596:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800959a:	4093      	lslle	r3, r2
 800959c:	ea03 0901 	andle.w	r9, r3, r1
 80095a0:	2200      	movs	r2, #0
 80095a2:	2300      	movs	r3, #0
 80095a4:	4640      	mov	r0, r8
 80095a6:	4649      	mov	r1, r9
 80095a8:	f7f7 fa6a 	bl	8000a80 <__aeabi_dcmpeq>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1a6      	bne.n	80094fe <_strtod_l+0x556>
 80095b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b2:	465a      	mov	r2, fp
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	4620      	mov	r0, r4
 80095b8:	4633      	mov	r3, r6
 80095ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095bc:	f7ff f8dc 	bl	8008778 <__s2b>
 80095c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f43f af2a 	beq.w	800941c <_strtod_l+0x474>
 80095c8:	2600      	movs	r6, #0
 80095ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095cc:	9b08      	ldr	r3, [sp, #32]
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	eba3 0307 	sub.w	r3, r3, r7
 80095d4:	bfa8      	it	ge
 80095d6:	2300      	movge	r3, #0
 80095d8:	46b3      	mov	fp, r6
 80095da:	9312      	str	r3, [sp, #72]	; 0x48
 80095dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80095e0:	9316      	str	r3, [sp, #88]	; 0x58
 80095e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e4:	4620      	mov	r0, r4
 80095e6:	6859      	ldr	r1, [r3, #4]
 80095e8:	f7ff f81e 	bl	8008628 <_Balloc>
 80095ec:	9008      	str	r0, [sp, #32]
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f43f af18 	beq.w	8009424 <_strtod_l+0x47c>
 80095f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f6:	300c      	adds	r0, #12
 80095f8:	691a      	ldr	r2, [r3, #16]
 80095fa:	f103 010c 	add.w	r1, r3, #12
 80095fe:	3202      	adds	r2, #2
 8009600:	0092      	lsls	r2, r2, #2
 8009602:	f000 fd89 	bl	800a118 <memcpy>
 8009606:	ab1c      	add	r3, sp, #112	; 0x70
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	ab1b      	add	r3, sp, #108	; 0x6c
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	4642      	mov	r2, r8
 8009610:	464b      	mov	r3, r9
 8009612:	4620      	mov	r0, r4
 8009614:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009618:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800961c:	f7ff fbd8 	bl	8008dd0 <__d2b>
 8009620:	901a      	str	r0, [sp, #104]	; 0x68
 8009622:	2800      	cmp	r0, #0
 8009624:	f43f aefe 	beq.w	8009424 <_strtod_l+0x47c>
 8009628:	2101      	movs	r1, #1
 800962a:	4620      	mov	r0, r4
 800962c:	f7ff f93c 	bl	80088a8 <__i2b>
 8009630:	4683      	mov	fp, r0
 8009632:	2800      	cmp	r0, #0
 8009634:	f43f aef6 	beq.w	8009424 <_strtod_l+0x47c>
 8009638:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800963a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800963c:	2f00      	cmp	r7, #0
 800963e:	bfab      	itete	ge
 8009640:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009642:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009644:	eb07 0a03 	addge.w	sl, r7, r3
 8009648:	1bdd      	sublt	r5, r3, r7
 800964a:	9b05      	ldr	r3, [sp, #20]
 800964c:	bfa8      	it	ge
 800964e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009650:	eba7 0703 	sub.w	r7, r7, r3
 8009654:	4417      	add	r7, r2
 8009656:	4b71      	ldr	r3, [pc, #452]	; (800981c <_strtod_l+0x874>)
 8009658:	f107 37ff 	add.w	r7, r7, #4294967295
 800965c:	bfb8      	it	lt
 800965e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009662:	429f      	cmp	r7, r3
 8009664:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009668:	f280 80c7 	bge.w	80097fa <_strtod_l+0x852>
 800966c:	1bdb      	subs	r3, r3, r7
 800966e:	2b1f      	cmp	r3, #31
 8009670:	f04f 0101 	mov.w	r1, #1
 8009674:	eba2 0203 	sub.w	r2, r2, r3
 8009678:	f300 80b3 	bgt.w	80097e2 <_strtod_l+0x83a>
 800967c:	fa01 f303 	lsl.w	r3, r1, r3
 8009680:	9313      	str	r3, [sp, #76]	; 0x4c
 8009682:	2300      	movs	r3, #0
 8009684:	9310      	str	r3, [sp, #64]	; 0x40
 8009686:	eb0a 0702 	add.w	r7, sl, r2
 800968a:	9b05      	ldr	r3, [sp, #20]
 800968c:	45ba      	cmp	sl, r7
 800968e:	4415      	add	r5, r2
 8009690:	441d      	add	r5, r3
 8009692:	4653      	mov	r3, sl
 8009694:	bfa8      	it	ge
 8009696:	463b      	movge	r3, r7
 8009698:	42ab      	cmp	r3, r5
 800969a:	bfa8      	it	ge
 800969c:	462b      	movge	r3, r5
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfc2      	ittt	gt
 80096a2:	1aff      	subgt	r7, r7, r3
 80096a4:	1aed      	subgt	r5, r5, r3
 80096a6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80096aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dd17      	ble.n	80096e0 <_strtod_l+0x738>
 80096b0:	4659      	mov	r1, fp
 80096b2:	461a      	mov	r2, r3
 80096b4:	4620      	mov	r0, r4
 80096b6:	f7ff f9b5 	bl	8008a24 <__pow5mult>
 80096ba:	4683      	mov	fp, r0
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f aeb1 	beq.w	8009424 <_strtod_l+0x47c>
 80096c2:	4601      	mov	r1, r0
 80096c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80096c6:	4620      	mov	r0, r4
 80096c8:	f7ff f904 	bl	80088d4 <__multiply>
 80096cc:	900a      	str	r0, [sp, #40]	; 0x28
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f43f aea8 	beq.w	8009424 <_strtod_l+0x47c>
 80096d4:	4620      	mov	r0, r4
 80096d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096d8:	f7fe ffe6 	bl	80086a8 <_Bfree>
 80096dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096de:	931a      	str	r3, [sp, #104]	; 0x68
 80096e0:	2f00      	cmp	r7, #0
 80096e2:	f300 808f 	bgt.w	8009804 <_strtod_l+0x85c>
 80096e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dd08      	ble.n	80096fe <_strtod_l+0x756>
 80096ec:	4620      	mov	r0, r4
 80096ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80096f0:	9908      	ldr	r1, [sp, #32]
 80096f2:	f7ff f997 	bl	8008a24 <__pow5mult>
 80096f6:	9008      	str	r0, [sp, #32]
 80096f8:	2800      	cmp	r0, #0
 80096fa:	f43f ae93 	beq.w	8009424 <_strtod_l+0x47c>
 80096fe:	2d00      	cmp	r5, #0
 8009700:	dd08      	ble.n	8009714 <_strtod_l+0x76c>
 8009702:	462a      	mov	r2, r5
 8009704:	4620      	mov	r0, r4
 8009706:	9908      	ldr	r1, [sp, #32]
 8009708:	f7ff f9e6 	bl	8008ad8 <__lshift>
 800970c:	9008      	str	r0, [sp, #32]
 800970e:	2800      	cmp	r0, #0
 8009710:	f43f ae88 	beq.w	8009424 <_strtod_l+0x47c>
 8009714:	f1ba 0f00 	cmp.w	sl, #0
 8009718:	dd08      	ble.n	800972c <_strtod_l+0x784>
 800971a:	4659      	mov	r1, fp
 800971c:	4652      	mov	r2, sl
 800971e:	4620      	mov	r0, r4
 8009720:	f7ff f9da 	bl	8008ad8 <__lshift>
 8009724:	4683      	mov	fp, r0
 8009726:	2800      	cmp	r0, #0
 8009728:	f43f ae7c 	beq.w	8009424 <_strtod_l+0x47c>
 800972c:	4620      	mov	r0, r4
 800972e:	9a08      	ldr	r2, [sp, #32]
 8009730:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009732:	f7ff fa59 	bl	8008be8 <__mdiff>
 8009736:	4606      	mov	r6, r0
 8009738:	2800      	cmp	r0, #0
 800973a:	f43f ae73 	beq.w	8009424 <_strtod_l+0x47c>
 800973e:	2500      	movs	r5, #0
 8009740:	68c3      	ldr	r3, [r0, #12]
 8009742:	4659      	mov	r1, fp
 8009744:	60c5      	str	r5, [r0, #12]
 8009746:	930a      	str	r3, [sp, #40]	; 0x28
 8009748:	f7ff fa32 	bl	8008bb0 <__mcmp>
 800974c:	42a8      	cmp	r0, r5
 800974e:	da6b      	bge.n	8009828 <_strtod_l+0x880>
 8009750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009752:	ea53 0308 	orrs.w	r3, r3, r8
 8009756:	f040 808f 	bne.w	8009878 <_strtod_l+0x8d0>
 800975a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800975e:	2b00      	cmp	r3, #0
 8009760:	f040 808a 	bne.w	8009878 <_strtod_l+0x8d0>
 8009764:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009768:	0d1b      	lsrs	r3, r3, #20
 800976a:	051b      	lsls	r3, r3, #20
 800976c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009770:	f240 8082 	bls.w	8009878 <_strtod_l+0x8d0>
 8009774:	6973      	ldr	r3, [r6, #20]
 8009776:	b913      	cbnz	r3, 800977e <_strtod_l+0x7d6>
 8009778:	6933      	ldr	r3, [r6, #16]
 800977a:	2b01      	cmp	r3, #1
 800977c:	dd7c      	ble.n	8009878 <_strtod_l+0x8d0>
 800977e:	4631      	mov	r1, r6
 8009780:	2201      	movs	r2, #1
 8009782:	4620      	mov	r0, r4
 8009784:	f7ff f9a8 	bl	8008ad8 <__lshift>
 8009788:	4659      	mov	r1, fp
 800978a:	4606      	mov	r6, r0
 800978c:	f7ff fa10 	bl	8008bb0 <__mcmp>
 8009790:	2800      	cmp	r0, #0
 8009792:	dd71      	ble.n	8009878 <_strtod_l+0x8d0>
 8009794:	9905      	ldr	r1, [sp, #20]
 8009796:	464b      	mov	r3, r9
 8009798:	4a21      	ldr	r2, [pc, #132]	; (8009820 <_strtod_l+0x878>)
 800979a:	2900      	cmp	r1, #0
 800979c:	f000 808d 	beq.w	80098ba <_strtod_l+0x912>
 80097a0:	ea02 0109 	and.w	r1, r2, r9
 80097a4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80097a8:	f300 8087 	bgt.w	80098ba <_strtod_l+0x912>
 80097ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80097b0:	f77f aea9 	ble.w	8009506 <_strtod_l+0x55e>
 80097b4:	4640      	mov	r0, r8
 80097b6:	4649      	mov	r1, r9
 80097b8:	4b1a      	ldr	r3, [pc, #104]	; (8009824 <_strtod_l+0x87c>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	f7f6 fef8 	bl	80005b0 <__aeabi_dmul>
 80097c0:	4b17      	ldr	r3, [pc, #92]	; (8009820 <_strtod_l+0x878>)
 80097c2:	4680      	mov	r8, r0
 80097c4:	400b      	ands	r3, r1
 80097c6:	4689      	mov	r9, r1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f47f ae35 	bne.w	8009438 <_strtod_l+0x490>
 80097ce:	2322      	movs	r3, #34	; 0x22
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	e631      	b.n	8009438 <_strtod_l+0x490>
 80097d4:	f04f 32ff 	mov.w	r2, #4294967295
 80097d8:	fa02 f303 	lsl.w	r3, r2, r3
 80097dc:	ea03 0808 	and.w	r8, r3, r8
 80097e0:	e6de      	b.n	80095a0 <_strtod_l+0x5f8>
 80097e2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80097e6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80097ea:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80097ee:	37e2      	adds	r7, #226	; 0xe2
 80097f0:	fa01 f307 	lsl.w	r3, r1, r7
 80097f4:	9310      	str	r3, [sp, #64]	; 0x40
 80097f6:	9113      	str	r1, [sp, #76]	; 0x4c
 80097f8:	e745      	b.n	8009686 <_strtod_l+0x6de>
 80097fa:	2300      	movs	r3, #0
 80097fc:	9310      	str	r3, [sp, #64]	; 0x40
 80097fe:	2301      	movs	r3, #1
 8009800:	9313      	str	r3, [sp, #76]	; 0x4c
 8009802:	e740      	b.n	8009686 <_strtod_l+0x6de>
 8009804:	463a      	mov	r2, r7
 8009806:	4620      	mov	r0, r4
 8009808:	991a      	ldr	r1, [sp, #104]	; 0x68
 800980a:	f7ff f965 	bl	8008ad8 <__lshift>
 800980e:	901a      	str	r0, [sp, #104]	; 0x68
 8009810:	2800      	cmp	r0, #0
 8009812:	f47f af68 	bne.w	80096e6 <_strtod_l+0x73e>
 8009816:	e605      	b.n	8009424 <_strtod_l+0x47c>
 8009818:	0800b118 	.word	0x0800b118
 800981c:	fffffc02 	.word	0xfffffc02
 8009820:	7ff00000 	.word	0x7ff00000
 8009824:	39500000 	.word	0x39500000
 8009828:	46ca      	mov	sl, r9
 800982a:	d165      	bne.n	80098f8 <_strtod_l+0x950>
 800982c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800982e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009832:	b352      	cbz	r2, 800988a <_strtod_l+0x8e2>
 8009834:	4a9e      	ldr	r2, [pc, #632]	; (8009ab0 <_strtod_l+0xb08>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d12a      	bne.n	8009890 <_strtod_l+0x8e8>
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	4641      	mov	r1, r8
 800983e:	b1fb      	cbz	r3, 8009880 <_strtod_l+0x8d8>
 8009840:	4b9c      	ldr	r3, [pc, #624]	; (8009ab4 <_strtod_l+0xb0c>)
 8009842:	f04f 32ff 	mov.w	r2, #4294967295
 8009846:	ea09 0303 	and.w	r3, r9, r3
 800984a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800984e:	d81a      	bhi.n	8009886 <_strtod_l+0x8de>
 8009850:	0d1b      	lsrs	r3, r3, #20
 8009852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009856:	fa02 f303 	lsl.w	r3, r2, r3
 800985a:	4299      	cmp	r1, r3
 800985c:	d118      	bne.n	8009890 <_strtod_l+0x8e8>
 800985e:	4b96      	ldr	r3, [pc, #600]	; (8009ab8 <_strtod_l+0xb10>)
 8009860:	459a      	cmp	sl, r3
 8009862:	d102      	bne.n	800986a <_strtod_l+0x8c2>
 8009864:	3101      	adds	r1, #1
 8009866:	f43f addd 	beq.w	8009424 <_strtod_l+0x47c>
 800986a:	f04f 0800 	mov.w	r8, #0
 800986e:	4b91      	ldr	r3, [pc, #580]	; (8009ab4 <_strtod_l+0xb0c>)
 8009870:	ea0a 0303 	and.w	r3, sl, r3
 8009874:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009878:	9b05      	ldr	r3, [sp, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d19a      	bne.n	80097b4 <_strtod_l+0x80c>
 800987e:	e5db      	b.n	8009438 <_strtod_l+0x490>
 8009880:	f04f 33ff 	mov.w	r3, #4294967295
 8009884:	e7e9      	b.n	800985a <_strtod_l+0x8b2>
 8009886:	4613      	mov	r3, r2
 8009888:	e7e7      	b.n	800985a <_strtod_l+0x8b2>
 800988a:	ea53 0308 	orrs.w	r3, r3, r8
 800988e:	d081      	beq.n	8009794 <_strtod_l+0x7ec>
 8009890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009892:	b1e3      	cbz	r3, 80098ce <_strtod_l+0x926>
 8009894:	ea13 0f0a 	tst.w	r3, sl
 8009898:	d0ee      	beq.n	8009878 <_strtod_l+0x8d0>
 800989a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800989c:	4640      	mov	r0, r8
 800989e:	4649      	mov	r1, r9
 80098a0:	9a05      	ldr	r2, [sp, #20]
 80098a2:	b1c3      	cbz	r3, 80098d6 <_strtod_l+0x92e>
 80098a4:	f7ff fb5c 	bl	8008f60 <sulp>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80098ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80098b0:	f7f6 fcc8 	bl	8000244 <__adddf3>
 80098b4:	4680      	mov	r8, r0
 80098b6:	4689      	mov	r9, r1
 80098b8:	e7de      	b.n	8009878 <_strtod_l+0x8d0>
 80098ba:	4013      	ands	r3, r2
 80098bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80098c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80098c4:	f04f 38ff 	mov.w	r8, #4294967295
 80098c8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80098cc:	e7d4      	b.n	8009878 <_strtod_l+0x8d0>
 80098ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d0:	ea13 0f08 	tst.w	r3, r8
 80098d4:	e7e0      	b.n	8009898 <_strtod_l+0x8f0>
 80098d6:	f7ff fb43 	bl	8008f60 <sulp>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80098e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80098e2:	f7f6 fcad 	bl	8000240 <__aeabi_dsub>
 80098e6:	2200      	movs	r2, #0
 80098e8:	2300      	movs	r3, #0
 80098ea:	4680      	mov	r8, r0
 80098ec:	4689      	mov	r9, r1
 80098ee:	f7f7 f8c7 	bl	8000a80 <__aeabi_dcmpeq>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d0c0      	beq.n	8009878 <_strtod_l+0x8d0>
 80098f6:	e606      	b.n	8009506 <_strtod_l+0x55e>
 80098f8:	4659      	mov	r1, fp
 80098fa:	4630      	mov	r0, r6
 80098fc:	f7ff fabe 	bl	8008e7c <__ratio>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009908:	2200      	movs	r2, #0
 800990a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800990e:	f7f7 f8cb 	bl	8000aa8 <__aeabi_dcmple>
 8009912:	2800      	cmp	r0, #0
 8009914:	d06f      	beq.n	80099f6 <_strtod_l+0xa4e>
 8009916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	d17c      	bne.n	8009a16 <_strtod_l+0xa6e>
 800991c:	f1b8 0f00 	cmp.w	r8, #0
 8009920:	d159      	bne.n	80099d6 <_strtod_l+0xa2e>
 8009922:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009926:	2b00      	cmp	r3, #0
 8009928:	d17b      	bne.n	8009a22 <_strtod_l+0xa7a>
 800992a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800992e:	2200      	movs	r2, #0
 8009930:	4b62      	ldr	r3, [pc, #392]	; (8009abc <_strtod_l+0xb14>)
 8009932:	f7f7 f8af 	bl	8000a94 <__aeabi_dcmplt>
 8009936:	2800      	cmp	r0, #0
 8009938:	d15a      	bne.n	80099f0 <_strtod_l+0xa48>
 800993a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800993e:	2200      	movs	r2, #0
 8009940:	4b5f      	ldr	r3, [pc, #380]	; (8009ac0 <_strtod_l+0xb18>)
 8009942:	f7f6 fe35 	bl	80005b0 <__aeabi_dmul>
 8009946:	4605      	mov	r5, r0
 8009948:	460f      	mov	r7, r1
 800994a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800994e:	9506      	str	r5, [sp, #24]
 8009950:	9307      	str	r3, [sp, #28]
 8009952:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009956:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800995a:	4b56      	ldr	r3, [pc, #344]	; (8009ab4 <_strtod_l+0xb0c>)
 800995c:	4a55      	ldr	r2, [pc, #340]	; (8009ab4 <_strtod_l+0xb0c>)
 800995e:	ea0a 0303 	and.w	r3, sl, r3
 8009962:	9313      	str	r3, [sp, #76]	; 0x4c
 8009964:	4b57      	ldr	r3, [pc, #348]	; (8009ac4 <_strtod_l+0xb1c>)
 8009966:	ea0a 0202 	and.w	r2, sl, r2
 800996a:	429a      	cmp	r2, r3
 800996c:	f040 80b0 	bne.w	8009ad0 <_strtod_l+0xb28>
 8009970:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009974:	4640      	mov	r0, r8
 8009976:	4649      	mov	r1, r9
 8009978:	f7ff f9c2 	bl	8008d00 <__ulp>
 800997c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009980:	f7f6 fe16 	bl	80005b0 <__aeabi_dmul>
 8009984:	4642      	mov	r2, r8
 8009986:	464b      	mov	r3, r9
 8009988:	f7f6 fc5c 	bl	8000244 <__adddf3>
 800998c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009ab4 <_strtod_l+0xb0c>
 8009990:	4a4d      	ldr	r2, [pc, #308]	; (8009ac8 <_strtod_l+0xb20>)
 8009992:	ea01 0a0a 	and.w	sl, r1, sl
 8009996:	4592      	cmp	sl, r2
 8009998:	4680      	mov	r8, r0
 800999a:	d948      	bls.n	8009a2e <_strtod_l+0xa86>
 800999c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800999e:	4b46      	ldr	r3, [pc, #280]	; (8009ab8 <_strtod_l+0xb10>)
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d103      	bne.n	80099ac <_strtod_l+0xa04>
 80099a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a6:	3301      	adds	r3, #1
 80099a8:	f43f ad3c 	beq.w	8009424 <_strtod_l+0x47c>
 80099ac:	f04f 38ff 	mov.w	r8, #4294967295
 80099b0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009ab8 <_strtod_l+0xb10>
 80099b4:	4620      	mov	r0, r4
 80099b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80099b8:	f7fe fe76 	bl	80086a8 <_Bfree>
 80099bc:	4620      	mov	r0, r4
 80099be:	9908      	ldr	r1, [sp, #32]
 80099c0:	f7fe fe72 	bl	80086a8 <_Bfree>
 80099c4:	4659      	mov	r1, fp
 80099c6:	4620      	mov	r0, r4
 80099c8:	f7fe fe6e 	bl	80086a8 <_Bfree>
 80099cc:	4631      	mov	r1, r6
 80099ce:	4620      	mov	r0, r4
 80099d0:	f7fe fe6a 	bl	80086a8 <_Bfree>
 80099d4:	e605      	b.n	80095e2 <_strtod_l+0x63a>
 80099d6:	f1b8 0f01 	cmp.w	r8, #1
 80099da:	d103      	bne.n	80099e4 <_strtod_l+0xa3c>
 80099dc:	f1b9 0f00 	cmp.w	r9, #0
 80099e0:	f43f ad91 	beq.w	8009506 <_strtod_l+0x55e>
 80099e4:	2200      	movs	r2, #0
 80099e6:	4b39      	ldr	r3, [pc, #228]	; (8009acc <_strtod_l+0xb24>)
 80099e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80099ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099ee:	e016      	b.n	8009a1e <_strtod_l+0xa76>
 80099f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80099f2:	4f33      	ldr	r7, [pc, #204]	; (8009ac0 <_strtod_l+0xb18>)
 80099f4:	e7a9      	b.n	800994a <_strtod_l+0x9a2>
 80099f6:	4b32      	ldr	r3, [pc, #200]	; (8009ac0 <_strtod_l+0xb18>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099fe:	f7f6 fdd7 	bl	80005b0 <__aeabi_dmul>
 8009a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a04:	4605      	mov	r5, r0
 8009a06:	460f      	mov	r7, r1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d09e      	beq.n	800994a <_strtod_l+0x9a2>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a14:	e79d      	b.n	8009952 <_strtod_l+0x9aa>
 8009a16:	2200      	movs	r2, #0
 8009a18:	4b28      	ldr	r3, [pc, #160]	; (8009abc <_strtod_l+0xb14>)
 8009a1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a1e:	4f27      	ldr	r7, [pc, #156]	; (8009abc <_strtod_l+0xb14>)
 8009a20:	e797      	b.n	8009952 <_strtod_l+0x9aa>
 8009a22:	2200      	movs	r2, #0
 8009a24:	4b29      	ldr	r3, [pc, #164]	; (8009acc <_strtod_l+0xb24>)
 8009a26:	4645      	mov	r5, r8
 8009a28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a2c:	e7f7      	b.n	8009a1e <_strtod_l+0xa76>
 8009a2e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009a32:	9b05      	ldr	r3, [sp, #20]
 8009a34:	46ca      	mov	sl, r9
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1bc      	bne.n	80099b4 <_strtod_l+0xa0c>
 8009a3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a40:	0d1b      	lsrs	r3, r3, #20
 8009a42:	051b      	lsls	r3, r3, #20
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d1b5      	bne.n	80099b4 <_strtod_l+0xa0c>
 8009a48:	4628      	mov	r0, r5
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	f7f7 fbec 	bl	8001228 <__aeabi_d2lz>
 8009a50:	f7f6 fd80 	bl	8000554 <__aeabi_l2d>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4628      	mov	r0, r5
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	f7f6 fbf0 	bl	8000240 <__aeabi_dsub>
 8009a60:	460b      	mov	r3, r1
 8009a62:	4602      	mov	r2, r0
 8009a64:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009a68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a6e:	ea4a 0a08 	orr.w	sl, sl, r8
 8009a72:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009a76:	d06c      	beq.n	8009b52 <_strtod_l+0xbaa>
 8009a78:	a309      	add	r3, pc, #36	; (adr r3, 8009aa0 <_strtod_l+0xaf8>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f7f7 f809 	bl	8000a94 <__aeabi_dcmplt>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f47f acd8 	bne.w	8009438 <_strtod_l+0x490>
 8009a88:	a307      	add	r3, pc, #28	; (adr r3, 8009aa8 <_strtod_l+0xb00>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a92:	f7f7 f81d 	bl	8000ad0 <__aeabi_dcmpgt>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d08c      	beq.n	80099b4 <_strtod_l+0xa0c>
 8009a9a:	e4cd      	b.n	8009438 <_strtod_l+0x490>
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	94a03595 	.word	0x94a03595
 8009aa4:	3fdfffff 	.word	0x3fdfffff
 8009aa8:	35afe535 	.word	0x35afe535
 8009aac:	3fe00000 	.word	0x3fe00000
 8009ab0:	000fffff 	.word	0x000fffff
 8009ab4:	7ff00000 	.word	0x7ff00000
 8009ab8:	7fefffff 	.word	0x7fefffff
 8009abc:	3ff00000 	.word	0x3ff00000
 8009ac0:	3fe00000 	.word	0x3fe00000
 8009ac4:	7fe00000 	.word	0x7fe00000
 8009ac8:	7c9fffff 	.word	0x7c9fffff
 8009acc:	bff00000 	.word	0xbff00000
 8009ad0:	9b05      	ldr	r3, [sp, #20]
 8009ad2:	b333      	cbz	r3, 8009b22 <_strtod_l+0xb7a>
 8009ad4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ad6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ada:	d822      	bhi.n	8009b22 <_strtod_l+0xb7a>
 8009adc:	a328      	add	r3, pc, #160	; (adr r3, 8009b80 <_strtod_l+0xbd8>)
 8009ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	f7f6 ffdf 	bl	8000aa8 <__aeabi_dcmple>
 8009aea:	b1a0      	cbz	r0, 8009b16 <_strtod_l+0xb6e>
 8009aec:	4639      	mov	r1, r7
 8009aee:	4628      	mov	r0, r5
 8009af0:	f7f7 f836 	bl	8000b60 <__aeabi_d2uiz>
 8009af4:	2801      	cmp	r0, #1
 8009af6:	bf38      	it	cc
 8009af8:	2001      	movcc	r0, #1
 8009afa:	f7f6 fcdf 	bl	80004bc <__aeabi_ui2d>
 8009afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b00:	4605      	mov	r5, r0
 8009b02:	460f      	mov	r7, r1
 8009b04:	bb03      	cbnz	r3, 8009b48 <_strtod_l+0xba0>
 8009b06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b0a:	9014      	str	r0, [sp, #80]	; 0x50
 8009b0c:	9315      	str	r3, [sp, #84]	; 0x54
 8009b0e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b12:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b1a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	9311      	str	r3, [sp, #68]	; 0x44
 8009b22:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009b24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b26:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009b2a:	f7ff f8e9 	bl	8008d00 <__ulp>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 fd3b 	bl	80005b0 <__aeabi_dmul>
 8009b3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b3e:	f7f6 fb81 	bl	8000244 <__adddf3>
 8009b42:	4680      	mov	r8, r0
 8009b44:	4689      	mov	r9, r1
 8009b46:	e774      	b.n	8009a32 <_strtod_l+0xa8a>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009b50:	e7dd      	b.n	8009b0e <_strtod_l+0xb66>
 8009b52:	a30d      	add	r3, pc, #52	; (adr r3, 8009b88 <_strtod_l+0xbe0>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 ff9c 	bl	8000a94 <__aeabi_dcmplt>
 8009b5c:	e79b      	b.n	8009a96 <_strtod_l+0xaee>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	930e      	str	r3, [sp, #56]	; 0x38
 8009b62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	f7ff ba5b 	b.w	8009022 <_strtod_l+0x7a>
 8009b6c:	2a65      	cmp	r2, #101	; 0x65
 8009b6e:	f43f ab52 	beq.w	8009216 <_strtod_l+0x26e>
 8009b72:	2a45      	cmp	r2, #69	; 0x45
 8009b74:	f43f ab4f 	beq.w	8009216 <_strtod_l+0x26e>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f7ff bb87 	b.w	800928c <_strtod_l+0x2e4>
 8009b7e:	bf00      	nop
 8009b80:	ffc00000 	.word	0xffc00000
 8009b84:	41dfffff 	.word	0x41dfffff
 8009b88:	94a03595 	.word	0x94a03595
 8009b8c:	3fcfffff 	.word	0x3fcfffff

08009b90 <_strtod_r>:
 8009b90:	4b01      	ldr	r3, [pc, #4]	; (8009b98 <_strtod_r+0x8>)
 8009b92:	f7ff ba09 	b.w	8008fa8 <_strtod_l>
 8009b96:	bf00      	nop
 8009b98:	20000080 	.word	0x20000080

08009b9c <_strtol_l.constprop.0>:
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba2:	4686      	mov	lr, r0
 8009ba4:	4690      	mov	r8, r2
 8009ba6:	d001      	beq.n	8009bac <_strtol_l.constprop.0+0x10>
 8009ba8:	2b24      	cmp	r3, #36	; 0x24
 8009baa:	d906      	bls.n	8009bba <_strtol_l.constprop.0+0x1e>
 8009bac:	f7fd fd92 	bl	80076d4 <__errno>
 8009bb0:	2316      	movs	r3, #22
 8009bb2:	6003      	str	r3, [r0, #0]
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bba:	460d      	mov	r5, r1
 8009bbc:	4835      	ldr	r0, [pc, #212]	; (8009c94 <_strtol_l.constprop.0+0xf8>)
 8009bbe:	462a      	mov	r2, r5
 8009bc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bc4:	5d06      	ldrb	r6, [r0, r4]
 8009bc6:	f016 0608 	ands.w	r6, r6, #8
 8009bca:	d1f8      	bne.n	8009bbe <_strtol_l.constprop.0+0x22>
 8009bcc:	2c2d      	cmp	r4, #45	; 0x2d
 8009bce:	d12e      	bne.n	8009c2e <_strtol_l.constprop.0+0x92>
 8009bd0:	2601      	movs	r6, #1
 8009bd2:	782c      	ldrb	r4, [r5, #0]
 8009bd4:	1c95      	adds	r5, r2, #2
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d057      	beq.n	8009c8a <_strtol_l.constprop.0+0xee>
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d109      	bne.n	8009bf2 <_strtol_l.constprop.0+0x56>
 8009bde:	2c30      	cmp	r4, #48	; 0x30
 8009be0:	d107      	bne.n	8009bf2 <_strtol_l.constprop.0+0x56>
 8009be2:	782a      	ldrb	r2, [r5, #0]
 8009be4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009be8:	2a58      	cmp	r2, #88	; 0x58
 8009bea:	d149      	bne.n	8009c80 <_strtol_l.constprop.0+0xe4>
 8009bec:	2310      	movs	r3, #16
 8009bee:	786c      	ldrb	r4, [r5, #1]
 8009bf0:	3502      	adds	r5, #2
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009bf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009bfc:	fbbc f9f3 	udiv	r9, ip, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c06:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009c0a:	2f09      	cmp	r7, #9
 8009c0c:	d814      	bhi.n	8009c38 <_strtol_l.constprop.0+0x9c>
 8009c0e:	463c      	mov	r4, r7
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	dd20      	ble.n	8009c56 <_strtol_l.constprop.0+0xba>
 8009c14:	1c57      	adds	r7, r2, #1
 8009c16:	d007      	beq.n	8009c28 <_strtol_l.constprop.0+0x8c>
 8009c18:	4581      	cmp	r9, r0
 8009c1a:	d319      	bcc.n	8009c50 <_strtol_l.constprop.0+0xb4>
 8009c1c:	d101      	bne.n	8009c22 <_strtol_l.constprop.0+0x86>
 8009c1e:	45a2      	cmp	sl, r4
 8009c20:	db16      	blt.n	8009c50 <_strtol_l.constprop.0+0xb4>
 8009c22:	2201      	movs	r2, #1
 8009c24:	fb00 4003 	mla	r0, r0, r3, r4
 8009c28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c2c:	e7eb      	b.n	8009c06 <_strtol_l.constprop.0+0x6a>
 8009c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c30:	bf04      	itt	eq
 8009c32:	782c      	ldrbeq	r4, [r5, #0]
 8009c34:	1c95      	addeq	r5, r2, #2
 8009c36:	e7ce      	b.n	8009bd6 <_strtol_l.constprop.0+0x3a>
 8009c38:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009c3c:	2f19      	cmp	r7, #25
 8009c3e:	d801      	bhi.n	8009c44 <_strtol_l.constprop.0+0xa8>
 8009c40:	3c37      	subs	r4, #55	; 0x37
 8009c42:	e7e5      	b.n	8009c10 <_strtol_l.constprop.0+0x74>
 8009c44:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009c48:	2f19      	cmp	r7, #25
 8009c4a:	d804      	bhi.n	8009c56 <_strtol_l.constprop.0+0xba>
 8009c4c:	3c57      	subs	r4, #87	; 0x57
 8009c4e:	e7df      	b.n	8009c10 <_strtol_l.constprop.0+0x74>
 8009c50:	f04f 32ff 	mov.w	r2, #4294967295
 8009c54:	e7e8      	b.n	8009c28 <_strtol_l.constprop.0+0x8c>
 8009c56:	1c53      	adds	r3, r2, #1
 8009c58:	d108      	bne.n	8009c6c <_strtol_l.constprop.0+0xd0>
 8009c5a:	2322      	movs	r3, #34	; 0x22
 8009c5c:	4660      	mov	r0, ip
 8009c5e:	f8ce 3000 	str.w	r3, [lr]
 8009c62:	f1b8 0f00 	cmp.w	r8, #0
 8009c66:	d0a6      	beq.n	8009bb6 <_strtol_l.constprop.0+0x1a>
 8009c68:	1e69      	subs	r1, r5, #1
 8009c6a:	e006      	b.n	8009c7a <_strtol_l.constprop.0+0xde>
 8009c6c:	b106      	cbz	r6, 8009c70 <_strtol_l.constprop.0+0xd4>
 8009c6e:	4240      	negs	r0, r0
 8009c70:	f1b8 0f00 	cmp.w	r8, #0
 8009c74:	d09f      	beq.n	8009bb6 <_strtol_l.constprop.0+0x1a>
 8009c76:	2a00      	cmp	r2, #0
 8009c78:	d1f6      	bne.n	8009c68 <_strtol_l.constprop.0+0xcc>
 8009c7a:	f8c8 1000 	str.w	r1, [r8]
 8009c7e:	e79a      	b.n	8009bb6 <_strtol_l.constprop.0+0x1a>
 8009c80:	2430      	movs	r4, #48	; 0x30
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1b5      	bne.n	8009bf2 <_strtol_l.constprop.0+0x56>
 8009c86:	2308      	movs	r3, #8
 8009c88:	e7b3      	b.n	8009bf2 <_strtol_l.constprop.0+0x56>
 8009c8a:	2c30      	cmp	r4, #48	; 0x30
 8009c8c:	d0a9      	beq.n	8009be2 <_strtol_l.constprop.0+0x46>
 8009c8e:	230a      	movs	r3, #10
 8009c90:	e7af      	b.n	8009bf2 <_strtol_l.constprop.0+0x56>
 8009c92:	bf00      	nop
 8009c94:	0800b141 	.word	0x0800b141

08009c98 <_strtol_r>:
 8009c98:	f7ff bf80 	b.w	8009b9c <_strtol_l.constprop.0>

08009c9c <__ssputs_r>:
 8009c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	461f      	mov	r7, r3
 8009ca2:	688e      	ldr	r6, [r1, #8]
 8009ca4:	4682      	mov	sl, r0
 8009ca6:	42be      	cmp	r6, r7
 8009ca8:	460c      	mov	r4, r1
 8009caa:	4690      	mov	r8, r2
 8009cac:	680b      	ldr	r3, [r1, #0]
 8009cae:	d82c      	bhi.n	8009d0a <__ssputs_r+0x6e>
 8009cb0:	898a      	ldrh	r2, [r1, #12]
 8009cb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cb6:	d026      	beq.n	8009d06 <__ssputs_r+0x6a>
 8009cb8:	6965      	ldr	r5, [r4, #20]
 8009cba:	6909      	ldr	r1, [r1, #16]
 8009cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cc0:	eba3 0901 	sub.w	r9, r3, r1
 8009cc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cc8:	1c7b      	adds	r3, r7, #1
 8009cca:	444b      	add	r3, r9
 8009ccc:	106d      	asrs	r5, r5, #1
 8009cce:	429d      	cmp	r5, r3
 8009cd0:	bf38      	it	cc
 8009cd2:	461d      	movcc	r5, r3
 8009cd4:	0553      	lsls	r3, r2, #21
 8009cd6:	d527      	bpl.n	8009d28 <__ssputs_r+0x8c>
 8009cd8:	4629      	mov	r1, r5
 8009cda:	f7fe fc19 	bl	8008510 <_malloc_r>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	b360      	cbz	r0, 8009d3c <__ssputs_r+0xa0>
 8009ce2:	464a      	mov	r2, r9
 8009ce4:	6921      	ldr	r1, [r4, #16]
 8009ce6:	f000 fa17 	bl	800a118 <memcpy>
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf4:	81a3      	strh	r3, [r4, #12]
 8009cf6:	6126      	str	r6, [r4, #16]
 8009cf8:	444e      	add	r6, r9
 8009cfa:	6026      	str	r6, [r4, #0]
 8009cfc:	463e      	mov	r6, r7
 8009cfe:	6165      	str	r5, [r4, #20]
 8009d00:	eba5 0509 	sub.w	r5, r5, r9
 8009d04:	60a5      	str	r5, [r4, #8]
 8009d06:	42be      	cmp	r6, r7
 8009d08:	d900      	bls.n	8009d0c <__ssputs_r+0x70>
 8009d0a:	463e      	mov	r6, r7
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	4641      	mov	r1, r8
 8009d10:	6820      	ldr	r0, [r4, #0]
 8009d12:	f000 f9c5 	bl	800a0a0 <memmove>
 8009d16:	2000      	movs	r0, #0
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	1b9b      	subs	r3, r3, r6
 8009d1c:	60a3      	str	r3, [r4, #8]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	4433      	add	r3, r6
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d28:	462a      	mov	r2, r5
 8009d2a:	f000 fda6 	bl	800a87a <_realloc_r>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d1e0      	bne.n	8009cf6 <__ssputs_r+0x5a>
 8009d34:	4650      	mov	r0, sl
 8009d36:	6921      	ldr	r1, [r4, #16]
 8009d38:	f7fe fb7a 	bl	8008430 <_free_r>
 8009d3c:	230c      	movs	r3, #12
 8009d3e:	f8ca 3000 	str.w	r3, [sl]
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295
 8009d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	e7e9      	b.n	8009d24 <__ssputs_r+0x88>

08009d50 <_svfiprintf_r>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	4698      	mov	r8, r3
 8009d56:	898b      	ldrh	r3, [r1, #12]
 8009d58:	4607      	mov	r7, r0
 8009d5a:	061b      	lsls	r3, r3, #24
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	4614      	mov	r4, r2
 8009d60:	b09d      	sub	sp, #116	; 0x74
 8009d62:	d50e      	bpl.n	8009d82 <_svfiprintf_r+0x32>
 8009d64:	690b      	ldr	r3, [r1, #16]
 8009d66:	b963      	cbnz	r3, 8009d82 <_svfiprintf_r+0x32>
 8009d68:	2140      	movs	r1, #64	; 0x40
 8009d6a:	f7fe fbd1 	bl	8008510 <_malloc_r>
 8009d6e:	6028      	str	r0, [r5, #0]
 8009d70:	6128      	str	r0, [r5, #16]
 8009d72:	b920      	cbnz	r0, 8009d7e <_svfiprintf_r+0x2e>
 8009d74:	230c      	movs	r3, #12
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7c:	e0d0      	b.n	8009f20 <_svfiprintf_r+0x1d0>
 8009d7e:	2340      	movs	r3, #64	; 0x40
 8009d80:	616b      	str	r3, [r5, #20]
 8009d82:	2300      	movs	r3, #0
 8009d84:	9309      	str	r3, [sp, #36]	; 0x24
 8009d86:	2320      	movs	r3, #32
 8009d88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d8c:	2330      	movs	r3, #48	; 0x30
 8009d8e:	f04f 0901 	mov.w	r9, #1
 8009d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d96:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009f38 <_svfiprintf_r+0x1e8>
 8009d9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d9e:	4623      	mov	r3, r4
 8009da0:	469a      	mov	sl, r3
 8009da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009da6:	b10a      	cbz	r2, 8009dac <_svfiprintf_r+0x5c>
 8009da8:	2a25      	cmp	r2, #37	; 0x25
 8009daa:	d1f9      	bne.n	8009da0 <_svfiprintf_r+0x50>
 8009dac:	ebba 0b04 	subs.w	fp, sl, r4
 8009db0:	d00b      	beq.n	8009dca <_svfiprintf_r+0x7a>
 8009db2:	465b      	mov	r3, fp
 8009db4:	4622      	mov	r2, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	4638      	mov	r0, r7
 8009dba:	f7ff ff6f 	bl	8009c9c <__ssputs_r>
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f000 80a9 	beq.w	8009f16 <_svfiprintf_r+0x1c6>
 8009dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dc6:	445a      	add	r2, fp
 8009dc8:	9209      	str	r2, [sp, #36]	; 0x24
 8009dca:	f89a 3000 	ldrb.w	r3, [sl]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 80a1 	beq.w	8009f16 <_svfiprintf_r+0x1c6>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dde:	f10a 0a01 	add.w	sl, sl, #1
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	9307      	str	r3, [sp, #28]
 8009de6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dea:	931a      	str	r3, [sp, #104]	; 0x68
 8009dec:	4654      	mov	r4, sl
 8009dee:	2205      	movs	r2, #5
 8009df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df4:	4850      	ldr	r0, [pc, #320]	; (8009f38 <_svfiprintf_r+0x1e8>)
 8009df6:	f7fd fc9a 	bl	800772e <memchr>
 8009dfa:	9a04      	ldr	r2, [sp, #16]
 8009dfc:	b9d8      	cbnz	r0, 8009e36 <_svfiprintf_r+0xe6>
 8009dfe:	06d0      	lsls	r0, r2, #27
 8009e00:	bf44      	itt	mi
 8009e02:	2320      	movmi	r3, #32
 8009e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e08:	0711      	lsls	r1, r2, #28
 8009e0a:	bf44      	itt	mi
 8009e0c:	232b      	movmi	r3, #43	; 0x2b
 8009e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e12:	f89a 3000 	ldrb.w	r3, [sl]
 8009e16:	2b2a      	cmp	r3, #42	; 0x2a
 8009e18:	d015      	beq.n	8009e46 <_svfiprintf_r+0xf6>
 8009e1a:	4654      	mov	r4, sl
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	f04f 0c0a 	mov.w	ip, #10
 8009e22:	9a07      	ldr	r2, [sp, #28]
 8009e24:	4621      	mov	r1, r4
 8009e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e2a:	3b30      	subs	r3, #48	; 0x30
 8009e2c:	2b09      	cmp	r3, #9
 8009e2e:	d94d      	bls.n	8009ecc <_svfiprintf_r+0x17c>
 8009e30:	b1b0      	cbz	r0, 8009e60 <_svfiprintf_r+0x110>
 8009e32:	9207      	str	r2, [sp, #28]
 8009e34:	e014      	b.n	8009e60 <_svfiprintf_r+0x110>
 8009e36:	eba0 0308 	sub.w	r3, r0, r8
 8009e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	46a2      	mov	sl, r4
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	e7d2      	b.n	8009dec <_svfiprintf_r+0x9c>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	1d19      	adds	r1, r3, #4
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	9103      	str	r1, [sp, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	bfbb      	ittet	lt
 8009e52:	425b      	neglt	r3, r3
 8009e54:	f042 0202 	orrlt.w	r2, r2, #2
 8009e58:	9307      	strge	r3, [sp, #28]
 8009e5a:	9307      	strlt	r3, [sp, #28]
 8009e5c:	bfb8      	it	lt
 8009e5e:	9204      	strlt	r2, [sp, #16]
 8009e60:	7823      	ldrb	r3, [r4, #0]
 8009e62:	2b2e      	cmp	r3, #46	; 0x2e
 8009e64:	d10c      	bne.n	8009e80 <_svfiprintf_r+0x130>
 8009e66:	7863      	ldrb	r3, [r4, #1]
 8009e68:	2b2a      	cmp	r3, #42	; 0x2a
 8009e6a:	d134      	bne.n	8009ed6 <_svfiprintf_r+0x186>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	3402      	adds	r4, #2
 8009e70:	1d1a      	adds	r2, r3, #4
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	9203      	str	r2, [sp, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bfb8      	it	lt
 8009e7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e7e:	9305      	str	r3, [sp, #20]
 8009e80:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009f3c <_svfiprintf_r+0x1ec>
 8009e84:	2203      	movs	r2, #3
 8009e86:	4650      	mov	r0, sl
 8009e88:	7821      	ldrb	r1, [r4, #0]
 8009e8a:	f7fd fc50 	bl	800772e <memchr>
 8009e8e:	b138      	cbz	r0, 8009ea0 <_svfiprintf_r+0x150>
 8009e90:	2240      	movs	r2, #64	; 0x40
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	eba0 000a 	sub.w	r0, r0, sl
 8009e98:	4082      	lsls	r2, r0
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	3401      	adds	r4, #1
 8009e9e:	9304      	str	r3, [sp, #16]
 8009ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea4:	2206      	movs	r2, #6
 8009ea6:	4826      	ldr	r0, [pc, #152]	; (8009f40 <_svfiprintf_r+0x1f0>)
 8009ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eac:	f7fd fc3f 	bl	800772e <memchr>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d038      	beq.n	8009f26 <_svfiprintf_r+0x1d6>
 8009eb4:	4b23      	ldr	r3, [pc, #140]	; (8009f44 <_svfiprintf_r+0x1f4>)
 8009eb6:	bb1b      	cbnz	r3, 8009f00 <_svfiprintf_r+0x1b0>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	3307      	adds	r3, #7
 8009ebc:	f023 0307 	bic.w	r3, r3, #7
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	9303      	str	r3, [sp, #12]
 8009ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec6:	4433      	add	r3, r6
 8009ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eca:	e768      	b.n	8009d9e <_svfiprintf_r+0x4e>
 8009ecc:	460c      	mov	r4, r1
 8009ece:	2001      	movs	r0, #1
 8009ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ed4:	e7a6      	b.n	8009e24 <_svfiprintf_r+0xd4>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f04f 0c0a 	mov.w	ip, #10
 8009edc:	4619      	mov	r1, r3
 8009ede:	3401      	adds	r4, #1
 8009ee0:	9305      	str	r3, [sp, #20]
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee8:	3a30      	subs	r2, #48	; 0x30
 8009eea:	2a09      	cmp	r2, #9
 8009eec:	d903      	bls.n	8009ef6 <_svfiprintf_r+0x1a6>
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0c6      	beq.n	8009e80 <_svfiprintf_r+0x130>
 8009ef2:	9105      	str	r1, [sp, #20]
 8009ef4:	e7c4      	b.n	8009e80 <_svfiprintf_r+0x130>
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	2301      	movs	r3, #1
 8009efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009efe:	e7f0      	b.n	8009ee2 <_svfiprintf_r+0x192>
 8009f00:	ab03      	add	r3, sp, #12
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	462a      	mov	r2, r5
 8009f06:	4638      	mov	r0, r7
 8009f08:	4b0f      	ldr	r3, [pc, #60]	; (8009f48 <_svfiprintf_r+0x1f8>)
 8009f0a:	a904      	add	r1, sp, #16
 8009f0c:	f7fc fc7a 	bl	8006804 <_printf_float>
 8009f10:	1c42      	adds	r2, r0, #1
 8009f12:	4606      	mov	r6, r0
 8009f14:	d1d6      	bne.n	8009ec4 <_svfiprintf_r+0x174>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	065b      	lsls	r3, r3, #25
 8009f1a:	f53f af2d 	bmi.w	8009d78 <_svfiprintf_r+0x28>
 8009f1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f20:	b01d      	add	sp, #116	; 0x74
 8009f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	462a      	mov	r2, r5
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <_svfiprintf_r+0x1f8>)
 8009f30:	a904      	add	r1, sp, #16
 8009f32:	f7fc ff07 	bl	8006d44 <_printf_i>
 8009f36:	e7eb      	b.n	8009f10 <_svfiprintf_r+0x1c0>
 8009f38:	0800b241 	.word	0x0800b241
 8009f3c:	0800b247 	.word	0x0800b247
 8009f40:	0800b24b 	.word	0x0800b24b
 8009f44:	08006805 	.word	0x08006805
 8009f48:	08009c9d 	.word	0x08009c9d

08009f4c <__sflush_r>:
 8009f4c:	898a      	ldrh	r2, [r1, #12]
 8009f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f50:	4605      	mov	r5, r0
 8009f52:	0710      	lsls	r0, r2, #28
 8009f54:	460c      	mov	r4, r1
 8009f56:	d457      	bmi.n	800a008 <__sflush_r+0xbc>
 8009f58:	684b      	ldr	r3, [r1, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	dc04      	bgt.n	8009f68 <__sflush_r+0x1c>
 8009f5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dc01      	bgt.n	8009f68 <__sflush_r+0x1c>
 8009f64:	2000      	movs	r0, #0
 8009f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f6a:	2e00      	cmp	r6, #0
 8009f6c:	d0fa      	beq.n	8009f64 <__sflush_r+0x18>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f74:	682f      	ldr	r7, [r5, #0]
 8009f76:	6a21      	ldr	r1, [r4, #32]
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	d032      	beq.n	8009fe2 <__sflush_r+0x96>
 8009f7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	075a      	lsls	r2, r3, #29
 8009f82:	d505      	bpl.n	8009f90 <__sflush_r+0x44>
 8009f84:	6863      	ldr	r3, [r4, #4]
 8009f86:	1ac0      	subs	r0, r0, r3
 8009f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f8a:	b10b      	cbz	r3, 8009f90 <__sflush_r+0x44>
 8009f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f8e:	1ac0      	subs	r0, r0, r3
 8009f90:	2300      	movs	r3, #0
 8009f92:	4602      	mov	r2, r0
 8009f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f96:	4628      	mov	r0, r5
 8009f98:	6a21      	ldr	r1, [r4, #32]
 8009f9a:	47b0      	blx	r6
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	d106      	bne.n	8009fb0 <__sflush_r+0x64>
 8009fa2:	6829      	ldr	r1, [r5, #0]
 8009fa4:	291d      	cmp	r1, #29
 8009fa6:	d82b      	bhi.n	800a000 <__sflush_r+0xb4>
 8009fa8:	4a28      	ldr	r2, [pc, #160]	; (800a04c <__sflush_r+0x100>)
 8009faa:	410a      	asrs	r2, r1
 8009fac:	07d6      	lsls	r6, r2, #31
 8009fae:	d427      	bmi.n	800a000 <__sflush_r+0xb4>
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	6062      	str	r2, [r4, #4]
 8009fb4:	6922      	ldr	r2, [r4, #16]
 8009fb6:	04d9      	lsls	r1, r3, #19
 8009fb8:	6022      	str	r2, [r4, #0]
 8009fba:	d504      	bpl.n	8009fc6 <__sflush_r+0x7a>
 8009fbc:	1c42      	adds	r2, r0, #1
 8009fbe:	d101      	bne.n	8009fc4 <__sflush_r+0x78>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b903      	cbnz	r3, 8009fc6 <__sflush_r+0x7a>
 8009fc4:	6560      	str	r0, [r4, #84]	; 0x54
 8009fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc8:	602f      	str	r7, [r5, #0]
 8009fca:	2900      	cmp	r1, #0
 8009fcc:	d0ca      	beq.n	8009f64 <__sflush_r+0x18>
 8009fce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fd2:	4299      	cmp	r1, r3
 8009fd4:	d002      	beq.n	8009fdc <__sflush_r+0x90>
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f7fe fa2a 	bl	8008430 <_free_r>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	6360      	str	r0, [r4, #52]	; 0x34
 8009fe0:	e7c1      	b.n	8009f66 <__sflush_r+0x1a>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	47b0      	blx	r6
 8009fe8:	1c41      	adds	r1, r0, #1
 8009fea:	d1c8      	bne.n	8009f7e <__sflush_r+0x32>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0c5      	beq.n	8009f7e <__sflush_r+0x32>
 8009ff2:	2b1d      	cmp	r3, #29
 8009ff4:	d001      	beq.n	8009ffa <__sflush_r+0xae>
 8009ff6:	2b16      	cmp	r3, #22
 8009ff8:	d101      	bne.n	8009ffe <__sflush_r+0xb2>
 8009ffa:	602f      	str	r7, [r5, #0]
 8009ffc:	e7b2      	b.n	8009f64 <__sflush_r+0x18>
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a004:	81a3      	strh	r3, [r4, #12]
 800a006:	e7ae      	b.n	8009f66 <__sflush_r+0x1a>
 800a008:	690f      	ldr	r7, [r1, #16]
 800a00a:	2f00      	cmp	r7, #0
 800a00c:	d0aa      	beq.n	8009f64 <__sflush_r+0x18>
 800a00e:	0793      	lsls	r3, r2, #30
 800a010:	bf18      	it	ne
 800a012:	2300      	movne	r3, #0
 800a014:	680e      	ldr	r6, [r1, #0]
 800a016:	bf08      	it	eq
 800a018:	694b      	ldreq	r3, [r1, #20]
 800a01a:	1bf6      	subs	r6, r6, r7
 800a01c:	600f      	str	r7, [r1, #0]
 800a01e:	608b      	str	r3, [r1, #8]
 800a020:	2e00      	cmp	r6, #0
 800a022:	dd9f      	ble.n	8009f64 <__sflush_r+0x18>
 800a024:	4633      	mov	r3, r6
 800a026:	463a      	mov	r2, r7
 800a028:	4628      	mov	r0, r5
 800a02a:	6a21      	ldr	r1, [r4, #32]
 800a02c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a030:	47e0      	blx	ip
 800a032:	2800      	cmp	r0, #0
 800a034:	dc06      	bgt.n	800a044 <__sflush_r+0xf8>
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a040:	81a3      	strh	r3, [r4, #12]
 800a042:	e790      	b.n	8009f66 <__sflush_r+0x1a>
 800a044:	4407      	add	r7, r0
 800a046:	1a36      	subs	r6, r6, r0
 800a048:	e7ea      	b.n	800a020 <__sflush_r+0xd4>
 800a04a:	bf00      	nop
 800a04c:	dfbffffe 	.word	0xdfbffffe

0800a050 <_fflush_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	690b      	ldr	r3, [r1, #16]
 800a054:	4605      	mov	r5, r0
 800a056:	460c      	mov	r4, r1
 800a058:	b913      	cbnz	r3, 800a060 <_fflush_r+0x10>
 800a05a:	2500      	movs	r5, #0
 800a05c:	4628      	mov	r0, r5
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	b118      	cbz	r0, 800a06a <_fflush_r+0x1a>
 800a062:	6a03      	ldr	r3, [r0, #32]
 800a064:	b90b      	cbnz	r3, 800a06a <_fflush_r+0x1a>
 800a066:	f7fd fa29 	bl	80074bc <__sinit>
 800a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0f3      	beq.n	800a05a <_fflush_r+0xa>
 800a072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a074:	07d0      	lsls	r0, r2, #31
 800a076:	d404      	bmi.n	800a082 <_fflush_r+0x32>
 800a078:	0599      	lsls	r1, r3, #22
 800a07a:	d402      	bmi.n	800a082 <_fflush_r+0x32>
 800a07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a07e:	f7fd fb54 	bl	800772a <__retarget_lock_acquire_recursive>
 800a082:	4628      	mov	r0, r5
 800a084:	4621      	mov	r1, r4
 800a086:	f7ff ff61 	bl	8009f4c <__sflush_r>
 800a08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a08c:	4605      	mov	r5, r0
 800a08e:	07da      	lsls	r2, r3, #31
 800a090:	d4e4      	bmi.n	800a05c <_fflush_r+0xc>
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	059b      	lsls	r3, r3, #22
 800a096:	d4e1      	bmi.n	800a05c <_fflush_r+0xc>
 800a098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a09a:	f7fd fb47 	bl	800772c <__retarget_lock_release_recursive>
 800a09e:	e7dd      	b.n	800a05c <_fflush_r+0xc>

0800a0a0 <memmove>:
 800a0a0:	4288      	cmp	r0, r1
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	eb01 0402 	add.w	r4, r1, r2
 800a0a8:	d902      	bls.n	800a0b0 <memmove+0x10>
 800a0aa:	4284      	cmp	r4, r0
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	d807      	bhi.n	800a0c0 <memmove+0x20>
 800a0b0:	1e43      	subs	r3, r0, #1
 800a0b2:	42a1      	cmp	r1, r4
 800a0b4:	d008      	beq.n	800a0c8 <memmove+0x28>
 800a0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0be:	e7f8      	b.n	800a0b2 <memmove+0x12>
 800a0c0:	4601      	mov	r1, r0
 800a0c2:	4402      	add	r2, r0
 800a0c4:	428a      	cmp	r2, r1
 800a0c6:	d100      	bne.n	800a0ca <memmove+0x2a>
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0d2:	e7f7      	b.n	800a0c4 <memmove+0x24>

0800a0d4 <strncmp>:
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	b16a      	cbz	r2, 800a0f4 <strncmp+0x20>
 800a0d8:	3901      	subs	r1, #1
 800a0da:	1884      	adds	r4, r0, r2
 800a0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d103      	bne.n	800a0f0 <strncmp+0x1c>
 800a0e8:	42a0      	cmp	r0, r4
 800a0ea:	d001      	beq.n	800a0f0 <strncmp+0x1c>
 800a0ec:	2a00      	cmp	r2, #0
 800a0ee:	d1f5      	bne.n	800a0dc <strncmp+0x8>
 800a0f0:	1ad0      	subs	r0, r2, r3
 800a0f2:	bd10      	pop	{r4, pc}
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	e7fc      	b.n	800a0f2 <strncmp+0x1e>

0800a0f8 <_sbrk_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4d05      	ldr	r5, [pc, #20]	; (800a114 <_sbrk_r+0x1c>)
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7f8 f854 	bl	80021b0 <_sbrk>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_sbrk_r+0x1a>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_sbrk_r+0x1a>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	200006fc 	.word	0x200006fc

0800a118 <memcpy>:
 800a118:	440a      	add	r2, r1
 800a11a:	4291      	cmp	r1, r2
 800a11c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a120:	d100      	bne.n	800a124 <memcpy+0xc>
 800a122:	4770      	bx	lr
 800a124:	b510      	push	{r4, lr}
 800a126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12a:	4291      	cmp	r1, r2
 800a12c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a130:	d1f9      	bne.n	800a126 <memcpy+0xe>
 800a132:	bd10      	pop	{r4, pc}

0800a134 <nan>:
 800a134:	2000      	movs	r0, #0
 800a136:	4901      	ldr	r1, [pc, #4]	; (800a13c <nan+0x8>)
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	7ff80000 	.word	0x7ff80000

0800a140 <__assert_func>:
 800a140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a142:	4614      	mov	r4, r2
 800a144:	461a      	mov	r2, r3
 800a146:	4b09      	ldr	r3, [pc, #36]	; (800a16c <__assert_func+0x2c>)
 800a148:	4605      	mov	r5, r0
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68d8      	ldr	r0, [r3, #12]
 800a14e:	b14c      	cbz	r4, 800a164 <__assert_func+0x24>
 800a150:	4b07      	ldr	r3, [pc, #28]	; (800a170 <__assert_func+0x30>)
 800a152:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a156:	9100      	str	r1, [sp, #0]
 800a158:	462b      	mov	r3, r5
 800a15a:	4906      	ldr	r1, [pc, #24]	; (800a174 <__assert_func+0x34>)
 800a15c:	f000 fbca 	bl	800a8f4 <fiprintf>
 800a160:	f000 fbda 	bl	800a918 <abort>
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <__assert_func+0x38>)
 800a166:	461c      	mov	r4, r3
 800a168:	e7f3      	b.n	800a152 <__assert_func+0x12>
 800a16a:	bf00      	nop
 800a16c:	2000007c 	.word	0x2000007c
 800a170:	0800b25a 	.word	0x0800b25a
 800a174:	0800b267 	.word	0x0800b267
 800a178:	0800b295 	.word	0x0800b295

0800a17c <_calloc_r>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	fba1 5402 	umull	r5, r4, r1, r2
 800a182:	b934      	cbnz	r4, 800a192 <_calloc_r+0x16>
 800a184:	4629      	mov	r1, r5
 800a186:	f7fe f9c3 	bl	8008510 <_malloc_r>
 800a18a:	4606      	mov	r6, r0
 800a18c:	b928      	cbnz	r0, 800a19a <_calloc_r+0x1e>
 800a18e:	4630      	mov	r0, r6
 800a190:	bd70      	pop	{r4, r5, r6, pc}
 800a192:	220c      	movs	r2, #12
 800a194:	2600      	movs	r6, #0
 800a196:	6002      	str	r2, [r0, #0]
 800a198:	e7f9      	b.n	800a18e <_calloc_r+0x12>
 800a19a:	462a      	mov	r2, r5
 800a19c:	4621      	mov	r1, r4
 800a19e:	f7fd fa47 	bl	8007630 <memset>
 800a1a2:	e7f4      	b.n	800a18e <_calloc_r+0x12>

0800a1a4 <rshift>:
 800a1a4:	6903      	ldr	r3, [r0, #16]
 800a1a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1ae:	f100 0414 	add.w	r4, r0, #20
 800a1b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1b6:	dd46      	ble.n	800a246 <rshift+0xa2>
 800a1b8:	f011 011f 	ands.w	r1, r1, #31
 800a1bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1c4:	d10c      	bne.n	800a1e0 <rshift+0x3c>
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f100 0710 	add.w	r7, r0, #16
 800a1cc:	42b1      	cmp	r1, r6
 800a1ce:	d335      	bcc.n	800a23c <rshift+0x98>
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	1eea      	subs	r2, r5, #3
 800a1d6:	4296      	cmp	r6, r2
 800a1d8:	bf38      	it	cc
 800a1da:	2300      	movcc	r3, #0
 800a1dc:	4423      	add	r3, r4
 800a1de:	e015      	b.n	800a20c <rshift+0x68>
 800a1e0:	46a1      	mov	r9, r4
 800a1e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1e6:	f1c1 0820 	rsb	r8, r1, #32
 800a1ea:	40cf      	lsrs	r7, r1
 800a1ec:	f105 0e04 	add.w	lr, r5, #4
 800a1f0:	4576      	cmp	r6, lr
 800a1f2:	46f4      	mov	ip, lr
 800a1f4:	d816      	bhi.n	800a224 <rshift+0x80>
 800a1f6:	1a9a      	subs	r2, r3, r2
 800a1f8:	0092      	lsls	r2, r2, #2
 800a1fa:	3a04      	subs	r2, #4
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	42ae      	cmp	r6, r5
 800a200:	bf38      	it	cc
 800a202:	2200      	movcc	r2, #0
 800a204:	18a3      	adds	r3, r4, r2
 800a206:	50a7      	str	r7, [r4, r2]
 800a208:	b107      	cbz	r7, 800a20c <rshift+0x68>
 800a20a:	3304      	adds	r3, #4
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	eba3 0204 	sub.w	r2, r3, r4
 800a212:	bf08      	it	eq
 800a214:	2300      	moveq	r3, #0
 800a216:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a21a:	6102      	str	r2, [r0, #16]
 800a21c:	bf08      	it	eq
 800a21e:	6143      	streq	r3, [r0, #20]
 800a220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a224:	f8dc c000 	ldr.w	ip, [ip]
 800a228:	fa0c fc08 	lsl.w	ip, ip, r8
 800a22c:	ea4c 0707 	orr.w	r7, ip, r7
 800a230:	f849 7b04 	str.w	r7, [r9], #4
 800a234:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a238:	40cf      	lsrs	r7, r1
 800a23a:	e7d9      	b.n	800a1f0 <rshift+0x4c>
 800a23c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a240:	f847 cf04 	str.w	ip, [r7, #4]!
 800a244:	e7c2      	b.n	800a1cc <rshift+0x28>
 800a246:	4623      	mov	r3, r4
 800a248:	e7e0      	b.n	800a20c <rshift+0x68>

0800a24a <__hexdig_fun>:
 800a24a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a24e:	2b09      	cmp	r3, #9
 800a250:	d802      	bhi.n	800a258 <__hexdig_fun+0xe>
 800a252:	3820      	subs	r0, #32
 800a254:	b2c0      	uxtb	r0, r0
 800a256:	4770      	bx	lr
 800a258:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a25c:	2b05      	cmp	r3, #5
 800a25e:	d801      	bhi.n	800a264 <__hexdig_fun+0x1a>
 800a260:	3847      	subs	r0, #71	; 0x47
 800a262:	e7f7      	b.n	800a254 <__hexdig_fun+0xa>
 800a264:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a268:	2b05      	cmp	r3, #5
 800a26a:	d801      	bhi.n	800a270 <__hexdig_fun+0x26>
 800a26c:	3827      	subs	r0, #39	; 0x27
 800a26e:	e7f1      	b.n	800a254 <__hexdig_fun+0xa>
 800a270:	2000      	movs	r0, #0
 800a272:	4770      	bx	lr

0800a274 <__gethex>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	4681      	mov	r9, r0
 800a27a:	468a      	mov	sl, r1
 800a27c:	4617      	mov	r7, r2
 800a27e:	680a      	ldr	r2, [r1, #0]
 800a280:	b085      	sub	sp, #20
 800a282:	f102 0b02 	add.w	fp, r2, #2
 800a286:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a28a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	32fe      	adds	r2, #254	; 0xfe
 800a292:	eb02 030b 	add.w	r3, r2, fp
 800a296:	46d8      	mov	r8, fp
 800a298:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	2830      	cmp	r0, #48	; 0x30
 800a2a0:	d0f7      	beq.n	800a292 <__gethex+0x1e>
 800a2a2:	f7ff ffd2 	bl	800a24a <__hexdig_fun>
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d138      	bne.n	800a31e <__gethex+0xaa>
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	49a7      	ldr	r1, [pc, #668]	; (800a550 <__gethex+0x2dc>)
 800a2b2:	f7ff ff0f 	bl	800a0d4 <strncmp>
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d169      	bne.n	800a390 <__gethex+0x11c>
 800a2bc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a2c0:	465d      	mov	r5, fp
 800a2c2:	f7ff ffc2 	bl	800a24a <__hexdig_fun>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d064      	beq.n	800a394 <__gethex+0x120>
 800a2ca:	465a      	mov	r2, fp
 800a2cc:	7810      	ldrb	r0, [r2, #0]
 800a2ce:	4690      	mov	r8, r2
 800a2d0:	2830      	cmp	r0, #48	; 0x30
 800a2d2:	f102 0201 	add.w	r2, r2, #1
 800a2d6:	d0f9      	beq.n	800a2cc <__gethex+0x58>
 800a2d8:	f7ff ffb7 	bl	800a24a <__hexdig_fun>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	fab0 f480 	clz	r4, r0
 800a2e2:	465e      	mov	r6, fp
 800a2e4:	0964      	lsrs	r4, r4, #5
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	4615      	mov	r5, r2
 800a2ec:	7828      	ldrb	r0, [r5, #0]
 800a2ee:	3201      	adds	r2, #1
 800a2f0:	f7ff ffab 	bl	800a24a <__hexdig_fun>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d1f8      	bne.n	800a2ea <__gethex+0x76>
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	4994      	ldr	r1, [pc, #592]	; (800a550 <__gethex+0x2dc>)
 800a2fe:	f7ff fee9 	bl	800a0d4 <strncmp>
 800a302:	b978      	cbnz	r0, 800a324 <__gethex+0xb0>
 800a304:	b946      	cbnz	r6, 800a318 <__gethex+0xa4>
 800a306:	1c6e      	adds	r6, r5, #1
 800a308:	4632      	mov	r2, r6
 800a30a:	4615      	mov	r5, r2
 800a30c:	7828      	ldrb	r0, [r5, #0]
 800a30e:	3201      	adds	r2, #1
 800a310:	f7ff ff9b 	bl	800a24a <__hexdig_fun>
 800a314:	2800      	cmp	r0, #0
 800a316:	d1f8      	bne.n	800a30a <__gethex+0x96>
 800a318:	1b73      	subs	r3, r6, r5
 800a31a:	009e      	lsls	r6, r3, #2
 800a31c:	e004      	b.n	800a328 <__gethex+0xb4>
 800a31e:	2400      	movs	r4, #0
 800a320:	4626      	mov	r6, r4
 800a322:	e7e1      	b.n	800a2e8 <__gethex+0x74>
 800a324:	2e00      	cmp	r6, #0
 800a326:	d1f7      	bne.n	800a318 <__gethex+0xa4>
 800a328:	782b      	ldrb	r3, [r5, #0]
 800a32a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a32e:	2b50      	cmp	r3, #80	; 0x50
 800a330:	d13d      	bne.n	800a3ae <__gethex+0x13a>
 800a332:	786b      	ldrb	r3, [r5, #1]
 800a334:	2b2b      	cmp	r3, #43	; 0x2b
 800a336:	d02f      	beq.n	800a398 <__gethex+0x124>
 800a338:	2b2d      	cmp	r3, #45	; 0x2d
 800a33a:	d031      	beq.n	800a3a0 <__gethex+0x12c>
 800a33c:	f04f 0b00 	mov.w	fp, #0
 800a340:	1c69      	adds	r1, r5, #1
 800a342:	7808      	ldrb	r0, [r1, #0]
 800a344:	f7ff ff81 	bl	800a24a <__hexdig_fun>
 800a348:	1e42      	subs	r2, r0, #1
 800a34a:	b2d2      	uxtb	r2, r2
 800a34c:	2a18      	cmp	r2, #24
 800a34e:	d82e      	bhi.n	800a3ae <__gethex+0x13a>
 800a350:	f1a0 0210 	sub.w	r2, r0, #16
 800a354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a358:	f7ff ff77 	bl	800a24a <__hexdig_fun>
 800a35c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a360:	fa5f fc8c 	uxtb.w	ip, ip
 800a364:	f1bc 0f18 	cmp.w	ip, #24
 800a368:	d91d      	bls.n	800a3a6 <__gethex+0x132>
 800a36a:	f1bb 0f00 	cmp.w	fp, #0
 800a36e:	d000      	beq.n	800a372 <__gethex+0xfe>
 800a370:	4252      	negs	r2, r2
 800a372:	4416      	add	r6, r2
 800a374:	f8ca 1000 	str.w	r1, [sl]
 800a378:	b1dc      	cbz	r4, 800a3b2 <__gethex+0x13e>
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	bf14      	ite	ne
 800a380:	f04f 0800 	movne.w	r8, #0
 800a384:	f04f 0806 	moveq.w	r8, #6
 800a388:	4640      	mov	r0, r8
 800a38a:	b005      	add	sp, #20
 800a38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a390:	4645      	mov	r5, r8
 800a392:	4626      	mov	r6, r4
 800a394:	2401      	movs	r4, #1
 800a396:	e7c7      	b.n	800a328 <__gethex+0xb4>
 800a398:	f04f 0b00 	mov.w	fp, #0
 800a39c:	1ca9      	adds	r1, r5, #2
 800a39e:	e7d0      	b.n	800a342 <__gethex+0xce>
 800a3a0:	f04f 0b01 	mov.w	fp, #1
 800a3a4:	e7fa      	b.n	800a39c <__gethex+0x128>
 800a3a6:	230a      	movs	r3, #10
 800a3a8:	fb03 0002 	mla	r0, r3, r2, r0
 800a3ac:	e7d0      	b.n	800a350 <__gethex+0xdc>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	e7e0      	b.n	800a374 <__gethex+0x100>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	eba5 0308 	sub.w	r3, r5, r8
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	2b07      	cmp	r3, #7
 800a3bc:	dc0a      	bgt.n	800a3d4 <__gethex+0x160>
 800a3be:	4648      	mov	r0, r9
 800a3c0:	f7fe f932 	bl	8008628 <_Balloc>
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	b940      	cbnz	r0, 800a3da <__gethex+0x166>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	21e4      	movs	r1, #228	; 0xe4
 800a3cc:	4b61      	ldr	r3, [pc, #388]	; (800a554 <__gethex+0x2e0>)
 800a3ce:	4862      	ldr	r0, [pc, #392]	; (800a558 <__gethex+0x2e4>)
 800a3d0:	f7ff feb6 	bl	800a140 <__assert_func>
 800a3d4:	3101      	adds	r1, #1
 800a3d6:	105b      	asrs	r3, r3, #1
 800a3d8:	e7ef      	b.n	800a3ba <__gethex+0x146>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	469b      	mov	fp, r3
 800a3de:	f100 0a14 	add.w	sl, r0, #20
 800a3e2:	f8cd a004 	str.w	sl, [sp, #4]
 800a3e6:	45a8      	cmp	r8, r5
 800a3e8:	d344      	bcc.n	800a474 <__gethex+0x200>
 800a3ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3ee:	4658      	mov	r0, fp
 800a3f0:	f848 bb04 	str.w	fp, [r8], #4
 800a3f4:	eba8 080a 	sub.w	r8, r8, sl
 800a3f8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a3fc:	6122      	str	r2, [r4, #16]
 800a3fe:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a402:	f7fe fa03 	bl	800880c <__hi0bits>
 800a406:	683d      	ldr	r5, [r7, #0]
 800a408:	eba8 0800 	sub.w	r8, r8, r0
 800a40c:	45a8      	cmp	r8, r5
 800a40e:	dd59      	ble.n	800a4c4 <__gethex+0x250>
 800a410:	eba8 0805 	sub.w	r8, r8, r5
 800a414:	4641      	mov	r1, r8
 800a416:	4620      	mov	r0, r4
 800a418:	f7fe fd81 	bl	8008f1e <__any_on>
 800a41c:	4683      	mov	fp, r0
 800a41e:	b1b8      	cbz	r0, 800a450 <__gethex+0x1dc>
 800a420:	f04f 0b01 	mov.w	fp, #1
 800a424:	f108 33ff 	add.w	r3, r8, #4294967295
 800a428:	1159      	asrs	r1, r3, #5
 800a42a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a42e:	f003 021f 	and.w	r2, r3, #31
 800a432:	fa0b f202 	lsl.w	r2, fp, r2
 800a436:	420a      	tst	r2, r1
 800a438:	d00a      	beq.n	800a450 <__gethex+0x1dc>
 800a43a:	455b      	cmp	r3, fp
 800a43c:	dd06      	ble.n	800a44c <__gethex+0x1d8>
 800a43e:	4620      	mov	r0, r4
 800a440:	f1a8 0102 	sub.w	r1, r8, #2
 800a444:	f7fe fd6b 	bl	8008f1e <__any_on>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d138      	bne.n	800a4be <__gethex+0x24a>
 800a44c:	f04f 0b02 	mov.w	fp, #2
 800a450:	4641      	mov	r1, r8
 800a452:	4620      	mov	r0, r4
 800a454:	f7ff fea6 	bl	800a1a4 <rshift>
 800a458:	4446      	add	r6, r8
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	42b3      	cmp	r3, r6
 800a45e:	da41      	bge.n	800a4e4 <__gethex+0x270>
 800a460:	4621      	mov	r1, r4
 800a462:	4648      	mov	r0, r9
 800a464:	f7fe f920 	bl	80086a8 <_Bfree>
 800a468:	2300      	movs	r3, #0
 800a46a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a46c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	e789      	b.n	800a388 <__gethex+0x114>
 800a474:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a478:	2a2e      	cmp	r2, #46	; 0x2e
 800a47a:	d014      	beq.n	800a4a6 <__gethex+0x232>
 800a47c:	2b20      	cmp	r3, #32
 800a47e:	d106      	bne.n	800a48e <__gethex+0x21a>
 800a480:	9b01      	ldr	r3, [sp, #4]
 800a482:	f843 bb04 	str.w	fp, [r3], #4
 800a486:	f04f 0b00 	mov.w	fp, #0
 800a48a:	9301      	str	r3, [sp, #4]
 800a48c:	465b      	mov	r3, fp
 800a48e:	7828      	ldrb	r0, [r5, #0]
 800a490:	9303      	str	r3, [sp, #12]
 800a492:	f7ff feda 	bl	800a24a <__hexdig_fun>
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	f000 000f 	and.w	r0, r0, #15
 800a49c:	4098      	lsls	r0, r3
 800a49e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	e79f      	b.n	800a3e6 <__gethex+0x172>
 800a4a6:	45a8      	cmp	r8, r5
 800a4a8:	d8e8      	bhi.n	800a47c <__gethex+0x208>
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	4928      	ldr	r1, [pc, #160]	; (800a550 <__gethex+0x2dc>)
 800a4b0:	9303      	str	r3, [sp, #12]
 800a4b2:	f7ff fe0f 	bl	800a0d4 <strncmp>
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d1df      	bne.n	800a47c <__gethex+0x208>
 800a4bc:	e793      	b.n	800a3e6 <__gethex+0x172>
 800a4be:	f04f 0b03 	mov.w	fp, #3
 800a4c2:	e7c5      	b.n	800a450 <__gethex+0x1dc>
 800a4c4:	da0b      	bge.n	800a4de <__gethex+0x26a>
 800a4c6:	eba5 0808 	sub.w	r8, r5, r8
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	4648      	mov	r0, r9
 800a4d0:	f7fe fb02 	bl	8008ad8 <__lshift>
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	eba6 0608 	sub.w	r6, r6, r8
 800a4da:	f100 0a14 	add.w	sl, r0, #20
 800a4de:	f04f 0b00 	mov.w	fp, #0
 800a4e2:	e7ba      	b.n	800a45a <__gethex+0x1e6>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	42b3      	cmp	r3, r6
 800a4e8:	dd74      	ble.n	800a5d4 <__gethex+0x360>
 800a4ea:	1b9e      	subs	r6, r3, r6
 800a4ec:	42b5      	cmp	r5, r6
 800a4ee:	dc35      	bgt.n	800a55c <__gethex+0x2e8>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d023      	beq.n	800a53e <__gethex+0x2ca>
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d025      	beq.n	800a546 <__gethex+0x2d2>
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d115      	bne.n	800a52a <__gethex+0x2b6>
 800a4fe:	42b5      	cmp	r5, r6
 800a500:	d113      	bne.n	800a52a <__gethex+0x2b6>
 800a502:	2d01      	cmp	r5, #1
 800a504:	d10b      	bne.n	800a51e <__gethex+0x2aa>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	9a02      	ldr	r2, [sp, #8]
 800a50a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	2301      	movs	r3, #1
 800a512:	6123      	str	r3, [r4, #16]
 800a514:	f8ca 3000 	str.w	r3, [sl]
 800a518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a51a:	601c      	str	r4, [r3, #0]
 800a51c:	e734      	b.n	800a388 <__gethex+0x114>
 800a51e:	4620      	mov	r0, r4
 800a520:	1e69      	subs	r1, r5, #1
 800a522:	f7fe fcfc 	bl	8008f1e <__any_on>
 800a526:	2800      	cmp	r0, #0
 800a528:	d1ed      	bne.n	800a506 <__gethex+0x292>
 800a52a:	4621      	mov	r1, r4
 800a52c:	4648      	mov	r0, r9
 800a52e:	f7fe f8bb 	bl	80086a8 <_Bfree>
 800a532:	2300      	movs	r3, #0
 800a534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a536:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	e724      	b.n	800a388 <__gethex+0x114>
 800a53e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1f2      	bne.n	800a52a <__gethex+0x2b6>
 800a544:	e7df      	b.n	800a506 <__gethex+0x292>
 800a546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1dc      	bne.n	800a506 <__gethex+0x292>
 800a54c:	e7ed      	b.n	800a52a <__gethex+0x2b6>
 800a54e:	bf00      	nop
 800a550:	0800b0ec 	.word	0x0800b0ec
 800a554:	0800af7f 	.word	0x0800af7f
 800a558:	0800b296 	.word	0x0800b296
 800a55c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a560:	f1bb 0f00 	cmp.w	fp, #0
 800a564:	d133      	bne.n	800a5ce <__gethex+0x35a>
 800a566:	f1b8 0f00 	cmp.w	r8, #0
 800a56a:	d004      	beq.n	800a576 <__gethex+0x302>
 800a56c:	4641      	mov	r1, r8
 800a56e:	4620      	mov	r0, r4
 800a570:	f7fe fcd5 	bl	8008f1e <__any_on>
 800a574:	4683      	mov	fp, r0
 800a576:	2301      	movs	r3, #1
 800a578:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a57c:	f008 081f 	and.w	r8, r8, #31
 800a580:	fa03 f308 	lsl.w	r3, r3, r8
 800a584:	f04f 0802 	mov.w	r8, #2
 800a588:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a58c:	4631      	mov	r1, r6
 800a58e:	4213      	tst	r3, r2
 800a590:	4620      	mov	r0, r4
 800a592:	bf18      	it	ne
 800a594:	f04b 0b02 	orrne.w	fp, fp, #2
 800a598:	1bad      	subs	r5, r5, r6
 800a59a:	f7ff fe03 	bl	800a1a4 <rshift>
 800a59e:	687e      	ldr	r6, [r7, #4]
 800a5a0:	f1bb 0f00 	cmp.w	fp, #0
 800a5a4:	d04a      	beq.n	800a63c <__gethex+0x3c8>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d016      	beq.n	800a5da <__gethex+0x366>
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d018      	beq.n	800a5e2 <__gethex+0x36e>
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d109      	bne.n	800a5c8 <__gethex+0x354>
 800a5b4:	f01b 0f02 	tst.w	fp, #2
 800a5b8:	d006      	beq.n	800a5c8 <__gethex+0x354>
 800a5ba:	f8da 3000 	ldr.w	r3, [sl]
 800a5be:	ea4b 0b03 	orr.w	fp, fp, r3
 800a5c2:	f01b 0f01 	tst.w	fp, #1
 800a5c6:	d10f      	bne.n	800a5e8 <__gethex+0x374>
 800a5c8:	f048 0810 	orr.w	r8, r8, #16
 800a5cc:	e036      	b.n	800a63c <__gethex+0x3c8>
 800a5ce:	f04f 0b01 	mov.w	fp, #1
 800a5d2:	e7d0      	b.n	800a576 <__gethex+0x302>
 800a5d4:	f04f 0801 	mov.w	r8, #1
 800a5d8:	e7e2      	b.n	800a5a0 <__gethex+0x32c>
 800a5da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5dc:	f1c3 0301 	rsb	r3, r3, #1
 800a5e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0ef      	beq.n	800a5c8 <__gethex+0x354>
 800a5e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5ec:	f104 0214 	add.w	r2, r4, #20
 800a5f0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a5fc:	4694      	mov	ip, r2
 800a5fe:	f852 1b04 	ldr.w	r1, [r2], #4
 800a602:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a606:	d01e      	beq.n	800a646 <__gethex+0x3d2>
 800a608:	3101      	adds	r1, #1
 800a60a:	f8cc 1000 	str.w	r1, [ip]
 800a60e:	f1b8 0f02 	cmp.w	r8, #2
 800a612:	f104 0214 	add.w	r2, r4, #20
 800a616:	d13d      	bne.n	800a694 <__gethex+0x420>
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	d10b      	bne.n	800a638 <__gethex+0x3c4>
 800a620:	2301      	movs	r3, #1
 800a622:	1169      	asrs	r1, r5, #5
 800a624:	f005 051f 	and.w	r5, r5, #31
 800a628:	fa03 f505 	lsl.w	r5, r3, r5
 800a62c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a630:	421d      	tst	r5, r3
 800a632:	bf18      	it	ne
 800a634:	f04f 0801 	movne.w	r8, #1
 800a638:	f048 0820 	orr.w	r8, r8, #32
 800a63c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a63e:	601c      	str	r4, [r3, #0]
 800a640:	9b02      	ldr	r3, [sp, #8]
 800a642:	601e      	str	r6, [r3, #0]
 800a644:	e6a0      	b.n	800a388 <__gethex+0x114>
 800a646:	4290      	cmp	r0, r2
 800a648:	f842 3c04 	str.w	r3, [r2, #-4]
 800a64c:	d8d6      	bhi.n	800a5fc <__gethex+0x388>
 800a64e:	68a2      	ldr	r2, [r4, #8]
 800a650:	4593      	cmp	fp, r2
 800a652:	db17      	blt.n	800a684 <__gethex+0x410>
 800a654:	6861      	ldr	r1, [r4, #4]
 800a656:	4648      	mov	r0, r9
 800a658:	3101      	adds	r1, #1
 800a65a:	f7fd ffe5 	bl	8008628 <_Balloc>
 800a65e:	4682      	mov	sl, r0
 800a660:	b918      	cbnz	r0, 800a66a <__gethex+0x3f6>
 800a662:	4602      	mov	r2, r0
 800a664:	2184      	movs	r1, #132	; 0x84
 800a666:	4b1a      	ldr	r3, [pc, #104]	; (800a6d0 <__gethex+0x45c>)
 800a668:	e6b1      	b.n	800a3ce <__gethex+0x15a>
 800a66a:	6922      	ldr	r2, [r4, #16]
 800a66c:	f104 010c 	add.w	r1, r4, #12
 800a670:	3202      	adds	r2, #2
 800a672:	0092      	lsls	r2, r2, #2
 800a674:	300c      	adds	r0, #12
 800a676:	f7ff fd4f 	bl	800a118 <memcpy>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4648      	mov	r0, r9
 800a67e:	f7fe f813 	bl	80086a8 <_Bfree>
 800a682:	4654      	mov	r4, sl
 800a684:	6922      	ldr	r2, [r4, #16]
 800a686:	1c51      	adds	r1, r2, #1
 800a688:	6121      	str	r1, [r4, #16]
 800a68a:	2101      	movs	r1, #1
 800a68c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a690:	6151      	str	r1, [r2, #20]
 800a692:	e7bc      	b.n	800a60e <__gethex+0x39a>
 800a694:	6921      	ldr	r1, [r4, #16]
 800a696:	4559      	cmp	r1, fp
 800a698:	dd0b      	ble.n	800a6b2 <__gethex+0x43e>
 800a69a:	2101      	movs	r1, #1
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff fd81 	bl	800a1a4 <rshift>
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	3601      	adds	r6, #1
 800a6a6:	42b3      	cmp	r3, r6
 800a6a8:	f6ff aeda 	blt.w	800a460 <__gethex+0x1ec>
 800a6ac:	f04f 0801 	mov.w	r8, #1
 800a6b0:	e7c2      	b.n	800a638 <__gethex+0x3c4>
 800a6b2:	f015 051f 	ands.w	r5, r5, #31
 800a6b6:	d0f9      	beq.n	800a6ac <__gethex+0x438>
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	f1c5 0520 	rsb	r5, r5, #32
 800a6be:	441a      	add	r2, r3
 800a6c0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a6c4:	f7fe f8a2 	bl	800880c <__hi0bits>
 800a6c8:	42a8      	cmp	r0, r5
 800a6ca:	dbe6      	blt.n	800a69a <__gethex+0x426>
 800a6cc:	e7ee      	b.n	800a6ac <__gethex+0x438>
 800a6ce:	bf00      	nop
 800a6d0:	0800af7f 	.word	0x0800af7f

0800a6d4 <L_shift>:
 800a6d4:	f1c2 0208 	rsb	r2, r2, #8
 800a6d8:	0092      	lsls	r2, r2, #2
 800a6da:	b570      	push	{r4, r5, r6, lr}
 800a6dc:	f1c2 0620 	rsb	r6, r2, #32
 800a6e0:	6843      	ldr	r3, [r0, #4]
 800a6e2:	6804      	ldr	r4, [r0, #0]
 800a6e4:	fa03 f506 	lsl.w	r5, r3, r6
 800a6e8:	432c      	orrs	r4, r5
 800a6ea:	40d3      	lsrs	r3, r2
 800a6ec:	6004      	str	r4, [r0, #0]
 800a6ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6f2:	4288      	cmp	r0, r1
 800a6f4:	d3f4      	bcc.n	800a6e0 <L_shift+0xc>
 800a6f6:	bd70      	pop	{r4, r5, r6, pc}

0800a6f8 <__match>:
 800a6f8:	b530      	push	{r4, r5, lr}
 800a6fa:	6803      	ldr	r3, [r0, #0]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a702:	b914      	cbnz	r4, 800a70a <__match+0x12>
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	2001      	movs	r0, #1
 800a708:	bd30      	pop	{r4, r5, pc}
 800a70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a712:	2d19      	cmp	r5, #25
 800a714:	bf98      	it	ls
 800a716:	3220      	addls	r2, #32
 800a718:	42a2      	cmp	r2, r4
 800a71a:	d0f0      	beq.n	800a6fe <__match+0x6>
 800a71c:	2000      	movs	r0, #0
 800a71e:	e7f3      	b.n	800a708 <__match+0x10>

0800a720 <__hexnan>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	2500      	movs	r5, #0
 800a726:	680b      	ldr	r3, [r1, #0]
 800a728:	4682      	mov	sl, r0
 800a72a:	115e      	asrs	r6, r3, #5
 800a72c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a730:	f013 031f 	ands.w	r3, r3, #31
 800a734:	bf18      	it	ne
 800a736:	3604      	addne	r6, #4
 800a738:	1f37      	subs	r7, r6, #4
 800a73a:	4690      	mov	r8, r2
 800a73c:	46b9      	mov	r9, r7
 800a73e:	463c      	mov	r4, r7
 800a740:	46ab      	mov	fp, r5
 800a742:	b087      	sub	sp, #28
 800a744:	6801      	ldr	r1, [r0, #0]
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	f846 5c04 	str.w	r5, [r6, #-4]
 800a74c:	9502      	str	r5, [sp, #8]
 800a74e:	784a      	ldrb	r2, [r1, #1]
 800a750:	1c4b      	adds	r3, r1, #1
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	b342      	cbz	r2, 800a7a8 <__hexnan+0x88>
 800a756:	4610      	mov	r0, r2
 800a758:	9105      	str	r1, [sp, #20]
 800a75a:	9204      	str	r2, [sp, #16]
 800a75c:	f7ff fd75 	bl	800a24a <__hexdig_fun>
 800a760:	2800      	cmp	r0, #0
 800a762:	d14f      	bne.n	800a804 <__hexnan+0xe4>
 800a764:	9a04      	ldr	r2, [sp, #16]
 800a766:	9905      	ldr	r1, [sp, #20]
 800a768:	2a20      	cmp	r2, #32
 800a76a:	d818      	bhi.n	800a79e <__hexnan+0x7e>
 800a76c:	9b02      	ldr	r3, [sp, #8]
 800a76e:	459b      	cmp	fp, r3
 800a770:	dd13      	ble.n	800a79a <__hexnan+0x7a>
 800a772:	454c      	cmp	r4, r9
 800a774:	d206      	bcs.n	800a784 <__hexnan+0x64>
 800a776:	2d07      	cmp	r5, #7
 800a778:	dc04      	bgt.n	800a784 <__hexnan+0x64>
 800a77a:	462a      	mov	r2, r5
 800a77c:	4649      	mov	r1, r9
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff ffa8 	bl	800a6d4 <L_shift>
 800a784:	4544      	cmp	r4, r8
 800a786:	d950      	bls.n	800a82a <__hexnan+0x10a>
 800a788:	2300      	movs	r3, #0
 800a78a:	f1a4 0904 	sub.w	r9, r4, #4
 800a78e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a792:	461d      	mov	r5, r3
 800a794:	464c      	mov	r4, r9
 800a796:	f8cd b008 	str.w	fp, [sp, #8]
 800a79a:	9903      	ldr	r1, [sp, #12]
 800a79c:	e7d7      	b.n	800a74e <__hexnan+0x2e>
 800a79e:	2a29      	cmp	r2, #41	; 0x29
 800a7a0:	d155      	bne.n	800a84e <__hexnan+0x12e>
 800a7a2:	3102      	adds	r1, #2
 800a7a4:	f8ca 1000 	str.w	r1, [sl]
 800a7a8:	f1bb 0f00 	cmp.w	fp, #0
 800a7ac:	d04f      	beq.n	800a84e <__hexnan+0x12e>
 800a7ae:	454c      	cmp	r4, r9
 800a7b0:	d206      	bcs.n	800a7c0 <__hexnan+0xa0>
 800a7b2:	2d07      	cmp	r5, #7
 800a7b4:	dc04      	bgt.n	800a7c0 <__hexnan+0xa0>
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f7ff ff8a 	bl	800a6d4 <L_shift>
 800a7c0:	4544      	cmp	r4, r8
 800a7c2:	d934      	bls.n	800a82e <__hexnan+0x10e>
 800a7c4:	4623      	mov	r3, r4
 800a7c6:	f1a8 0204 	sub.w	r2, r8, #4
 800a7ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7ce:	429f      	cmp	r7, r3
 800a7d0:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7d4:	d2f9      	bcs.n	800a7ca <__hexnan+0xaa>
 800a7d6:	1b3b      	subs	r3, r7, r4
 800a7d8:	f023 0303 	bic.w	r3, r3, #3
 800a7dc:	3304      	adds	r3, #4
 800a7de:	3e03      	subs	r6, #3
 800a7e0:	3401      	adds	r4, #1
 800a7e2:	42a6      	cmp	r6, r4
 800a7e4:	bf38      	it	cc
 800a7e6:	2304      	movcc	r3, #4
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4443      	add	r3, r8
 800a7ec:	f843 2b04 	str.w	r2, [r3], #4
 800a7f0:	429f      	cmp	r7, r3
 800a7f2:	d2fb      	bcs.n	800a7ec <__hexnan+0xcc>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	b91b      	cbnz	r3, 800a800 <__hexnan+0xe0>
 800a7f8:	4547      	cmp	r7, r8
 800a7fa:	d126      	bne.n	800a84a <__hexnan+0x12a>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	2005      	movs	r0, #5
 800a802:	e025      	b.n	800a850 <__hexnan+0x130>
 800a804:	3501      	adds	r5, #1
 800a806:	2d08      	cmp	r5, #8
 800a808:	f10b 0b01 	add.w	fp, fp, #1
 800a80c:	dd06      	ble.n	800a81c <__hexnan+0xfc>
 800a80e:	4544      	cmp	r4, r8
 800a810:	d9c3      	bls.n	800a79a <__hexnan+0x7a>
 800a812:	2300      	movs	r3, #0
 800a814:	2501      	movs	r5, #1
 800a816:	f844 3c04 	str.w	r3, [r4, #-4]
 800a81a:	3c04      	subs	r4, #4
 800a81c:	6822      	ldr	r2, [r4, #0]
 800a81e:	f000 000f 	and.w	r0, r0, #15
 800a822:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a826:	6020      	str	r0, [r4, #0]
 800a828:	e7b7      	b.n	800a79a <__hexnan+0x7a>
 800a82a:	2508      	movs	r5, #8
 800a82c:	e7b5      	b.n	800a79a <__hexnan+0x7a>
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0df      	beq.n	800a7f4 <__hexnan+0xd4>
 800a834:	f04f 32ff 	mov.w	r2, #4294967295
 800a838:	f1c3 0320 	rsb	r3, r3, #32
 800a83c:	40da      	lsrs	r2, r3
 800a83e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a842:	4013      	ands	r3, r2
 800a844:	f846 3c04 	str.w	r3, [r6, #-4]
 800a848:	e7d4      	b.n	800a7f4 <__hexnan+0xd4>
 800a84a:	3f04      	subs	r7, #4
 800a84c:	e7d2      	b.n	800a7f4 <__hexnan+0xd4>
 800a84e:	2004      	movs	r0, #4
 800a850:	b007      	add	sp, #28
 800a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a856 <__ascii_mbtowc>:
 800a856:	b082      	sub	sp, #8
 800a858:	b901      	cbnz	r1, 800a85c <__ascii_mbtowc+0x6>
 800a85a:	a901      	add	r1, sp, #4
 800a85c:	b142      	cbz	r2, 800a870 <__ascii_mbtowc+0x1a>
 800a85e:	b14b      	cbz	r3, 800a874 <__ascii_mbtowc+0x1e>
 800a860:	7813      	ldrb	r3, [r2, #0]
 800a862:	600b      	str	r3, [r1, #0]
 800a864:	7812      	ldrb	r2, [r2, #0]
 800a866:	1e10      	subs	r0, r2, #0
 800a868:	bf18      	it	ne
 800a86a:	2001      	movne	r0, #1
 800a86c:	b002      	add	sp, #8
 800a86e:	4770      	bx	lr
 800a870:	4610      	mov	r0, r2
 800a872:	e7fb      	b.n	800a86c <__ascii_mbtowc+0x16>
 800a874:	f06f 0001 	mvn.w	r0, #1
 800a878:	e7f8      	b.n	800a86c <__ascii_mbtowc+0x16>

0800a87a <_realloc_r>:
 800a87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87e:	4680      	mov	r8, r0
 800a880:	4614      	mov	r4, r2
 800a882:	460e      	mov	r6, r1
 800a884:	b921      	cbnz	r1, 800a890 <_realloc_r+0x16>
 800a886:	4611      	mov	r1, r2
 800a888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a88c:	f7fd be40 	b.w	8008510 <_malloc_r>
 800a890:	b92a      	cbnz	r2, 800a89e <_realloc_r+0x24>
 800a892:	f7fd fdcd 	bl	8008430 <_free_r>
 800a896:	4625      	mov	r5, r4
 800a898:	4628      	mov	r0, r5
 800a89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a89e:	f000 f842 	bl	800a926 <_malloc_usable_size_r>
 800a8a2:	4284      	cmp	r4, r0
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	d802      	bhi.n	800a8ae <_realloc_r+0x34>
 800a8a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8ac:	d812      	bhi.n	800a8d4 <_realloc_r+0x5a>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	f7fd fe2d 	bl	8008510 <_malloc_r>
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d0ed      	beq.n	800a898 <_realloc_r+0x1e>
 800a8bc:	42bc      	cmp	r4, r7
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	bf28      	it	cs
 800a8c4:	463a      	movcs	r2, r7
 800a8c6:	f7ff fc27 	bl	800a118 <memcpy>
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	f7fd fdaf 	bl	8008430 <_free_r>
 800a8d2:	e7e1      	b.n	800a898 <_realloc_r+0x1e>
 800a8d4:	4635      	mov	r5, r6
 800a8d6:	e7df      	b.n	800a898 <_realloc_r+0x1e>

0800a8d8 <__ascii_wctomb>:
 800a8d8:	4603      	mov	r3, r0
 800a8da:	4608      	mov	r0, r1
 800a8dc:	b141      	cbz	r1, 800a8f0 <__ascii_wctomb+0x18>
 800a8de:	2aff      	cmp	r2, #255	; 0xff
 800a8e0:	d904      	bls.n	800a8ec <__ascii_wctomb+0x14>
 800a8e2:	228a      	movs	r2, #138	; 0x8a
 800a8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	4770      	bx	lr
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	700a      	strb	r2, [r1, #0]
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <fiprintf>:
 800a8f4:	b40e      	push	{r1, r2, r3}
 800a8f6:	b503      	push	{r0, r1, lr}
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	ab03      	add	r3, sp, #12
 800a8fc:	4805      	ldr	r0, [pc, #20]	; (800a914 <fiprintf+0x20>)
 800a8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a902:	6800      	ldr	r0, [r0, #0]
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	f000 f83d 	bl	800a984 <_vfiprintf_r>
 800a90a:	b002      	add	sp, #8
 800a90c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a910:	b003      	add	sp, #12
 800a912:	4770      	bx	lr
 800a914:	2000007c 	.word	0x2000007c

0800a918 <abort>:
 800a918:	2006      	movs	r0, #6
 800a91a:	b508      	push	{r3, lr}
 800a91c:	f000 fa0a 	bl	800ad34 <raise>
 800a920:	2001      	movs	r0, #1
 800a922:	f7f7 fbd2 	bl	80020ca <_exit>

0800a926 <_malloc_usable_size_r>:
 800a926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92a:	1f18      	subs	r0, r3, #4
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bfbc      	itt	lt
 800a930:	580b      	ldrlt	r3, [r1, r0]
 800a932:	18c0      	addlt	r0, r0, r3
 800a934:	4770      	bx	lr

0800a936 <__sfputc_r>:
 800a936:	6893      	ldr	r3, [r2, #8]
 800a938:	b410      	push	{r4}
 800a93a:	3b01      	subs	r3, #1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	6093      	str	r3, [r2, #8]
 800a940:	da07      	bge.n	800a952 <__sfputc_r+0x1c>
 800a942:	6994      	ldr	r4, [r2, #24]
 800a944:	42a3      	cmp	r3, r4
 800a946:	db01      	blt.n	800a94c <__sfputc_r+0x16>
 800a948:	290a      	cmp	r1, #10
 800a94a:	d102      	bne.n	800a952 <__sfputc_r+0x1c>
 800a94c:	bc10      	pop	{r4}
 800a94e:	f000 b933 	b.w	800abb8 <__swbuf_r>
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	1c58      	adds	r0, r3, #1
 800a956:	6010      	str	r0, [r2, #0]
 800a958:	7019      	strb	r1, [r3, #0]
 800a95a:	4608      	mov	r0, r1
 800a95c:	bc10      	pop	{r4}
 800a95e:	4770      	bx	lr

0800a960 <__sfputs_r>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	4614      	mov	r4, r2
 800a968:	18d5      	adds	r5, r2, r3
 800a96a:	42ac      	cmp	r4, r5
 800a96c:	d101      	bne.n	800a972 <__sfputs_r+0x12>
 800a96e:	2000      	movs	r0, #0
 800a970:	e007      	b.n	800a982 <__sfputs_r+0x22>
 800a972:	463a      	mov	r2, r7
 800a974:	4630      	mov	r0, r6
 800a976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a97a:	f7ff ffdc 	bl	800a936 <__sfputc_r>
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d1f3      	bne.n	800a96a <__sfputs_r+0xa>
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a984 <_vfiprintf_r>:
 800a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	460d      	mov	r5, r1
 800a98a:	4614      	mov	r4, r2
 800a98c:	4698      	mov	r8, r3
 800a98e:	4606      	mov	r6, r0
 800a990:	b09d      	sub	sp, #116	; 0x74
 800a992:	b118      	cbz	r0, 800a99c <_vfiprintf_r+0x18>
 800a994:	6a03      	ldr	r3, [r0, #32]
 800a996:	b90b      	cbnz	r3, 800a99c <_vfiprintf_r+0x18>
 800a998:	f7fc fd90 	bl	80074bc <__sinit>
 800a99c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a99e:	07d9      	lsls	r1, r3, #31
 800a9a0:	d405      	bmi.n	800a9ae <_vfiprintf_r+0x2a>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	059a      	lsls	r2, r3, #22
 800a9a6:	d402      	bmi.n	800a9ae <_vfiprintf_r+0x2a>
 800a9a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9aa:	f7fc febe 	bl	800772a <__retarget_lock_acquire_recursive>
 800a9ae:	89ab      	ldrh	r3, [r5, #12]
 800a9b0:	071b      	lsls	r3, r3, #28
 800a9b2:	d501      	bpl.n	800a9b8 <_vfiprintf_r+0x34>
 800a9b4:	692b      	ldr	r3, [r5, #16]
 800a9b6:	b99b      	cbnz	r3, 800a9e0 <_vfiprintf_r+0x5c>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 f93a 	bl	800ac34 <__swsetup_r>
 800a9c0:	b170      	cbz	r0, 800a9e0 <_vfiprintf_r+0x5c>
 800a9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9c4:	07dc      	lsls	r4, r3, #31
 800a9c6:	d504      	bpl.n	800a9d2 <_vfiprintf_r+0x4e>
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	b01d      	add	sp, #116	; 0x74
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	0598      	lsls	r0, r3, #22
 800a9d6:	d4f7      	bmi.n	800a9c8 <_vfiprintf_r+0x44>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9da:	f7fc fea7 	bl	800772c <__retarget_lock_release_recursive>
 800a9de:	e7f3      	b.n	800a9c8 <_vfiprintf_r+0x44>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e4:	2320      	movs	r3, #32
 800a9e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9ea:	2330      	movs	r3, #48	; 0x30
 800a9ec:	f04f 0901 	mov.w	r9, #1
 800a9f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800aba4 <_vfiprintf_r+0x220>
 800a9f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9fc:	4623      	mov	r3, r4
 800a9fe:	469a      	mov	sl, r3
 800aa00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa04:	b10a      	cbz	r2, 800aa0a <_vfiprintf_r+0x86>
 800aa06:	2a25      	cmp	r2, #37	; 0x25
 800aa08:	d1f9      	bne.n	800a9fe <_vfiprintf_r+0x7a>
 800aa0a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa0e:	d00b      	beq.n	800aa28 <_vfiprintf_r+0xa4>
 800aa10:	465b      	mov	r3, fp
 800aa12:	4622      	mov	r2, r4
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ffa2 	bl	800a960 <__sfputs_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	f000 80a9 	beq.w	800ab74 <_vfiprintf_r+0x1f0>
 800aa22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa24:	445a      	add	r2, fp
 800aa26:	9209      	str	r2, [sp, #36]	; 0x24
 800aa28:	f89a 3000 	ldrb.w	r3, [sl]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 80a1 	beq.w	800ab74 <_vfiprintf_r+0x1f0>
 800aa32:	2300      	movs	r3, #0
 800aa34:	f04f 32ff 	mov.w	r2, #4294967295
 800aa38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa3c:	f10a 0a01 	add.w	sl, sl, #1
 800aa40:	9304      	str	r3, [sp, #16]
 800aa42:	9307      	str	r3, [sp, #28]
 800aa44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa48:	931a      	str	r3, [sp, #104]	; 0x68
 800aa4a:	4654      	mov	r4, sl
 800aa4c:	2205      	movs	r2, #5
 800aa4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa52:	4854      	ldr	r0, [pc, #336]	; (800aba4 <_vfiprintf_r+0x220>)
 800aa54:	f7fc fe6b 	bl	800772e <memchr>
 800aa58:	9a04      	ldr	r2, [sp, #16]
 800aa5a:	b9d8      	cbnz	r0, 800aa94 <_vfiprintf_r+0x110>
 800aa5c:	06d1      	lsls	r1, r2, #27
 800aa5e:	bf44      	itt	mi
 800aa60:	2320      	movmi	r3, #32
 800aa62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa66:	0713      	lsls	r3, r2, #28
 800aa68:	bf44      	itt	mi
 800aa6a:	232b      	movmi	r3, #43	; 0x2b
 800aa6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa70:	f89a 3000 	ldrb.w	r3, [sl]
 800aa74:	2b2a      	cmp	r3, #42	; 0x2a
 800aa76:	d015      	beq.n	800aaa4 <_vfiprintf_r+0x120>
 800aa78:	4654      	mov	r4, sl
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	f04f 0c0a 	mov.w	ip, #10
 800aa80:	9a07      	ldr	r2, [sp, #28]
 800aa82:	4621      	mov	r1, r4
 800aa84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa88:	3b30      	subs	r3, #48	; 0x30
 800aa8a:	2b09      	cmp	r3, #9
 800aa8c:	d94d      	bls.n	800ab2a <_vfiprintf_r+0x1a6>
 800aa8e:	b1b0      	cbz	r0, 800aabe <_vfiprintf_r+0x13a>
 800aa90:	9207      	str	r2, [sp, #28]
 800aa92:	e014      	b.n	800aabe <_vfiprintf_r+0x13a>
 800aa94:	eba0 0308 	sub.w	r3, r0, r8
 800aa98:	fa09 f303 	lsl.w	r3, r9, r3
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	46a2      	mov	sl, r4
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	e7d2      	b.n	800aa4a <_vfiprintf_r+0xc6>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	1d19      	adds	r1, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	9103      	str	r1, [sp, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bfbb      	ittet	lt
 800aab0:	425b      	neglt	r3, r3
 800aab2:	f042 0202 	orrlt.w	r2, r2, #2
 800aab6:	9307      	strge	r3, [sp, #28]
 800aab8:	9307      	strlt	r3, [sp, #28]
 800aaba:	bfb8      	it	lt
 800aabc:	9204      	strlt	r2, [sp, #16]
 800aabe:	7823      	ldrb	r3, [r4, #0]
 800aac0:	2b2e      	cmp	r3, #46	; 0x2e
 800aac2:	d10c      	bne.n	800aade <_vfiprintf_r+0x15a>
 800aac4:	7863      	ldrb	r3, [r4, #1]
 800aac6:	2b2a      	cmp	r3, #42	; 0x2a
 800aac8:	d134      	bne.n	800ab34 <_vfiprintf_r+0x1b0>
 800aaca:	9b03      	ldr	r3, [sp, #12]
 800aacc:	3402      	adds	r4, #2
 800aace:	1d1a      	adds	r2, r3, #4
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	9203      	str	r2, [sp, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfb8      	it	lt
 800aad8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aadc:	9305      	str	r3, [sp, #20]
 800aade:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aba8 <_vfiprintf_r+0x224>
 800aae2:	2203      	movs	r2, #3
 800aae4:	4650      	mov	r0, sl
 800aae6:	7821      	ldrb	r1, [r4, #0]
 800aae8:	f7fc fe21 	bl	800772e <memchr>
 800aaec:	b138      	cbz	r0, 800aafe <_vfiprintf_r+0x17a>
 800aaee:	2240      	movs	r2, #64	; 0x40
 800aaf0:	9b04      	ldr	r3, [sp, #16]
 800aaf2:	eba0 000a 	sub.w	r0, r0, sl
 800aaf6:	4082      	lsls	r2, r0
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	3401      	adds	r4, #1
 800aafc:	9304      	str	r3, [sp, #16]
 800aafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab02:	2206      	movs	r2, #6
 800ab04:	4829      	ldr	r0, [pc, #164]	; (800abac <_vfiprintf_r+0x228>)
 800ab06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab0a:	f7fc fe10 	bl	800772e <memchr>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d03f      	beq.n	800ab92 <_vfiprintf_r+0x20e>
 800ab12:	4b27      	ldr	r3, [pc, #156]	; (800abb0 <_vfiprintf_r+0x22c>)
 800ab14:	bb1b      	cbnz	r3, 800ab5e <_vfiprintf_r+0x1da>
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	3307      	adds	r3, #7
 800ab1a:	f023 0307 	bic.w	r3, r3, #7
 800ab1e:	3308      	adds	r3, #8
 800ab20:	9303      	str	r3, [sp, #12]
 800ab22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab24:	443b      	add	r3, r7
 800ab26:	9309      	str	r3, [sp, #36]	; 0x24
 800ab28:	e768      	b.n	800a9fc <_vfiprintf_r+0x78>
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab32:	e7a6      	b.n	800aa82 <_vfiprintf_r+0xfe>
 800ab34:	2300      	movs	r3, #0
 800ab36:	f04f 0c0a 	mov.w	ip, #10
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	3401      	adds	r4, #1
 800ab3e:	9305      	str	r3, [sp, #20]
 800ab40:	4620      	mov	r0, r4
 800ab42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab46:	3a30      	subs	r2, #48	; 0x30
 800ab48:	2a09      	cmp	r2, #9
 800ab4a:	d903      	bls.n	800ab54 <_vfiprintf_r+0x1d0>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d0c6      	beq.n	800aade <_vfiprintf_r+0x15a>
 800ab50:	9105      	str	r1, [sp, #20]
 800ab52:	e7c4      	b.n	800aade <_vfiprintf_r+0x15a>
 800ab54:	4604      	mov	r4, r0
 800ab56:	2301      	movs	r3, #1
 800ab58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab5c:	e7f0      	b.n	800ab40 <_vfiprintf_r+0x1bc>
 800ab5e:	ab03      	add	r3, sp, #12
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	462a      	mov	r2, r5
 800ab64:	4630      	mov	r0, r6
 800ab66:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <_vfiprintf_r+0x230>)
 800ab68:	a904      	add	r1, sp, #16
 800ab6a:	f7fb fe4b 	bl	8006804 <_printf_float>
 800ab6e:	4607      	mov	r7, r0
 800ab70:	1c78      	adds	r0, r7, #1
 800ab72:	d1d6      	bne.n	800ab22 <_vfiprintf_r+0x19e>
 800ab74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab76:	07d9      	lsls	r1, r3, #31
 800ab78:	d405      	bmi.n	800ab86 <_vfiprintf_r+0x202>
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	059a      	lsls	r2, r3, #22
 800ab7e:	d402      	bmi.n	800ab86 <_vfiprintf_r+0x202>
 800ab80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab82:	f7fc fdd3 	bl	800772c <__retarget_lock_release_recursive>
 800ab86:	89ab      	ldrh	r3, [r5, #12]
 800ab88:	065b      	lsls	r3, r3, #25
 800ab8a:	f53f af1d 	bmi.w	800a9c8 <_vfiprintf_r+0x44>
 800ab8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab90:	e71c      	b.n	800a9cc <_vfiprintf_r+0x48>
 800ab92:	ab03      	add	r3, sp, #12
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	462a      	mov	r2, r5
 800ab98:	4630      	mov	r0, r6
 800ab9a:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <_vfiprintf_r+0x230>)
 800ab9c:	a904      	add	r1, sp, #16
 800ab9e:	f7fc f8d1 	bl	8006d44 <_printf_i>
 800aba2:	e7e4      	b.n	800ab6e <_vfiprintf_r+0x1ea>
 800aba4:	0800b241 	.word	0x0800b241
 800aba8:	0800b247 	.word	0x0800b247
 800abac:	0800b24b 	.word	0x0800b24b
 800abb0:	08006805 	.word	0x08006805
 800abb4:	0800a961 	.word	0x0800a961

0800abb8 <__swbuf_r>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	460e      	mov	r6, r1
 800abbc:	4614      	mov	r4, r2
 800abbe:	4605      	mov	r5, r0
 800abc0:	b118      	cbz	r0, 800abca <__swbuf_r+0x12>
 800abc2:	6a03      	ldr	r3, [r0, #32]
 800abc4:	b90b      	cbnz	r3, 800abca <__swbuf_r+0x12>
 800abc6:	f7fc fc79 	bl	80074bc <__sinit>
 800abca:	69a3      	ldr	r3, [r4, #24]
 800abcc:	60a3      	str	r3, [r4, #8]
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	071a      	lsls	r2, r3, #28
 800abd2:	d525      	bpl.n	800ac20 <__swbuf_r+0x68>
 800abd4:	6923      	ldr	r3, [r4, #16]
 800abd6:	b31b      	cbz	r3, 800ac20 <__swbuf_r+0x68>
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	6922      	ldr	r2, [r4, #16]
 800abdc:	b2f6      	uxtb	r6, r6
 800abde:	1a98      	subs	r0, r3, r2
 800abe0:	6963      	ldr	r3, [r4, #20]
 800abe2:	4637      	mov	r7, r6
 800abe4:	4283      	cmp	r3, r0
 800abe6:	dc04      	bgt.n	800abf2 <__swbuf_r+0x3a>
 800abe8:	4621      	mov	r1, r4
 800abea:	4628      	mov	r0, r5
 800abec:	f7ff fa30 	bl	800a050 <_fflush_r>
 800abf0:	b9e0      	cbnz	r0, 800ac2c <__swbuf_r+0x74>
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	60a3      	str	r3, [r4, #8]
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	6022      	str	r2, [r4, #0]
 800abfe:	701e      	strb	r6, [r3, #0]
 800ac00:	6962      	ldr	r2, [r4, #20]
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d004      	beq.n	800ac12 <__swbuf_r+0x5a>
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	07db      	lsls	r3, r3, #31
 800ac0c:	d506      	bpl.n	800ac1c <__swbuf_r+0x64>
 800ac0e:	2e0a      	cmp	r6, #10
 800ac10:	d104      	bne.n	800ac1c <__swbuf_r+0x64>
 800ac12:	4621      	mov	r1, r4
 800ac14:	4628      	mov	r0, r5
 800ac16:	f7ff fa1b 	bl	800a050 <_fflush_r>
 800ac1a:	b938      	cbnz	r0, 800ac2c <__swbuf_r+0x74>
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac20:	4621      	mov	r1, r4
 800ac22:	4628      	mov	r0, r5
 800ac24:	f000 f806 	bl	800ac34 <__swsetup_r>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d0d5      	beq.n	800abd8 <__swbuf_r+0x20>
 800ac2c:	f04f 37ff 	mov.w	r7, #4294967295
 800ac30:	e7f4      	b.n	800ac1c <__swbuf_r+0x64>
	...

0800ac34 <__swsetup_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4b2a      	ldr	r3, [pc, #168]	; (800ace0 <__swsetup_r+0xac>)
 800ac38:	4605      	mov	r5, r0
 800ac3a:	6818      	ldr	r0, [r3, #0]
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	b118      	cbz	r0, 800ac48 <__swsetup_r+0x14>
 800ac40:	6a03      	ldr	r3, [r0, #32]
 800ac42:	b90b      	cbnz	r3, 800ac48 <__swsetup_r+0x14>
 800ac44:	f7fc fc3a 	bl	80074bc <__sinit>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac4e:	0718      	lsls	r0, r3, #28
 800ac50:	d422      	bmi.n	800ac98 <__swsetup_r+0x64>
 800ac52:	06d9      	lsls	r1, r3, #27
 800ac54:	d407      	bmi.n	800ac66 <__swsetup_r+0x32>
 800ac56:	2309      	movs	r3, #9
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	e034      	b.n	800acd0 <__swsetup_r+0x9c>
 800ac66:	0758      	lsls	r0, r3, #29
 800ac68:	d512      	bpl.n	800ac90 <__swsetup_r+0x5c>
 800ac6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac6c:	b141      	cbz	r1, 800ac80 <__swsetup_r+0x4c>
 800ac6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac72:	4299      	cmp	r1, r3
 800ac74:	d002      	beq.n	800ac7c <__swsetup_r+0x48>
 800ac76:	4628      	mov	r0, r5
 800ac78:	f7fd fbda 	bl	8008430 <_free_r>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6363      	str	r3, [r4, #52]	; 0x34
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6063      	str	r3, [r4, #4]
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f043 0308 	orr.w	r3, r3, #8
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	b94b      	cbnz	r3, 800acb0 <__swsetup_r+0x7c>
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aca6:	d003      	beq.n	800acb0 <__swsetup_r+0x7c>
 800aca8:	4621      	mov	r1, r4
 800acaa:	4628      	mov	r0, r5
 800acac:	f000 f883 	bl	800adb6 <__smakebuf_r>
 800acb0:	89a0      	ldrh	r0, [r4, #12]
 800acb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acb6:	f010 0301 	ands.w	r3, r0, #1
 800acba:	d00a      	beq.n	800acd2 <__swsetup_r+0x9e>
 800acbc:	2300      	movs	r3, #0
 800acbe:	60a3      	str	r3, [r4, #8]
 800acc0:	6963      	ldr	r3, [r4, #20]
 800acc2:	425b      	negs	r3, r3
 800acc4:	61a3      	str	r3, [r4, #24]
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	b943      	cbnz	r3, 800acdc <__swsetup_r+0xa8>
 800acca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acce:	d1c4      	bne.n	800ac5a <__swsetup_r+0x26>
 800acd0:	bd38      	pop	{r3, r4, r5, pc}
 800acd2:	0781      	lsls	r1, r0, #30
 800acd4:	bf58      	it	pl
 800acd6:	6963      	ldrpl	r3, [r4, #20]
 800acd8:	60a3      	str	r3, [r4, #8]
 800acda:	e7f4      	b.n	800acc6 <__swsetup_r+0x92>
 800acdc:	2000      	movs	r0, #0
 800acde:	e7f7      	b.n	800acd0 <__swsetup_r+0x9c>
 800ace0:	2000007c 	.word	0x2000007c

0800ace4 <_raise_r>:
 800ace4:	291f      	cmp	r1, #31
 800ace6:	b538      	push	{r3, r4, r5, lr}
 800ace8:	4604      	mov	r4, r0
 800acea:	460d      	mov	r5, r1
 800acec:	d904      	bls.n	800acf8 <_raise_r+0x14>
 800acee:	2316      	movs	r3, #22
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	f04f 30ff 	mov.w	r0, #4294967295
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800acfa:	b112      	cbz	r2, 800ad02 <_raise_r+0x1e>
 800acfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad00:	b94b      	cbnz	r3, 800ad16 <_raise_r+0x32>
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 f830 	bl	800ad68 <_getpid_r>
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4601      	mov	r1, r0
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad12:	f000 b817 	b.w	800ad44 <_kill_r>
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d00a      	beq.n	800ad30 <_raise_r+0x4c>
 800ad1a:	1c59      	adds	r1, r3, #1
 800ad1c:	d103      	bne.n	800ad26 <_raise_r+0x42>
 800ad1e:	2316      	movs	r3, #22
 800ad20:	6003      	str	r3, [r0, #0]
 800ad22:	2001      	movs	r0, #1
 800ad24:	e7e7      	b.n	800acf6 <_raise_r+0x12>
 800ad26:	2400      	movs	r4, #0
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad2e:	4798      	blx	r3
 800ad30:	2000      	movs	r0, #0
 800ad32:	e7e0      	b.n	800acf6 <_raise_r+0x12>

0800ad34 <raise>:
 800ad34:	4b02      	ldr	r3, [pc, #8]	; (800ad40 <raise+0xc>)
 800ad36:	4601      	mov	r1, r0
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	f7ff bfd3 	b.w	800ace4 <_raise_r>
 800ad3e:	bf00      	nop
 800ad40:	2000007c 	.word	0x2000007c

0800ad44 <_kill_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	2300      	movs	r3, #0
 800ad48:	4d06      	ldr	r5, [pc, #24]	; (800ad64 <_kill_r+0x20>)
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	4611      	mov	r1, r2
 800ad50:	602b      	str	r3, [r5, #0]
 800ad52:	f7f7 f9aa 	bl	80020aa <_kill>
 800ad56:	1c43      	adds	r3, r0, #1
 800ad58:	d102      	bne.n	800ad60 <_kill_r+0x1c>
 800ad5a:	682b      	ldr	r3, [r5, #0]
 800ad5c:	b103      	cbz	r3, 800ad60 <_kill_r+0x1c>
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	bd38      	pop	{r3, r4, r5, pc}
 800ad62:	bf00      	nop
 800ad64:	200006fc 	.word	0x200006fc

0800ad68 <_getpid_r>:
 800ad68:	f7f7 b998 	b.w	800209c <_getpid>

0800ad6c <__swhatbuf_r>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	460c      	mov	r4, r1
 800ad70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad74:	4615      	mov	r5, r2
 800ad76:	2900      	cmp	r1, #0
 800ad78:	461e      	mov	r6, r3
 800ad7a:	b096      	sub	sp, #88	; 0x58
 800ad7c:	da0c      	bge.n	800ad98 <__swhatbuf_r+0x2c>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	2100      	movs	r1, #0
 800ad82:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad86:	bf0c      	ite	eq
 800ad88:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad8c:	2340      	movne	r3, #64	; 0x40
 800ad8e:	2000      	movs	r0, #0
 800ad90:	6031      	str	r1, [r6, #0]
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	b016      	add	sp, #88	; 0x58
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	466a      	mov	r2, sp
 800ad9a:	f000 f849 	bl	800ae30 <_fstat_r>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	dbed      	blt.n	800ad7e <__swhatbuf_r+0x12>
 800ada2:	9901      	ldr	r1, [sp, #4]
 800ada4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ada8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800adac:	4259      	negs	r1, r3
 800adae:	4159      	adcs	r1, r3
 800adb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb4:	e7eb      	b.n	800ad8e <__swhatbuf_r+0x22>

0800adb6 <__smakebuf_r>:
 800adb6:	898b      	ldrh	r3, [r1, #12]
 800adb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adba:	079d      	lsls	r5, r3, #30
 800adbc:	4606      	mov	r6, r0
 800adbe:	460c      	mov	r4, r1
 800adc0:	d507      	bpl.n	800add2 <__smakebuf_r+0x1c>
 800adc2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adc6:	6023      	str	r3, [r4, #0]
 800adc8:	6123      	str	r3, [r4, #16]
 800adca:	2301      	movs	r3, #1
 800adcc:	6163      	str	r3, [r4, #20]
 800adce:	b002      	add	sp, #8
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	466a      	mov	r2, sp
 800add4:	ab01      	add	r3, sp, #4
 800add6:	f7ff ffc9 	bl	800ad6c <__swhatbuf_r>
 800adda:	9900      	ldr	r1, [sp, #0]
 800addc:	4605      	mov	r5, r0
 800adde:	4630      	mov	r0, r6
 800ade0:	f7fd fb96 	bl	8008510 <_malloc_r>
 800ade4:	b948      	cbnz	r0, 800adfa <__smakebuf_r+0x44>
 800ade6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adea:	059a      	lsls	r2, r3, #22
 800adec:	d4ef      	bmi.n	800adce <__smakebuf_r+0x18>
 800adee:	f023 0303 	bic.w	r3, r3, #3
 800adf2:	f043 0302 	orr.w	r3, r3, #2
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	e7e3      	b.n	800adc2 <__smakebuf_r+0xc>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	6020      	str	r0, [r4, #0]
 800adfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae02:	81a3      	strh	r3, [r4, #12]
 800ae04:	9b00      	ldr	r3, [sp, #0]
 800ae06:	6120      	str	r0, [r4, #16]
 800ae08:	6163      	str	r3, [r4, #20]
 800ae0a:	9b01      	ldr	r3, [sp, #4]
 800ae0c:	b15b      	cbz	r3, 800ae26 <__smakebuf_r+0x70>
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae14:	f000 f81e 	bl	800ae54 <_isatty_r>
 800ae18:	b128      	cbz	r0, 800ae26 <__smakebuf_r+0x70>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f023 0303 	bic.w	r3, r3, #3
 800ae20:	f043 0301 	orr.w	r3, r3, #1
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	431d      	orrs	r5, r3
 800ae2a:	81a5      	strh	r5, [r4, #12]
 800ae2c:	e7cf      	b.n	800adce <__smakebuf_r+0x18>
	...

0800ae30 <_fstat_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	2300      	movs	r3, #0
 800ae34:	4d06      	ldr	r5, [pc, #24]	; (800ae50 <_fstat_r+0x20>)
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	f7f7 f992 	bl	8002166 <_fstat>
 800ae42:	1c43      	adds	r3, r0, #1
 800ae44:	d102      	bne.n	800ae4c <_fstat_r+0x1c>
 800ae46:	682b      	ldr	r3, [r5, #0]
 800ae48:	b103      	cbz	r3, 800ae4c <_fstat_r+0x1c>
 800ae4a:	6023      	str	r3, [r4, #0]
 800ae4c:	bd38      	pop	{r3, r4, r5, pc}
 800ae4e:	bf00      	nop
 800ae50:	200006fc 	.word	0x200006fc

0800ae54 <_isatty_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	2300      	movs	r3, #0
 800ae58:	4d05      	ldr	r5, [pc, #20]	; (800ae70 <_isatty_r+0x1c>)
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	602b      	str	r3, [r5, #0]
 800ae60:	f7f7 f990 	bl	8002184 <_isatty>
 800ae64:	1c43      	adds	r3, r0, #1
 800ae66:	d102      	bne.n	800ae6e <_isatty_r+0x1a>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	b103      	cbz	r3, 800ae6e <_isatty_r+0x1a>
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	bd38      	pop	{r3, r4, r5, pc}
 800ae70:	200006fc 	.word	0x200006fc

0800ae74 <_init>:
 800ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae76:	bf00      	nop
 800ae78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7a:	bc08      	pop	{r3}
 800ae7c:	469e      	mov	lr, r3
 800ae7e:	4770      	bx	lr

0800ae80 <_fini>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	bf00      	nop
 800ae84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae86:	bc08      	pop	{r3}
 800ae88:	469e      	mov	lr, r3
 800ae8a:	4770      	bx	lr
