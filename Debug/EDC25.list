
EDC25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800aee0  0800aee0  0001aee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b358  0800b358  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b358  0800b358  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b358  0800b358  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b358  0800b358  0001b358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b35c  0800b35c  0001b35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  200001e8  0800b548  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800b548  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e781  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002760  00000000  00000000  0002e9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00031138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b35  00000000  00000000  00031fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4eb  00000000  00000000  00032aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c64  00000000  00000000  0004dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b444  00000000  00000000  0005fc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005108  00000000  00000000  000fb080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00100188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800aec4 	.word	0x0800aec4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800aec4 	.word	0x0800aec4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2uiz>:
 80011e8:	0042      	lsls	r2, r0, #1
 80011ea:	d20e      	bcs.n	800120a <__aeabi_f2uiz+0x22>
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30b      	bcc.n	800120a <__aeabi_f2uiz+0x22>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d409      	bmi.n	8001210 <__aeabi_f2uiz+0x28>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	fa23 f002 	lsr.w	r0, r3, r2
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr
 8001210:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001214:	d101      	bne.n	800121a <__aeabi_f2uiz+0x32>
 8001216:	0242      	lsls	r2, r0, #9
 8001218:	d102      	bne.n	8001220 <__aeabi_f2uiz+0x38>
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	4770      	bx	lr
 8001220:	f04f 0000 	mov.w	r0, #0
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <__aeabi_d2lz>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4605      	mov	r5, r0
 800122c:	460c      	mov	r4, r1
 800122e:	2200      	movs	r2, #0
 8001230:	2300      	movs	r3, #0
 8001232:	4628      	mov	r0, r5
 8001234:	4621      	mov	r1, r4
 8001236:	f7ff fc2d 	bl	8000a94 <__aeabi_dcmplt>
 800123a:	b928      	cbnz	r0, 8001248 <__aeabi_d2lz+0x20>
 800123c:	4628      	mov	r0, r5
 800123e:	4621      	mov	r1, r4
 8001240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001244:	f000 b80a 	b.w	800125c <__aeabi_d2ulz>
 8001248:	4628      	mov	r0, r5
 800124a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800124e:	f000 f805 	bl	800125c <__aeabi_d2ulz>
 8001252:	4240      	negs	r0, r0
 8001254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	bf00      	nop

0800125c <__aeabi_d2ulz>:
 800125c:	b5d0      	push	{r4, r6, r7, lr}
 800125e:	2200      	movs	r2, #0
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <__aeabi_d2ulz+0x34>)
 8001262:	4606      	mov	r6, r0
 8001264:	460f      	mov	r7, r1
 8001266:	f7ff f9a3 	bl	80005b0 <__aeabi_dmul>
 800126a:	f7ff fc79 	bl	8000b60 <__aeabi_d2uiz>
 800126e:	4604      	mov	r4, r0
 8001270:	f7ff f924 	bl	80004bc <__aeabi_ui2d>
 8001274:	2200      	movs	r2, #0
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <__aeabi_d2ulz+0x38>)
 8001278:	f7ff f99a 	bl	80005b0 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4630      	mov	r0, r6
 8001282:	4639      	mov	r1, r7
 8001284:	f7fe ffdc 	bl	8000240 <__aeabi_dsub>
 8001288:	f7ff fc6a 	bl	8000b60 <__aeabi_d2uiz>
 800128c:	4621      	mov	r1, r4
 800128e:	bdd0      	pop	{r4, r6, r7, pc}
 8001290:	3df00000 	.word	0x3df00000
 8001294:	41f00000 	.word	0x41f00000

08001298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_DMA_Init+0x48>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <MX_DMA_Init+0x48>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <MX_DMA_Init+0x48>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200d      	movs	r0, #13
 80012bc:	f001 fe59 	bl	8002f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012c0:	200d      	movs	r0, #13
 80012c2:	f001 fe72 	bl	8002faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2010      	movs	r0, #16
 80012cc:	f001 fe51 	bl	8002f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012d0:	2010      	movs	r0, #16
 80012d2:	f001 fe6a 	bl	8002faa <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <MX_GPIO_Init+0xd0>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <MX_GPIO_Init+0xd0>)
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_in4_Pin|F_in3_Pin|F_in2_Pin|F_in1_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001360:	f002 fc56 	bl	8003c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_in4_Pin|R_in3_Pin|R_in2_Pin|R_in1_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800136a:	4814      	ldr	r0, [pc, #80]	; (80013bc <MX_GPIO_Init+0xd8>)
 800136c:	f002 fc50 	bl	8003c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = F_in4_Pin|F_in3_Pin|F_in2_Pin|F_in1_Pin;
 8001370:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <MX_GPIO_Init+0xd4>)
 800138a:	f002 faad 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = R_in4_Pin|R_in3_Pin|R_in2_Pin|R_in1_Pin;
 800138e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2302      	movs	r3, #2
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_GPIO_Init+0xd8>)
 80013a8:	f002 fa9e 	bl	80038e8 <HAL_GPIO_Init>

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40011000 	.word	0x40011000

080013c0 <jy62_Init>:
struct Angl Angle;  //储存角度值
struct Temp Temperature;  //储存温度值
/***********************接口****************************/

void jy62_Init(UART_HandleTypeDef *huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	jy62_huart = huart;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <jy62_Init+0x24>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(jy62_huart,jy62Receive,JY62_MESSAGE_LENTH);
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <jy62_Init+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	220b      	movs	r2, #11
 80013d4:	4904      	ldr	r1, [pc, #16]	; (80013e8 <jy62_Init+0x28>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fa6c 	bl	80058b4 <HAL_UART_Receive_DMA>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000021c 	.word	0x2000021c
 80013e8:	20000204 	.word	0x20000204

080013ec <jy62MessageRecord>:

void jy62MessageRecord(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
	if(jy62Receive[0] ==0x55)
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <jy62MessageRecord+0x84>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b55      	cmp	r3, #85	; 0x55
 80013fa:	d12d      	bne.n	8001458 <jy62MessageRecord+0x6c>
	{
		uint8_t sum  = 0x00;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < JY62_MESSAGE_LENTH-1; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	e00a      	b.n	800141c <jy62MessageRecord+0x30>
		{
			sum += jy62Receive[i];
 8001406:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <jy62MessageRecord+0x84>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	4413      	add	r3, r2
 8001414:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < JY62_MESSAGE_LENTH-1; i++)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b09      	cmp	r3, #9
 8001420:	ddf1      	ble.n	8001406 <jy62MessageRecord+0x1a>
		}
		if(sum == jy62Receive[JY62_MESSAGE_LENTH-1])
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <jy62MessageRecord+0x84>)
 8001424:	7a9b      	ldrb	r3, [r3, #10]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	429a      	cmp	r2, r3
 800142c:	d114      	bne.n	8001458 <jy62MessageRecord+0x6c>
		{
			for (int i = 0; i < JY62_MESSAGE_LENTH; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e00c      	b.n	800144e <jy62MessageRecord+0x62>
			{
				jy62Message[i] = jy62Receive[i];
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <jy62MessageRecord+0x84>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2d9      	uxtb	r1, r3
 800143e:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <jy62MessageRecord+0x88>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	460a      	mov	r2, r1
 8001446:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < JY62_MESSAGE_LENTH; i++)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0a      	cmp	r3, #10
 8001452:	ddef      	ble.n	8001434 <jy62MessageRecord+0x48>
			}
		    Decode();
 8001454:	f000 f9fe 	bl	8001854 <Decode>
		}
	}
	HAL_UART_Receive_DMA(jy62_huart,jy62Receive,JY62_MESSAGE_LENTH);
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <jy62MessageRecord+0x8c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	220b      	movs	r2, #11
 800145e:	4904      	ldr	r1, [pc, #16]	; (8001470 <jy62MessageRecord+0x84>)
 8001460:	4618      	mov	r0, r3
 8001462:	f004 fa27 	bl	80058b4 <HAL_UART_Receive_DMA>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000204 	.word	0x20000204
 8001474:	20000210 	.word	0x20000210
 8001478:	2000021c 	.word	0x2000021c

0800147c <SetBaud>:

void SetBaud(int Baud)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	if(Baud == 115200)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 800148a:	d108      	bne.n	800149e <SetBaud+0x22>
	{
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <SetBaud+0x44>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	2203      	movs	r2, #3
 8001496:	490b      	ldr	r1, [pc, #44]	; (80014c4 <SetBaud+0x48>)
 8001498:	f004 f989 	bl	80057ae <HAL_UART_Transmit>
	}
	else if(Baud == 9600)
	{
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
	}
}
 800149c:	e00b      	b.n	80014b6 <SetBaud+0x3a>
	else if(Baud == 9600)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 80014a4:	d107      	bne.n	80014b6 <SetBaud+0x3a>
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SetBaud+0x44>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	2203      	movs	r2, #3
 80014b0:	4904      	ldr	r1, [pc, #16]	; (80014c4 <SetBaud+0x48>)
 80014b2:	f004 f97c 	bl	80057ae <HAL_UART_Transmit>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000021c 	.word	0x2000021c
 80014c4:	20000008 	.word	0x20000008

080014c8 <SetHorizontal>:

void SetHorizontal()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,setHorizontal,3,HAL_MAX_DELAY);
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SetHorizontal+0x18>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	2203      	movs	r2, #3
 80014d6:	4903      	ldr	r1, [pc, #12]	; (80014e4 <SetHorizontal+0x1c>)
 80014d8:	f004 f969 	bl	80057ae <HAL_UART_Transmit>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000021c 	.word	0x2000021c
 80014e4:	2000000c 	.word	0x2000000c

080014e8 <InitAngle>:
{
	HAL_UART_Transmit(jy62_huart,setVertical,3,HAL_MAX_DELAY);
}

void InitAngle()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,initAngle,3,HAL_MAX_DELAY);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <InitAngle+0x18>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	2203      	movs	r2, #3
 80014f6:	4903      	ldr	r1, [pc, #12]	; (8001504 <InitAngle+0x1c>)
 80014f8:	f004 f959 	bl	80057ae <HAL_UART_Transmit>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000021c 	.word	0x2000021c
 8001504:	20000000 	.word	0x20000000

08001508 <Calibrate>:

void Calibrate()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,calibrateAcce,3,HAL_MAX_DELAY);
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <Calibrate+0x18>)
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	2203      	movs	r2, #3
 8001516:	4903      	ldr	r1, [pc, #12]	; (8001524 <Calibrate+0x1c>)
 8001518:	f004 f949 	bl	80057ae <HAL_UART_Transmit>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000021c 	.word	0x2000021c
 8001524:	20000004 	.word	0x20000004

08001528 <SleepOrAwake>:

void SleepOrAwake()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,sleepAndAwake,3,HAL_MAX_DELAY);
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SleepOrAwake+0x18>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	2203      	movs	r2, #3
 8001536:	4903      	ldr	r1, [pc, #12]	; (8001544 <SleepOrAwake+0x1c>)
 8001538:	f004 f939 	bl	80057ae <HAL_UART_Transmit>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000021c 	.word	0x2000021c
 8001544:	20000010 	.word	0x20000010

08001548 <GetRoll>:


float GetRoll()
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	return Angle.roll;
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <GetRoll+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	20000238 	.word	0x20000238

0800155c <GetPitch>:
float GetPitch()
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	return Angle.pitch;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <GetPitch+0x10>)
 8001562:	685b      	ldr	r3, [r3, #4]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000238 	.word	0x20000238

08001570 <GetYaw>:
float GetYaw()
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	return Angle.yaw;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <GetYaw+0x10>)
 8001576:	689b      	ldr	r3, [r3, #8]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000238 	.word	0x20000238

08001584 <DecodeAngle>:


/***************************************************/

void DecodeAngle()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	Angle.roll = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 180 ;
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <DecodeAngle+0xa4>)
 800158a:	78db      	ldrb	r3, [r3, #3]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4a25      	ldr	r2, [pc, #148]	; (8001628 <DecodeAngle+0xa4>)
 8001592:	7892      	ldrb	r2, [r2, #2]
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	4313      	orrs	r3, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fc0b 	bl	8000db4 <__aeabi_i2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fd0d 	bl	8000fc4 <__aeabi_fdiv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	491f      	ldr	r1, [pc, #124]	; (800162c <DecodeAngle+0xa8>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fc54 	bl	8000e5c <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <DecodeAngle+0xac>)
 80015ba:	601a      	str	r2, [r3, #0]
	Angle.pitch = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 180 ;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <DecodeAngle+0xa4>)
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4a18      	ldr	r2, [pc, #96]	; (8001628 <DecodeAngle+0xa4>)
 80015c6:	7912      	ldrb	r2, [r2, #4]
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	4313      	orrs	r3, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fbf1 	bl	8000db4 <__aeabi_i2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fcf3 	bl	8000fc4 <__aeabi_fdiv>
 80015de:	4603      	mov	r3, r0
 80015e0:	4912      	ldr	r1, [pc, #72]	; (800162c <DecodeAngle+0xa8>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fc3a 	bl	8000e5c <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <DecodeAngle+0xac>)
 80015ee:	605a      	str	r2, [r3, #4]
	Angle.yaw =  (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 180 ;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <DecodeAngle+0xa4>)
 80015f2:	79db      	ldrb	r3, [r3, #7]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <DecodeAngle+0xa4>)
 80015fa:	7992      	ldrb	r2, [r2, #6]
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	4313      	orrs	r3, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fbd7 	bl	8000db4 <__aeabi_i2f>
 8001606:	4603      	mov	r3, r0
 8001608:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fcd9 	bl	8000fc4 <__aeabi_fdiv>
 8001612:	4603      	mov	r3, r0
 8001614:	4905      	ldr	r1, [pc, #20]	; (800162c <DecodeAngle+0xa8>)
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fc20 	bl	8000e5c <__aeabi_fmul>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <DecodeAngle+0xac>)
 8001622:	609a      	str	r2, [r3, #8]
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000210 	.word	0x20000210
 800162c:	43340000 	.word	0x43340000
 8001630:	20000238 	.word	0x20000238
 8001634:	00000000 	.word	0x00000000

08001638 <DecodeAccelerate>:

void DecodeAccelerate()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	Accelerate.accelerate_x = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 16 * g ;
 800163c:	4b40      	ldr	r3, [pc, #256]	; (8001740 <DecodeAccelerate+0x108>)
 800163e:	78db      	ldrb	r3, [r3, #3]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <DecodeAccelerate+0x108>)
 8001646:	7892      	ldrb	r2, [r2, #2]
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	4313      	orrs	r3, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fbb1 	bl	8000db4 <__aeabi_i2f>
 8001652:	4603      	mov	r3, r0
 8001654:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fcb3 	bl	8000fc4 <__aeabi_fdiv>
 800165e:	4603      	mov	r3, r0
 8001660:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fbf9 	bl	8000e5c <__aeabi_fmul>
 800166a:	4603      	mov	r3, r0
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff47 	bl	8000500 <__aeabi_f2d>
 8001672:	a331      	add	r3, pc, #196	; (adr r3, 8001738 <DecodeAccelerate+0x100>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ff9a 	bl	80005b0 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa8c 	bl	8000ba0 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <DecodeAccelerate+0x10c>)
 800168c:	6013      	str	r3, [r2, #0]
	Accelerate.accelerate_y = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 16 * g ;
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <DecodeAccelerate+0x108>)
 8001690:	795b      	ldrb	r3, [r3, #5]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	4a2a      	ldr	r2, [pc, #168]	; (8001740 <DecodeAccelerate+0x108>)
 8001698:	7912      	ldrb	r2, [r2, #4]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	4313      	orrs	r3, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb88 	bl	8000db4 <__aeabi_i2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fc8a 	bl	8000fc4 <__aeabi_fdiv>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fbd0 	bl	8000e5c <__aeabi_fmul>
 80016bc:	4603      	mov	r3, r0
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff1e 	bl	8000500 <__aeabi_f2d>
 80016c4:	a31c      	add	r3, pc, #112	; (adr r3, 8001738 <DecodeAccelerate+0x100>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe ff71 	bl	80005b0 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa63 	bl	8000ba0 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <DecodeAccelerate+0x10c>)
 80016de:	6053      	str	r3, [r2, #4]
	Accelerate.accelerate_z = (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 16 * g ;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <DecodeAccelerate+0x108>)
 80016e2:	79db      	ldrb	r3, [r3, #7]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	4a15      	ldr	r2, [pc, #84]	; (8001740 <DecodeAccelerate+0x108>)
 80016ea:	7992      	ldrb	r2, [r2, #6]
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	4313      	orrs	r3, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb5f 	bl	8000db4 <__aeabi_i2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fc61 	bl	8000fc4 <__aeabi_fdiv>
 8001702:	4603      	mov	r3, r0
 8001704:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fba7 	bl	8000e5c <__aeabi_fmul>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fef5 	bl	8000500 <__aeabi_f2d>
 8001716:	a308      	add	r3, pc, #32	; (adr r3, 8001738 <DecodeAccelerate+0x100>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff48 	bl	80005b0 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fa3a 	bl	8000ba0 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <DecodeAccelerate+0x10c>)
 8001730:	6093      	str	r3, [r2, #8]
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	9999999a 	.word	0x9999999a
 800173c:	40239999 	.word	0x40239999
 8001740:	20000210 	.word	0x20000210
 8001744:	20000220 	.word	0x20000220

08001748 <DecodeVelocity>:

void DecodeVelocity()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	Velocity.velocity_x = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 2000 ;
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <DecodeVelocity+0xa4>)
 800174e:	78db      	ldrb	r3, [r3, #3]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <DecodeVelocity+0xa4>)
 8001756:	7892      	ldrb	r2, [r2, #2]
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	4313      	orrs	r3, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fb29 	bl	8000db4 <__aeabi_i2f>
 8001762:	4603      	mov	r3, r0
 8001764:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc2b 	bl	8000fc4 <__aeabi_fdiv>
 800176e:	4603      	mov	r3, r0
 8001770:	491f      	ldr	r1, [pc, #124]	; (80017f0 <DecodeVelocity+0xa8>)
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fb72 	bl	8000e5c <__aeabi_fmul>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <DecodeVelocity+0xac>)
 800177e:	601a      	str	r2, [r3, #0]
	Velocity.velocity_y = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 2000 ;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <DecodeVelocity+0xa4>)
 8001782:	795b      	ldrb	r3, [r3, #5]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	4a18      	ldr	r2, [pc, #96]	; (80017ec <DecodeVelocity+0xa4>)
 800178a:	7912      	ldrb	r2, [r2, #4]
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	4313      	orrs	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb0f 	bl	8000db4 <__aeabi_i2f>
 8001796:	4603      	mov	r3, r0
 8001798:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fc11 	bl	8000fc4 <__aeabi_fdiv>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4912      	ldr	r1, [pc, #72]	; (80017f0 <DecodeVelocity+0xa8>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb58 	bl	8000e5c <__aeabi_fmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <DecodeVelocity+0xac>)
 80017b2:	605a      	str	r2, [r3, #4]
	Velocity.velocity_z = (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 2000 ;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <DecodeVelocity+0xa4>)
 80017b6:	79db      	ldrb	r3, [r3, #7]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <DecodeVelocity+0xa4>)
 80017be:	7992      	ldrb	r2, [r2, #6]
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	4313      	orrs	r3, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff faf5 	bl	8000db4 <__aeabi_i2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fbf7 	bl	8000fc4 <__aeabi_fdiv>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4905      	ldr	r1, [pc, #20]	; (80017f0 <DecodeVelocity+0xa8>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fb3e 	bl	8000e5c <__aeabi_fmul>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <DecodeVelocity+0xac>)
 80017e6:	609a      	str	r2, [r3, #8]
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000210 	.word	0x20000210
 80017f0:	44fa0000 	.word	0x44fa0000
 80017f4:	2000022c 	.word	0x2000022c

080017f8 <DecodeTemperature>:

void DecodeTemperature()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	Temperature.temperature = ((short)(jy62Message[9])<<8 | jy62Message[8])/340 +36.53;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <DecodeTemperature+0x50>)
 80017fe:	7a5b      	ldrb	r3, [r3, #9]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <DecodeTemperature+0x50>)
 8001806:	7a12      	ldrb	r2, [r2, #8]
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	4313      	orrs	r3, r2
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <DecodeTemperature+0x54>)
 800180e:	fb82 1203 	smull	r1, r2, r2, r3
 8001812:	11d2      	asrs	r2, r2, #7
 8001814:	17db      	asrs	r3, r3, #31
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe5f 	bl	80004dc <__aeabi_i2d>
 800181e:	a308      	add	r3, pc, #32	; (adr r3, 8001840 <DecodeTemperature+0x48>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fd0e 	bl	8000244 <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f9b6 	bl	8000ba0 <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <DecodeTemperature+0x58>)
 8001838:	6013      	str	r3, [r2, #0]
} 
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	0a3d70a4 	.word	0x0a3d70a4
 8001844:	404243d7 	.word	0x404243d7
 8001848:	20000210 	.word	0x20000210
 800184c:	60606061 	.word	0x60606061
 8001850:	20000244 	.word	0x20000244

08001854 <Decode>:


void Decode()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    switch (jy62Message[1])
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <Decode+0x38>)
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b53      	cmp	r3, #83	; 0x53
 8001860:	d00c      	beq.n	800187c <Decode+0x28>
 8001862:	2b53      	cmp	r3, #83	; 0x53
 8001864:	dc0d      	bgt.n	8001882 <Decode+0x2e>
 8001866:	2b51      	cmp	r3, #81	; 0x51
 8001868:	d002      	beq.n	8001870 <Decode+0x1c>
 800186a:	2b52      	cmp	r3, #82	; 0x52
 800186c:	d003      	beq.n	8001876 <Decode+0x22>
 800186e:	e008      	b.n	8001882 <Decode+0x2e>
	{
	    case 0x51: DecodeAccelerate(); break;
 8001870:	f7ff fee2 	bl	8001638 <DecodeAccelerate>
 8001874:	e005      	b.n	8001882 <Decode+0x2e>
		case 0x52: DecodeVelocity();  break;
 8001876:	f7ff ff67 	bl	8001748 <DecodeVelocity>
 800187a:	e002      	b.n	8001882 <Decode+0x2e>
		case 0x53: DecodeAngle(); break;
 800187c:	f7ff fe82 	bl	8001584 <DecodeAngle>
 8001880:	bf00      	nop
	}
	DecodeTemperature();
 8001882:	f7ff ffb9 	bl	80017f8 <DecodeTemperature>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000210 	.word	0x20000210

08001890 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x16>
		Update_Pwm();
 80018a2:	f000 f9f5 	bl	8001c90 <Update_Pwm>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40001000 	.word	0x40001000

080018b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018b8:	b088      	sub	sp, #32
 80018ba:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018bc:	f001 fa20 	bl	8002d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c0:	f000 f8d8 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c4:	f7ff fd0e 	bl	80012e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c8:	f7ff fce6 	bl	8001298 <MX_DMA_Init>
  MX_TIM1_Init();
 80018cc:	f000 fcd4 	bl	8002278 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018d0:	f000 fd96 	bl	8002400 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018d4:	f000 fde8 	bl	80024a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018d8:	f000 fe3a 	bl	8002550 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018dc:	f000 fe8c 	bl	80025f8 <MX_TIM5_Init>
  MX_TIM6_Init();
 80018e0:	f000 fede 	bl	80026a0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80018e4:	f001 f870 	bl	80029c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80018e8:	f001 f898 	bl	8002a1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	// Output PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //FL
 80018ec:	2100      	movs	r1, #0
 80018ee:	4848      	ldr	r0, [pc, #288]	; (8001a10 <main+0x15c>)
 80018f0:	f002 febe 	bl	8004670 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //FR
 80018f4:	2104      	movs	r1, #4
 80018f6:	4846      	ldr	r0, [pc, #280]	; (8001a10 <main+0x15c>)
 80018f8:	f002 feba 	bl	8004670 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //RL
 80018fc:	2108      	movs	r1, #8
 80018fe:	4844      	ldr	r0, [pc, #272]	; (8001a10 <main+0x15c>)
 8001900:	f002 feb6 	bl	8004670 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //RR
 8001904:	210c      	movs	r1, #12
 8001906:	4842      	ldr	r0, [pc, #264]	; (8001a10 <main+0x15c>)
 8001908:	f002 feb2 	bl	8004670 <HAL_TIM_PWM_Start>
	// Measure
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //FL
 800190c:	213c      	movs	r1, #60	; 0x3c
 800190e:	4841      	ldr	r0, [pc, #260]	; (8001a14 <main+0x160>)
 8001910:	f003 f80a 	bl	8004928 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //FR
 8001914:	213c      	movs	r1, #60	; 0x3c
 8001916:	4840      	ldr	r0, [pc, #256]	; (8001a18 <main+0x164>)
 8001918:	f003 f806 	bl	8004928 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //RL
 800191c:	213c      	movs	r1, #60	; 0x3c
 800191e:	483f      	ldr	r0, [pc, #252]	; (8001a1c <main+0x168>)
 8001920:	f003 f802 	bl	8004928 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); //RR
 8001924:	213c      	movs	r1, #60	; 0x3c
 8001926:	483e      	ldr	r0, [pc, #248]	; (8001a20 <main+0x16c>)
 8001928:	f002 fffe 	bl	8004928 <HAL_TIM_Encoder_Start>
	// Update PWM
	HAL_TIM_Base_Start_IT(&htim6);
 800192c:	483d      	ldr	r0, [pc, #244]	; (8001a24 <main+0x170>)
 800192e:	f002 fde7 	bl	8004500 <HAL_TIM_Base_Start_IT>
	// jy62
	jy62_Init(&huart3);
 8001932:	483d      	ldr	r0, [pc, #244]	; (8001a28 <main+0x174>)
 8001934:	f7ff fd44 	bl	80013c0 <jy62_Init>
	SetBaud(115200);
 8001938:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800193c:	f7ff fd9e 	bl	800147c <SetBaud>
	SetHorizontal();
 8001940:	f7ff fdc2 	bl	80014c8 <SetHorizontal>
	InitAngle();
 8001944:	f7ff fdd0 	bl	80014e8 <InitAngle>
	Calibrate();
 8001948:	f7ff fdde 	bl	8001508 <Calibrate>
	SleepOrAwake();
 800194c:	f7ff fdec 	bl	8001528 <SleepOrAwake>
	// PID
	PID_Init(&FLPid, 10.0f, 2.0f, 0.0f);
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001958:	4934      	ldr	r1, [pc, #208]	; (8001a2c <main+0x178>)
 800195a:	4835      	ldr	r0, [pc, #212]	; (8001a30 <main+0x17c>)
 800195c:	f000 fab1 	bl	8001ec2 <PID_Init>
	PID_Init(&FRPid, 10.0f, 2.0f, 0.0f);
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001968:	4930      	ldr	r1, [pc, #192]	; (8001a2c <main+0x178>)
 800196a:	4832      	ldr	r0, [pc, #200]	; (8001a34 <main+0x180>)
 800196c:	f000 faa9 	bl	8001ec2 <PID_Init>
	PID_Init(&RLPid, 10.0f, 2.0f, 0.0f);
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001978:	492c      	ldr	r1, [pc, #176]	; (8001a2c <main+0x178>)
 800197a:	482f      	ldr	r0, [pc, #188]	; (8001a38 <main+0x184>)
 800197c:	f000 faa1 	bl	8001ec2 <PID_Init>
	PID_Init(&RRPid, 10.0f, 2.0f, 0.0f);
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001988:	4928      	ldr	r1, [pc, #160]	; (8001a2c <main+0x178>)
 800198a:	482c      	ldr	r0, [pc, #176]	; (8001a3c <main+0x188>)
 800198c:	f000 fa99 	bl	8001ec2 <PID_Init>
	PID_Init(&xPid, 2.5f, 0.021f, 5.0f);
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <main+0x18c>)
 8001992:	4a2c      	ldr	r2, [pc, #176]	; (8001a44 <main+0x190>)
 8001994:	492c      	ldr	r1, [pc, #176]	; (8001a48 <main+0x194>)
 8001996:	482d      	ldr	r0, [pc, #180]	; (8001a4c <main+0x198>)
 8001998:	f000 fa93 	bl	8001ec2 <PID_Init>
	PID_Init(&yPid, 2.0f, 0.015f, 4.5f);
 800199c:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <main+0x19c>)
 800199e:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <main+0x1a0>)
 80019a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019a4:	482c      	ldr	r0, [pc, #176]	; (8001a58 <main+0x1a4>)
 80019a6:	f000 fa8c 	bl	8001ec2 <PID_Init>
	PID_Init(&anglePid, 1.1f, 0.04f, 0.01f);
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <main+0x1a8>)
 80019ac:	4a2c      	ldr	r2, [pc, #176]	; (8001a60 <main+0x1ac>)
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <main+0x1b0>)
 80019b0:	482d      	ldr	r0, [pc, #180]	; (8001a68 <main+0x1b4>)
 80019b2:	f000 fa86 	bl	8001ec2 <PID_Init>

	u1_printf("Hello\n");
 80019b6:	482d      	ldr	r0, [pc, #180]	; (8001a6c <main+0x1b8>)
 80019b8:	f001 f944 	bl	8002c44 <u1_printf>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
		float r = GetRoll();
 80019bc:	f7ff fdc4 	bl	8001548 <GetRoll>
 80019c0:	60f8      	str	r0, [r7, #12]
		float p = GetPitch();
 80019c2:	f7ff fdcb 	bl	800155c <GetPitch>
 80019c6:	60b8      	str	r0, [r7, #8]
		float y = GetYaw();
 80019c8:	f7ff fdd2 	bl	8001570 <GetYaw>
 80019cc:	6078      	str	r0, [r7, #4]
		u1_printf("ROLL:%f, PITCH:%f, YAW:%f\n", r, p, y);
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7fe fd96 	bl	8000500 <__aeabi_f2d>
 80019d4:	4680      	mov	r8, r0
 80019d6:	4689      	mov	r9, r1
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f7fe fd91 	bl	8000500 <__aeabi_f2d>
 80019de:	4604      	mov	r4, r0
 80019e0:	460d      	mov	r5, r1
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7fe fd8c 	bl	8000500 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019f0:	e9cd 4500 	strd	r4, r5, [sp]
 80019f4:	4642      	mov	r2, r8
 80019f6:	464b      	mov	r3, r9
 80019f8:	481d      	ldr	r0, [pc, #116]	; (8001a70 <main+0x1bc>)
 80019fa:	f001 f923 	bl	8002c44 <u1_printf>
		r=p=y=0;
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60fb      	str	r3, [r7, #12]
	{
 8001a0c:	e7d6      	b.n	80019bc <main+0x108>
 8001a0e:	bf00      	nop
 8001a10:	20000304 	.word	0x20000304
 8001a14:	2000034c 	.word	0x2000034c
 8001a18:	20000394 	.word	0x20000394
 8001a1c:	200003dc 	.word	0x200003dc
 8001a20:	20000424 	.word	0x20000424
 8001a24:	2000046c 	.word	0x2000046c
 8001a28:	200004fc 	.word	0x200004fc
 8001a2c:	41200000 	.word	0x41200000
 8001a30:	20000258 	.word	0x20000258
 8001a34:	20000270 	.word	0x20000270
 8001a38:	20000288 	.word	0x20000288
 8001a3c:	200002a0 	.word	0x200002a0
 8001a40:	40a00000 	.word	0x40a00000
 8001a44:	3cac0831 	.word	0x3cac0831
 8001a48:	40200000 	.word	0x40200000
 8001a4c:	200002b8 	.word	0x200002b8
 8001a50:	40900000 	.word	0x40900000
 8001a54:	3c75c28f 	.word	0x3c75c28f
 8001a58:	200002d0 	.word	0x200002d0
 8001a5c:	3c23d70a 	.word	0x3c23d70a
 8001a60:	3d23d70a 	.word	0x3d23d70a
 8001a64:	3f8ccccd 	.word	0x3f8ccccd
 8001a68:	200002e8 	.word	0x200002e8
 8001a6c:	0800aee0 	.word	0x0800aee0
 8001a70:	0800aee8 	.word	0x0800aee8

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b090      	sub	sp, #64	; 0x40
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 0318 	add.w	r3, r7, #24
 8001a7e:	2228      	movs	r2, #40	; 0x28
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f005 fdfc 	bl	8007680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ab2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	f107 0318 	add.w	r3, r7, #24
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 f8bf 	bl	8003c40 <HAL_RCC_OscConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ac8:	f000 f9f6 	bl	8001eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001acc:	230f      	movs	r3, #15
 8001ace:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fb2c 	bl	8004144 <HAL_RCC_ClockConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001af2:	f000 f9e1 	bl	8001eb8 <Error_Handler>
  }
}
 8001af6:	bf00      	nop
 8001af8:	3740      	adds	r7, #64	; 0x40
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <Move>:

/* USER CODE BEGIN 4 */
void Move(uint8_t id, float pwm)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
	if (id == 1)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d12b      	bne.n	8001b6a <Move+0x6a>
	{
		if (pwm > 0)
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	6838      	ldr	r0, [r7, #0]
 8001b18:	f7ff fb5c 	bl	80011d4 <__aeabi_fcmpgt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00c      	beq.n	8001b3c <Move+0x3c>
		{// FL +
			HAL_GPIO_WritePin(F_in3_GPIO_Port, F_in3_Pin, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b28:	4856      	ldr	r0, [pc, #344]	; (8001c84 <Move+0x184>)
 8001b2a:	f002 f871 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_in4_GPIO_Port, F_in4_Pin, 1);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b34:	4853      	ldr	r0, [pc, #332]	; (8001c84 <Move+0x184>)
 8001b36:	f002 f86b 	bl	8003c10 <HAL_GPIO_WritePin>
 8001b3a:	e00b      	b.n	8001b54 <Move+0x54>
		}
		else
		{// FL -
			HAL_GPIO_WritePin(F_in3_GPIO_Port, F_in3_Pin, 1);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b42:	4850      	ldr	r0, [pc, #320]	; (8001c84 <Move+0x184>)
 8001b44:	f002 f864 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_in4_GPIO_Port, F_in4_Pin, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	484d      	ldr	r0, [pc, #308]	; (8001c84 <Move+0x184>)
 8001b50:	f002 f85e 	bl	8003c10 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, fabs(pwm));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b5a:	4a4b      	ldr	r2, [pc, #300]	; (8001c88 <Move+0x188>)
 8001b5c:	6814      	ldr	r4, [r2, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb42 	bl	80011e8 <__aeabi_f2uiz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(R_in1_GPIO_Port, R_in1_Pin, 1);
			HAL_GPIO_WritePin(R_in2_GPIO_Port, R_in2_Pin, 0);
		}
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, fabs(pwm));
	}
}
 8001b68:	e087      	b.n	8001c7a <Move+0x17a>
	else if (id == 2)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d12b      	bne.n	8001bc8 <Move+0xc8>
		if (pwm > 0)
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	6838      	ldr	r0, [r7, #0]
 8001b76:	f7ff fb2d 	bl	80011d4 <__aeabi_fcmpgt>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00c      	beq.n	8001b9a <Move+0x9a>
			HAL_GPIO_WritePin(F_in1_GPIO_Port, F_in1_Pin, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b86:	483f      	ldr	r0, [pc, #252]	; (8001c84 <Move+0x184>)
 8001b88:	f002 f842 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_in2_GPIO_Port, F_in2_Pin, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b92:	483c      	ldr	r0, [pc, #240]	; (8001c84 <Move+0x184>)
 8001b94:	f002 f83c 	bl	8003c10 <HAL_GPIO_WritePin>
 8001b98:	e00b      	b.n	8001bb2 <Move+0xb2>
			HAL_GPIO_WritePin(F_in1_GPIO_Port, F_in1_Pin, 1);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba0:	4838      	ldr	r0, [pc, #224]	; (8001c84 <Move+0x184>)
 8001ba2:	f002 f835 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_in2_GPIO_Port, F_in2_Pin, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bac:	4835      	ldr	r0, [pc, #212]	; (8001c84 <Move+0x184>)
 8001bae:	f002 f82f 	bl	8003c10 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, fabs(pwm));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bb8:	4a33      	ldr	r2, [pc, #204]	; (8001c88 <Move+0x188>)
 8001bba:	6814      	ldr	r4, [r2, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fb13 	bl	80011e8 <__aeabi_f2uiz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001bc6:	e058      	b.n	8001c7a <Move+0x17a>
	else if (id == 3)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d127      	bne.n	8001c1e <Move+0x11e>
		if (pwm > 0)
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f7ff fafe 	bl	80011d4 <__aeabi_fcmpgt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <Move+0xf4>
			HAL_GPIO_WritePin(R_in3_GPIO_Port, R_in3_Pin, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	482a      	ldr	r0, [pc, #168]	; (8001c8c <Move+0x18c>)
 8001be4:	f002 f814 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_in4_GPIO_Port, R_in4_Pin, 1);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2140      	movs	r1, #64	; 0x40
 8001bec:	4827      	ldr	r0, [pc, #156]	; (8001c8c <Move+0x18c>)
 8001bee:	f002 f80f 	bl	8003c10 <HAL_GPIO_WritePin>
 8001bf2:	e009      	b.n	8001c08 <Move+0x108>
			HAL_GPIO_WritePin(R_in3_GPIO_Port, R_in3_Pin, 1);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	4824      	ldr	r0, [pc, #144]	; (8001c8c <Move+0x18c>)
 8001bfa:	f002 f809 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_in4_GPIO_Port, R_in4_Pin, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2140      	movs	r1, #64	; 0x40
 8001c02:	4822      	ldr	r0, [pc, #136]	; (8001c8c <Move+0x18c>)
 8001c04:	f002 f804 	bl	8003c10 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, fabs(pwm));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c0e:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <Move+0x188>)
 8001c10:	6814      	ldr	r4, [r2, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fae8 	bl	80011e8 <__aeabi_f2uiz>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001c1c:	e02d      	b.n	8001c7a <Move+0x17a>
	else if (id == 4)
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d12a      	bne.n	8001c7a <Move+0x17a>
		if (pwm > 0)
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f7ff fad3 	bl	80011d4 <__aeabi_fcmpgt>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00c      	beq.n	8001c4e <Move+0x14e>
			HAL_GPIO_WritePin(R_in1_GPIO_Port, R_in1_Pin, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <Move+0x18c>)
 8001c3c:	f001 ffe8 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_in2_GPIO_Port, R_in2_Pin, 1);
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c46:	4811      	ldr	r0, [pc, #68]	; (8001c8c <Move+0x18c>)
 8001c48:	f001 ffe2 	bl	8003c10 <HAL_GPIO_WritePin>
 8001c4c:	e00b      	b.n	8001c66 <Move+0x166>
			HAL_GPIO_WritePin(R_in1_GPIO_Port, R_in1_Pin, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <Move+0x18c>)
 8001c56:	f001 ffdb 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_in2_GPIO_Port, R_in2_Pin, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c60:	480a      	ldr	r0, [pc, #40]	; (8001c8c <Move+0x18c>)
 8001c62:	f001 ffd5 	bl	8003c10 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, fabs(pwm));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <Move+0x188>)
 8001c6e:	6814      	ldr	r4, [r2, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fab9 	bl	80011e8 <__aeabi_f2uiz>
 8001c76:	4603      	mov	r3, r0
 8001c78:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40010c00 	.word	0x40010c00
 8001c88:	20000304 	.word	0x20000304
 8001c8c:	40011000 	.word	0x40011000

08001c90 <Update_Pwm>:

void Update_Pwm()
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b090      	sub	sp, #64	; 0x40
 8001c94:	af00      	add	r7, sp, #0

	float xVel = PID_Cal(&xPid, now.x, goal.x);
 8001c96:	4b7c      	ldr	r3, [pc, #496]	; (8001e88 <Update_Pwm+0x1f8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a7c      	ldr	r2, [pc, #496]	; (8001e8c <Update_Pwm+0x1fc>)
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	487b      	ldr	r0, [pc, #492]	; (8001e90 <Update_Pwm+0x200>)
 8001ca2:	f000 f92f 	bl	8001f04 <PID_Cal>
 8001ca6:	62f8      	str	r0, [r7, #44]	; 0x2c
	float yVel = PID_Cal(&yPid, now.y, goal.y);
 8001ca8:	4b77      	ldr	r3, [pc, #476]	; (8001e88 <Update_Pwm+0x1f8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <Update_Pwm+0x1fc>)
 8001cae:	6852      	ldr	r2, [r2, #4]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4878      	ldr	r0, [pc, #480]	; (8001e94 <Update_Pwm+0x204>)
 8001cb4:	f000 f926 	bl	8001f04 <PID_Cal>
 8001cb8:	62b8      	str	r0, [r7, #40]	; 0x28
//	if (angleErr > 180.0f)
//		angleErr -= 360.0f;
//	if (angleErr < -180.0f)
//		angleErr += 360.0f;
//	float aVel = PID_Cal(&anglePid, angleErr, 0);
	float aVel = 0;
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
//	if (aVel > 40)
//		aVel = 40.0f;
//	if (aVel < -40)
//		aVel = -40.0f;

	int FLCnt = __HAL_TIM_GET_COUNTER(&htim2);
 8001cc0:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <Update_Pwm+0x208>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	__HAL_TIM_SetCounter(&htim2, 0);
 8001cc8:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <Update_Pwm+0x208>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
	if (FLCnt > 32767)
 8001cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd6:	db05      	blt.n	8001ce4 <Update_Pwm+0x54>
		FLCnt = 65535 - FLCnt;
 8001cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cda:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001cde:	33ff      	adds	r3, #255	; 0xff
 8001ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce2:	e002      	b.n	8001cea <Update_Pwm+0x5a>
	else
		FLCnt = 0 - FLCnt;
 8001ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float FLNow = 1.0 * FLCnt / 10.8;
 8001cea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cec:	f7fe fbf6 	bl	80004dc <__aeabi_i2d>
 8001cf0:	a363      	add	r3, pc, #396	; (adr r3, 8001e80 <Update_Pwm+0x1f0>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fd85 	bl	8000804 <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe ff4d 	bl	8000ba0 <__aeabi_d2f>
 8001d06:	4603      	mov	r3, r0
 8001d08:	623b      	str	r3, [r7, #32]
	float FLPwm = PID_Cal(&FLPid, FLNow, -aVel + xVel - yVel);
 8001d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d0e:	f7fe ff9b 	bl	8000c48 <__aeabi_fsub>
 8001d12:	4603      	mov	r3, r0
 8001d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff96 	bl	8000c48 <__aeabi_fsub>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6a39      	ldr	r1, [r7, #32]
 8001d22:	485e      	ldr	r0, [pc, #376]	; (8001e9c <Update_Pwm+0x20c>)
 8001d24:	f000 f8ee 	bl	8001f04 <PID_Cal>
 8001d28:	61f8      	str	r0, [r7, #28]
	Move(1, FLPwm);
 8001d2a:	69f9      	ldr	r1, [r7, #28]
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff fee7 	bl	8001b00 <Move>

	int FRCnt = __HAL_TIM_GET_COUNTER(&htim3);
 8001d32:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <Update_Pwm+0x210>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
	__HAL_TIM_SetCounter(&htim3, 0);
 8001d3a:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <Update_Pwm+0x210>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
	if (FRCnt > 32767)
 8001d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d48:	db04      	blt.n	8001d54 <Update_Pwm+0xc4>
		FRCnt = FRCnt - 65535;
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001d50:	3bff      	subs	r3, #255	; 0xff
 8001d52:	63bb      	str	r3, [r7, #56]	; 0x38
	else
		FRCnt = FRCnt - 0;
	float FRNow = 1.0 * FRCnt / 10.8;
 8001d54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d56:	f7fe fbc1 	bl	80004dc <__aeabi_i2d>
 8001d5a:	a349      	add	r3, pc, #292	; (adr r3, 8001e80 <Update_Pwm+0x1f0>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fd50 	bl	8000804 <__aeabi_ddiv>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ff18 	bl	8000ba0 <__aeabi_d2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	61bb      	str	r3, [r7, #24]
	float FRPwm = PID_Cal(&FRPid, FRNow, -aVel + xVel + yVel);
 8001d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d78:	f7fe ff66 	bl	8000c48 <__aeabi_fsub>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe ff63 	bl	8000c4c <__addsf3>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	4845      	ldr	r0, [pc, #276]	; (8001ea4 <Update_Pwm+0x214>)
 8001d8e:	f000 f8b9 	bl	8001f04 <PID_Cal>
 8001d92:	6178      	str	r0, [r7, #20]
	Move(2, FRPwm);
 8001d94:	6979      	ldr	r1, [r7, #20]
 8001d96:	2002      	movs	r0, #2
 8001d98:	f7ff feb2 	bl	8001b00 <Move>

	int RLCnt = __HAL_TIM_GET_COUNTER(&htim4);
 8001d9c:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <Update_Pwm+0x218>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
	__HAL_TIM_SetCounter(&htim4, 0);
 8001da4:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <Update_Pwm+0x218>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
	if (RLCnt > 32767)
 8001dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db2:	db05      	blt.n	8001dc0 <Update_Pwm+0x130>
		RLCnt = 65535 - RLCnt;
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001dba:	33ff      	adds	r3, #255	; 0xff
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dbe:	e002      	b.n	8001dc6 <Update_Pwm+0x136>
	else
		RLCnt = 0 - RLCnt;
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
	float RLNow = 1.0 * RLCnt / 10.8;
 8001dc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dc8:	f7fe fb88 	bl	80004dc <__aeabi_i2d>
 8001dcc:	a32c      	add	r3, pc, #176	; (adr r3, 8001e80 <Update_Pwm+0x1f0>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fd17 	bl	8000804 <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fedf 	bl	8000ba0 <__aeabi_d2f>
 8001de2:	4603      	mov	r3, r0
 8001de4:	613b      	str	r3, [r7, #16]
	float RLPwm = PID_Cal(&RLPid, RLNow, aVel + xVel + yVel);
 8001de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dea:	f7fe ff2f 	bl	8000c4c <__addsf3>
 8001dee:	4603      	mov	r3, r0
 8001df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe ff2a 	bl	8000c4c <__addsf3>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	6939      	ldr	r1, [r7, #16]
 8001dfe:	482b      	ldr	r0, [pc, #172]	; (8001eac <Update_Pwm+0x21c>)
 8001e00:	f000 f880 	bl	8001f04 <PID_Cal>
 8001e04:	60f8      	str	r0, [r7, #12]
	Move(3, RLPwm);
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f7ff fe79 	bl	8001b00 <Move>

	int RRCnt = __HAL_TIM_GET_COUNTER(&htim5);
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <Update_Pwm+0x220>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
	__HAL_TIM_SetCounter(&htim5, 0);
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <Update_Pwm+0x220>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
	if (RRCnt > 32767)
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e24:	db04      	blt.n	8001e30 <Update_Pwm+0x1a0>
		RRCnt = RRCnt - 65535;
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001e2c:	3bff      	subs	r3, #255	; 0xff
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
	else
		RRCnt = RRCnt - 0;
	float RRNow = 1.0 * RRCnt / 10.8;
 8001e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e32:	f7fe fb53 	bl	80004dc <__aeabi_i2d>
 8001e36:	a312      	add	r3, pc, #72	; (adr r3, 8001e80 <Update_Pwm+0x1f0>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fce2 	bl	8000804 <__aeabi_ddiv>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe feaa 	bl	8000ba0 <__aeabi_d2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60bb      	str	r3, [r7, #8]
	float RRPwm = PID_Cal(&RRPid, RRNow, aVel + xVel - yVel);
 8001e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e54:	f7fe fefa 	bl	8000c4c <__addsf3>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fef3 	bl	8000c48 <__aeabi_fsub>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <Update_Pwm+0x224>)
 8001e6a:	f000 f84b 	bl	8001f04 <PID_Cal>
 8001e6e:	6078      	str	r0, [r7, #4]
	Move(4, RRPwm);
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	2004      	movs	r0, #4
 8001e74:	f7ff fe44 	bl	8001b00 <Move>

//	u1_printf("FLNow=%f FLPwm=%f ", FLNow, FLPwm);
//	u1_printf("FRNow=%f FRPwm=%f\n", FRNow, FRPwm);
//	u1_printf("RLNow=%f RLPwm=%f ", RLNow, RLPwm);
//	u1_printf("RRNow=%f RRPwm=%f\n", RRNow, RRPwm);
}
 8001e78:	bf00      	nop
 8001e7a:	3740      	adds	r7, #64	; 0x40
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	9999999a 	.word	0x9999999a
 8001e84:	40259999 	.word	0x40259999
 8001e88:	20000248 	.word	0x20000248
 8001e8c:	20000250 	.word	0x20000250
 8001e90:	200002b8 	.word	0x200002b8
 8001e94:	200002d0 	.word	0x200002d0
 8001e98:	2000034c 	.word	0x2000034c
 8001e9c:	20000258 	.word	0x20000258
 8001ea0:	20000394 	.word	0x20000394
 8001ea4:	20000270 	.word	0x20000270
 8001ea8:	200003dc 	.word	0x200003dc
 8001eac:	20000288 	.word	0x20000288
 8001eb0:	20000424 	.word	0x20000424
 8001eb4:	200002a0 	.word	0x200002a0

08001eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ebc:	b672      	cpsid	i
}
 8001ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <Error_Handler+0x8>

08001ec2 <PID_Init>:
PidStr FLPid, FRPid, RLPid, RRPid;
PidStr xPid, yPid;
PidStr anglePid;

void PID_Init(PidStr* a, float kp, float ki, float kd)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	603b      	str	r3, [r7, #0]
	a->err = 0;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
	a->iErr = 0;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
	a->lErr = 0;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
	a->kp = kp;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	601a      	str	r2, [r3, #0]
	a->ki = ki;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	605a      	str	r2, [r3, #4]
	a->kd = kd;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	609a      	str	r2, [r3, #8]
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <PID_Cal>:

float PID_Cal(PidStr* a, float cur, float goal)
{
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
	a->err = goal - cur;
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fe98 	bl	8000c48 <__aeabi_fsub>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	60da      	str	r2, [r3, #12]
	a->iErr += a->err;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f7fe fe8e 	bl	8000c4c <__addsf3>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	611a      	str	r2, [r3, #16]
	float pwm = a->kp * a->err + a->ki * a->iErr + a->kd * (a->err - a->lErr);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f7fe ff8a 	bl	8000e5c <__aeabi_fmul>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f7fe ff80 	bl	8000e5c <__aeabi_fmul>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7fe fe73 	bl	8000c4c <__addsf3>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461d      	mov	r5, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689c      	ldr	r4, [r3, #8]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f7fe fe65 	bl	8000c48 <__aeabi_fsub>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7fe ff6a 	bl	8000e5c <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f7fe fe5d 	bl	8000c4c <__addsf3>
 8001f92:	4603      	mov	r3, r0
 8001f94:	617b      	str	r3, [r7, #20]
	a->lErr = a->err;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	615a      	str	r2, [r3, #20]
	if (pwm >= MAX_PWM)
 8001f9e:	490b      	ldr	r1, [pc, #44]	; (8001fcc <PID_Cal+0xc8>)
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f7ff f90d 	bl	80011c0 <__aeabi_fcmpge>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <PID_Cal+0xac>
		pwm = MAX_PWM;
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <PID_Cal+0xc8>)
 8001fae:	617b      	str	r3, [r7, #20]
	if (pwm <= MIN_PWM)
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <PID_Cal+0xcc>)
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff f8fa 	bl	80011ac <__aeabi_fcmple>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <PID_Cal+0xbe>
		pwm = MIN_PWM;
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <PID_Cal+0xcc>)
 8001fc0:	617b      	str	r3, [r7, #20]
	return pwm;
 8001fc2:	697b      	ldr	r3, [r7, #20]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bdb0      	pop	{r4, r5, r7, pc}
 8001fcc:	44480000 	.word	0x44480000
 8001fd0:	c4480000 	.word	0xc4480000

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_MspInit+0x5c>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4a14      	ldr	r2, [pc, #80]	; (8002030 <HAL_MspInit+0x5c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_MspInit+0x5c>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <HAL_MspInit+0x5c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_MspInit+0x5c>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_MspInit+0x60>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_MspInit+0x60>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207e:	f000 fe85 	bl	8002d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <DMA1_Channel3_IRQHandler+0x10>)
 800208e:	f001 f9c1 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000588 	.word	0x20000588

0800209c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <DMA1_Channel6_IRQHandler+0x10>)
 80020a2:	f001 f9b7 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000544 	.word	0x20000544

080020b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <USART2_IRQHandler+0x10>)
 80020b6:	f003 fc23 	bl	8005900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200004b4 	.word	0x200004b4

080020c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <USART3_IRQHandler+0x10>)
 80020ca:	f003 fc19 	bl	8005900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200004fc 	.word	0x200004fc

080020d8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <TIM6_IRQHandler+0x10>)
 80020de:	f002 fcb1 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000046c 	.word	0x2000046c

080020ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <_kill>:

int _kill(int pid, int sig)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002104:	f005 fb0e 	bl	8007724 <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	2216      	movs	r2, #22
 800210c:	601a      	str	r2, [r3, #0]
  return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_exit>:

void _exit (int status)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002122:	f04f 31ff 	mov.w	r1, #4294967295
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffe7 	bl	80020fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800212c:	e7fe      	b.n	800212c <_exit+0x12>

0800212e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e00a      	b.n	8002156 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002140:	f3af 8000 	nop.w
 8002144:	4601      	mov	r1, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	60ba      	str	r2, [r7, #8]
 800214c:	b2ca      	uxtb	r2, r1
 800214e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	dbf0      	blt.n	8002140 <_read+0x12>
  }

  return len;
 800215e:	687b      	ldr	r3, [r7, #4]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e009      	b.n	800218e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	60ba      	str	r2, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3301      	adds	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	dbf1      	blt.n	800217a <_write+0x12>
  }
  return len;
 8002196:	687b      	ldr	r3, [r7, #4]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_close>:

int _close(int file)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c6:	605a      	str	r2, [r3, #4]
  return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <_isatty>:

int _isatty(int file)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002230:	f005 fa78 	bl	8007724 <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	220c      	movs	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e009      	b.n	8002254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <_sbrk+0x64>)
 8002250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2000c000 	.word	0x2000c000
 8002260:	00000400 	.word	0x00000400
 8002264:	20000300 	.word	0x20000300
 8002268:	20000720 	.word	0x20000720

0800226c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b096      	sub	sp, #88	; 0x58
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2220      	movs	r2, #32
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 f9e5 	bl	8007680 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022b6:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <MX_TIM1_Init+0x180>)
 80022b8:	4a50      	ldr	r2, [pc, #320]	; (80023fc <MX_TIM1_Init+0x184>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80022bc:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <MX_TIM1_Init+0x180>)
 80022be:	2247      	movs	r2, #71	; 0x47
 80022c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b4d      	ldr	r3, [pc, #308]	; (80023f8 <MX_TIM1_Init+0x180>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80022c8:	4b4b      	ldr	r3, [pc, #300]	; (80023f8 <MX_TIM1_Init+0x180>)
 80022ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <MX_TIM1_Init+0x180>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022d6:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <MX_TIM1_Init+0x180>)
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <MX_TIM1_Init+0x180>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022e2:	4845      	ldr	r0, [pc, #276]	; (80023f8 <MX_TIM1_Init+0x180>)
 80022e4:	f002 f8bc 	bl	8004460 <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022ee:	f7ff fde3 	bl	8001eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022fc:	4619      	mov	r1, r3
 80022fe:	483e      	ldr	r0, [pc, #248]	; (80023f8 <MX_TIM1_Init+0x180>)
 8002300:	f002 fd6a 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800230a:	f7ff fdd5 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800230e:	483a      	ldr	r0, [pc, #232]	; (80023f8 <MX_TIM1_Init+0x180>)
 8002310:	f002 f956 	bl	80045c0 <HAL_TIM_PWM_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800231a:	f7ff fdcd 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800232a:	4619      	mov	r1, r3
 800232c:	4832      	ldr	r0, [pc, #200]	; (80023f8 <MX_TIM1_Init+0x180>)
 800232e:	f003 f91f 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002338:	f7ff fdbe 	bl	8001eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233c:	2360      	movs	r3, #96	; 0x60
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002348:	2300      	movs	r3, #0
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	2200      	movs	r2, #0
 800235e:	4619      	mov	r1, r3
 8002360:	4825      	ldr	r0, [pc, #148]	; (80023f8 <MX_TIM1_Init+0x180>)
 8002362:	f002 fc77 	bl	8004c54 <HAL_TIM_PWM_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800236c:	f7ff fda4 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	2204      	movs	r2, #4
 8002376:	4619      	mov	r1, r3
 8002378:	481f      	ldr	r0, [pc, #124]	; (80023f8 <MX_TIM1_Init+0x180>)
 800237a:	f002 fc6b 	bl	8004c54 <HAL_TIM_PWM_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002384:	f7ff fd98 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238c:	2208      	movs	r2, #8
 800238e:	4619      	mov	r1, r3
 8002390:	4819      	ldr	r0, [pc, #100]	; (80023f8 <MX_TIM1_Init+0x180>)
 8002392:	f002 fc5f 	bl	8004c54 <HAL_TIM_PWM_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800239c:	f7ff fd8c 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a4:	220c      	movs	r2, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	4813      	ldr	r0, [pc, #76]	; (80023f8 <MX_TIM1_Init+0x180>)
 80023aa:	f002 fc53 	bl	8004c54 <HAL_TIM_PWM_ConfigChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80023b4:	f7ff fd80 	bl	8001eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4807      	ldr	r0, [pc, #28]	; (80023f8 <MX_TIM1_Init+0x180>)
 80023dc:	f003 f934 	bl	8005648 <HAL_TIMEx_ConfigBreakDeadTime>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80023e6:	f7ff fd67 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023ea:	4803      	ldr	r0, [pc, #12]	; (80023f8 <MX_TIM1_Init+0x180>)
 80023ec:	f000 fab8 	bl	8002960 <HAL_TIM_MspPostInit>

}
 80023f0:	bf00      	nop
 80023f2:	3758      	adds	r7, #88	; 0x58
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000304 	.word	0x20000304
 80023fc:	40012c00 	.word	0x40012c00

08002400 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f005 f936 	bl	8007680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <MX_TIM2_Init+0xa4>)
 800241e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <MX_TIM2_Init+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_TIM2_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <MX_TIM2_Init+0xa4>)
 8002432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_TIM2_Init+0xa4>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <MX_TIM2_Init+0xa4>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002444:	2303      	movs	r3, #3
 8002446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800244c:	2301      	movs	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800245c:	2301      	movs	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	4619      	mov	r1, r3
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <MX_TIM2_Init+0xa4>)
 8002470:	f002 f9b8 	bl	80047e4 <HAL_TIM_Encoder_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800247a:	f7ff fd1d 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	4619      	mov	r1, r3
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <MX_TIM2_Init+0xa4>)
 800248c:	f003 f870 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002496:	f7ff fd0f 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800249a:	bf00      	nop
 800249c:	3730      	adds	r7, #48	; 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000034c 	.word	0x2000034c

080024a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f005 f8e2 	bl	8007680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024c6:	4a21      	ldr	r2, [pc, #132]	; (800254c <MX_TIM3_Init+0xa4>)
 80024c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ea:	2303      	movs	r3, #3
 80024ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024f2:	2301      	movs	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4619      	mov	r1, r3
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <MX_TIM3_Init+0xa0>)
 8002516:	f002 f965 	bl	80047e4 <HAL_TIM_Encoder_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002520:	f7ff fcca 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_TIM3_Init+0xa0>)
 8002532:	f003 f81d 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800253c:	f7ff fcbc 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002540:	bf00      	nop
 8002542:	3730      	adds	r7, #48	; 0x30
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000394 	.word	0x20000394
 800254c:	40000400 	.word	0x40000400

08002550 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f005 f88e 	bl	8007680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <MX_TIM4_Init+0xa0>)
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <MX_TIM4_Init+0xa4>)
 8002570:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <MX_TIM4_Init+0xa0>)
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <MX_TIM4_Init+0xa0>)
 800257a:	2210      	movs	r2, #16
 800257c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <MX_TIM4_Init+0xa0>)
 8002580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002584:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <MX_TIM4_Init+0xa0>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <MX_TIM4_Init+0xa0>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002592:	2303      	movs	r3, #3
 8002594:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800259a:	2301      	movs	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025aa:	2301      	movs	r3, #1
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	4619      	mov	r1, r3
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <MX_TIM4_Init+0xa0>)
 80025be:	f002 f911 	bl	80047e4 <HAL_TIM_Encoder_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80025c8:	f7ff fc76 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025cc:	2300      	movs	r3, #0
 80025ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_TIM4_Init+0xa0>)
 80025da:	f002 ffc9 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80025e4:	f7ff fc68 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	3730      	adds	r7, #48	; 0x30
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200003dc 	.word	0x200003dc
 80025f4:	40000800 	.word	0x40000800

080025f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f005 f83a 	bl	8007680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002614:	4b20      	ldr	r3, [pc, #128]	; (8002698 <MX_TIM5_Init+0xa0>)
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <MX_TIM5_Init+0xa4>)
 8002618:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <MX_TIM5_Init+0xa0>)
 800261c:	2200      	movs	r2, #0
 800261e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <MX_TIM5_Init+0xa0>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <MX_TIM5_Init+0xa0>)
 8002628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <MX_TIM5_Init+0xa0>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <MX_TIM5_Init+0xa0>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800263a:	2303      	movs	r3, #3
 800263c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002642:	2301      	movs	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002652:	2301      	movs	r3, #1
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002656:	2300      	movs	r3, #0
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4619      	mov	r1, r3
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <MX_TIM5_Init+0xa0>)
 8002666:	f002 f8bd 	bl	80047e4 <HAL_TIM_Encoder_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002670:	f7ff fc22 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_TIM5_Init+0xa0>)
 8002682:	f002 ff75 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800268c:	f7ff fc14 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002690:	bf00      	nop
 8002692:	3730      	adds	r7, #48	; 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000424 	.word	0x20000424
 800269c:	40000c00 	.word	0x40000c00

080026a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a6:	463b      	mov	r3, r7
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_TIM6_Init+0x64>)
 80026b0:	4a15      	ldr	r2, [pc, #84]	; (8002708 <MX_TIM6_Init+0x68>)
 80026b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <MX_TIM6_Init+0x64>)
 80026b6:	2247      	movs	r2, #71	; 0x47
 80026b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <MX_TIM6_Init+0x64>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <MX_TIM6_Init+0x64>)
 80026c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80026c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <MX_TIM6_Init+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026ce:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_TIM6_Init+0x64>)
 80026d0:	f001 fec6 	bl	8004460 <HAL_TIM_Base_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80026da:	f7ff fbed 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <MX_TIM6_Init+0x64>)
 80026ec:	f002 ff40 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026f6:	f7ff fbdf 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000046c 	.word	0x2000046c
 8002708:	40001000 	.word	0x40001000

0800270c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_TIM_Base_MspInit+0x68>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10c      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_TIM_Base_MspInit+0x6c>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	4a15      	ldr	r2, [pc, #84]	; (8002778 <HAL_TIM_Base_MspInit+0x6c>)
 8002724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002728:	6193      	str	r3, [r2, #24]
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <HAL_TIM_Base_MspInit+0x6c>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002736:	e018      	b.n	800276a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_TIM_Base_MspInit+0x70>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d113      	bne.n	800276a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_TIM_Base_MspInit+0x6c>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4a0c      	ldr	r2, [pc, #48]	; (8002778 <HAL_TIM_Base_MspInit+0x6c>)
 8002748:	f043 0310 	orr.w	r3, r3, #16
 800274c:	61d3      	str	r3, [r2, #28]
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_TIM_Base_MspInit+0x6c>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2036      	movs	r0, #54	; 0x36
 8002760:	f000 fc07 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002764:	2036      	movs	r0, #54	; 0x36
 8002766:	f000 fc20 	bl	8002faa <HAL_NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40021000 	.word	0x40021000
 800277c:	40001000 	.word	0x40001000

08002780 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b090      	sub	sp, #64	; 0x40
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d14f      	bne.n	8002840 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	4a67      	ldr	r2, [pc, #412]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	61d3      	str	r3, [r2, #28]
 80027ac:	4b65      	ldr	r3, [pc, #404]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b8:	4b62      	ldr	r3, [pc, #392]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6193      	str	r3, [r2, #24]
 80027c4:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d0:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	623b      	str	r3, [r7, #32]
 80027e6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_fla_Pin;
 80027e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ee:	2300      	movs	r3, #0
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_fla_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fa:	4619      	mov	r1, r3
 80027fc:	4852      	ldr	r0, [pc, #328]	; (8002948 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80027fe:	f001 f873 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_flb_Pin;
 8002802:	2308      	movs	r3, #8
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_flb_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002812:	4619      	mov	r1, r3
 8002814:	484d      	ldr	r0, [pc, #308]	; (800294c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002816:	f001 f867 	bl	80038e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800281a:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002838:	4a45      	ldr	r2, [pc, #276]	; (8002950 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800283a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800283e:	e07c      	b.n	800293a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a43      	ldr	r2, [pc, #268]	; (8002954 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d124      	bne.n	8002894 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800284a:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a3d      	ldr	r2, [pc, #244]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4a37      	ldr	r2, [pc, #220]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6193      	str	r3, [r2, #24]
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Encoder_fra_Pin|Encoder_frb_Pin;
 800287a:	23c0      	movs	r3, #192	; 0xc0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287e:	2300      	movs	r3, #0
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	4619      	mov	r1, r3
 800288c:	482e      	ldr	r0, [pc, #184]	; (8002948 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800288e:	f001 f82b 	bl	80038e8 <HAL_GPIO_Init>
}
 8002892:	e052      	b.n	800293a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2f      	ldr	r2, [pc, #188]	; (8002958 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d124      	bne.n	80028e8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4a28      	ldr	r2, [pc, #160]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	61d3      	str	r3, [r2, #28]
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	4a22      	ldr	r2, [pc, #136]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6193      	str	r3, [r2, #24]
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_rla_Pin|Encoder_rlb_Pin;
 80028ce:	23c0      	movs	r3, #192	; 0xc0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d2:	2300      	movs	r3, #0
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028de:	4619      	mov	r1, r3
 80028e0:	481a      	ldr	r0, [pc, #104]	; (800294c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80028e2:	f001 f801 	bl	80038e8 <HAL_GPIO_Init>
}
 80028e6:	e028      	b.n	800293a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM5)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_TIM_Encoder_MspInit+0x1dc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d123      	bne.n	800293a <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	61d3      	str	r3, [r2, #28]
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6193      	str	r3, [r2, #24]
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_rra_Pin|Encoder_rrb_Pin;
 8002922:	2303      	movs	r3, #3
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002926:	2300      	movs	r3, #0
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002932:	4619      	mov	r1, r3
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002936:	f000 ffd7 	bl	80038e8 <HAL_GPIO_Init>
}
 800293a:	bf00      	nop
 800293c:	3740      	adds	r7, #64	; 0x40
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40010800 	.word	0x40010800
 800294c:	40010c00 	.word	0x40010c00
 8002950:	40010000 	.word	0x40010000
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40000c00 	.word	0x40000c00

08002960 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_TIM_MspPostInit+0x5c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d118      	bne.n	80029b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_TIM_MspPostInit+0x60>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_TIM_MspPostInit+0x60>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6193      	str	r3, [r2, #24]
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_TIM_MspPostInit+0x60>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_FL_Pin|PWM_FR_Pin|PWM_RL_Pin|PWM_RR_Pin;
 8002998:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800299c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	; (80029c4 <HAL_TIM_MspPostInit+0x64>)
 80029ae:	f000 ff9b 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029b2:	bf00      	nop
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010800 	.word	0x40010800

080029c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <MX_USART2_UART_Init+0x50>)
 80029d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029ee:	220c      	movs	r2, #12
 80029f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_USART2_UART_Init+0x4c>)
 8002a00:	f002 fe85 	bl	800570e <HAL_UART_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a0a:	f7ff fa55 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200004b4 	.word	0x200004b4
 8002a18:	40004400 	.word	0x40004400

08002a1c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <MX_USART3_UART_Init+0x50>)
 8002a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a42:	220c      	movs	r2, #12
 8002a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_USART3_UART_Init+0x4c>)
 8002a54:	f002 fe5b 	bl	800570e <HAL_UART_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a5e:	f7ff fa2b 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200004fc 	.word	0x200004fc
 8002a6c:	40004800 	.word	0x40004800

08002a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a65      	ldr	r2, [pc, #404]	; (8002c20 <HAL_UART_MspInit+0x1b0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d15e      	bne.n	8002b4e <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a90:	4b64      	ldr	r3, [pc, #400]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	4a63      	ldr	r2, [pc, #396]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9a:	61d3      	str	r3, [r2, #28]
 8002a9c:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	4b5e      	ldr	r3, [pc, #376]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a5d      	ldr	r2, [pc, #372]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b5b      	ldr	r3, [pc, #364]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 0318 	add.w	r3, r7, #24
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4855      	ldr	r0, [pc, #340]	; (8002c28 <HAL_UART_MspInit+0x1b8>)
 8002ad4:	f000 ff08 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ad8:	2308      	movs	r3, #8
 8002ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	f107 0318 	add.w	r3, r7, #24
 8002ae8:	4619      	mov	r1, r3
 8002aea:	484f      	ldr	r0, [pc, #316]	; (8002c28 <HAL_UART_MspInit+0x1b8>)
 8002aec:	f000 fefc 	bl	80038e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002af0:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002af2:	4a4f      	ldr	r2, [pc, #316]	; (8002c30 <HAL_UART_MspInit+0x1c0>)
 8002af4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002af6:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b02:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b08:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b14:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b1a:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b20:	4842      	ldr	r0, [pc, #264]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002b22:	f000 fa5d 	bl	8002fe0 <HAL_DMA_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002b2c:	f7ff f9c4 	bl	8001eb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b36:	4a3d      	ldr	r2, [pc, #244]	; (8002c2c <HAL_UART_MspInit+0x1bc>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2100      	movs	r1, #0
 8002b40:	2026      	movs	r0, #38	; 0x26
 8002b42:	f000 fa16 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b46:	2026      	movs	r0, #38	; 0x26
 8002b48:	f000 fa2f 	bl	8002faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b4c:	e064      	b.n	8002c18 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART3)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a38      	ldr	r2, [pc, #224]	; (8002c34 <HAL_UART_MspInit+0x1c4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d15f      	bne.n	8002c18 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b62:	61d3      	str	r3, [r2, #28]
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4a2b      	ldr	r2, [pc, #172]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_UART_MspInit+0x1b4>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 0318 	add.w	r3, r7, #24
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4826      	ldr	r0, [pc, #152]	; (8002c38 <HAL_UART_MspInit+0x1c8>)
 8002b9e:	f000 fea3 	bl	80038e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb0:	f107 0318 	add.w	r3, r7, #24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4820      	ldr	r0, [pc, #128]	; (8002c38 <HAL_UART_MspInit+0x1c8>)
 8002bb8:	f000 fe96 	bl	80038e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002bbe:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <HAL_UART_MspInit+0x1d0>)
 8002bc0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc8:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002bec:	4813      	ldr	r0, [pc, #76]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002bee:	f000 f9f7 	bl	8002fe0 <HAL_DMA_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002bf8:	f7ff f95e 	bl	8001eb8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002c00:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c02:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <HAL_UART_MspInit+0x1cc>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2027      	movs	r0, #39	; 0x27
 8002c0e:	f000 f9b0 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c12:	2027      	movs	r0, #39	; 0x27
 8002c14:	f000 f9c9 	bl	8002faa <HAL_NVIC_EnableIRQ>
}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40004400 	.word	0x40004400
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40010800 	.word	0x40010800
 8002c2c:	20000544 	.word	0x20000544
 8002c30:	4002006c 	.word	0x4002006c
 8002c34:	40004800 	.word	0x40004800
 8002c38:	40010c00 	.word	0x40010c00
 8002c3c:	20000588 	.word	0x20000588
 8002c40:	40020030 	.word	0x40020030

08002c44 <u1_printf>:
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char* fmt, ...)
{
 8002c44:	b40f      	push	{r0, r1, r2, r3}
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b0b6      	sub	sp, #216	; 0xd8
 8002c4a:	af00      	add	r7, sp, #0
	uint16_t len;
	va_list ap;
	va_start(ap, fmt);
 8002c4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint8_t buf[205];
	vsprintf((char*)buf, fmt, ap);
 8002c54:	463b      	mov	r3, r7
 8002c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c5a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fd04 	bl	800766c <vsiprintf>
	va_end(ap);
	len = strlen((char*)buf);
 8002c64:	463b      	mov	r3, r7
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fade 	bl	8000228 <strlen>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	HAL_UART_Transmit(&huart2, buf, len, HAL_MAX_DELAY);
 8002c72:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002c76:	4639      	mov	r1, r7
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7c:	4804      	ldr	r0, [pc, #16]	; (8002c90 <u1_printf+0x4c>)
 8002c7e:	f002 fd96 	bl	80057ae <HAL_UART_Transmit>
}
 8002c82:	bf00      	nop
 8002c84:	37d8      	adds	r7, #216	; 0xd8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c8c:	b004      	add	sp, #16
 8002c8e:	4770      	bx	lr
 8002c90:	200004b4 	.word	0x200004b4

08002c94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_UART_RxCpltCallback+0x1c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_UART_RxCpltCallback+0x14>
		jy62MessageRecord();
 8002ca4:	f7fe fba2 	bl	80013ec <jy62MessageRecord>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200004fc 	.word	0x200004fc

08002cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cb4:	f7ff fada 	bl	800226c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cba:	490c      	ldr	r1, [pc, #48]	; (8002cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc0:	e002      	b.n	8002cc8 <LoopCopyDataInit>

08002cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc6:	3304      	adds	r3, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ccc:	d3f9      	bcc.n	8002cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cd0:	4c09      	ldr	r4, [pc, #36]	; (8002cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd4:	e001      	b.n	8002cda <LoopFillZerobss>

08002cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd8:	3204      	adds	r2, #4

08002cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cdc:	d3fb      	bcc.n	8002cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cde:	f004 fd27 	bl	8007730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ce2:	f7fe fde7 	bl	80018b4 <main>
  bx lr
 8002ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002cf0:	0800b360 	.word	0x0800b360
  ldr r2, =_sbss
 8002cf4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002cf8:	2000071c 	.word	0x2000071c

08002cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC1_2_IRQHandler>
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d04:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_Init+0x28>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <HAL_Init+0x28>)
 8002d0a:	f043 0310 	orr.w	r3, r3, #16
 8002d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d10:	2003      	movs	r0, #3
 8002d12:	f000 f923 	bl	8002f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d16:	200f      	movs	r0, #15
 8002d18:	f000 f808 	bl	8002d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d1c:	f7ff f95a 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40022000 	.word	0x40022000

08002d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_InitTick+0x54>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_InitTick+0x58>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f93b 	bl	8002fc6 <HAL_SYSTICK_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00e      	b.n	8002d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	d80a      	bhi.n	8002d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d60:	2200      	movs	r2, #0
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f000 f903 	bl	8002f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d6c:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <HAL_InitTick+0x5c>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000014 	.word	0x20000014
 8002d84:	2000001c 	.word	0x2000001c
 8002d88:	20000018 	.word	0x20000018

08002d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_IncTick+0x1c>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_IncTick+0x20>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a03      	ldr	r2, [pc, #12]	; (8002dac <HAL_IncTick+0x20>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	2000001c 	.word	0x2000001c
 8002dac:	200005cc 	.word	0x200005cc

08002db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <HAL_GetTick+0x10>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	200005cc 	.word	0x200005cc

08002dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	60d3      	str	r3, [r2, #12]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <__NVIC_GetPriorityGrouping+0x18>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 0307 	and.w	r3, r3, #7
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db0b      	blt.n	8002e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4906      	ldr	r1, [pc, #24]	; (8002e5c <__NVIC_EnableIRQ+0x34>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	; (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f28:	d301      	bcc.n	8002f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00f      	b.n	8002f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <SysTick_Config+0x40>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f36:	210f      	movs	r1, #15
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f7ff ff90 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <SysTick_Config+0x40>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <SysTick_Config+0x40>)
 8002f48:	2207      	movs	r2, #7
 8002f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	e000e010 	.word	0xe000e010

08002f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff2d 	bl	8002dc4 <__NVIC_SetPriorityGrouping>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f84:	f7ff ff42 	bl	8002e0c <__NVIC_GetPriorityGrouping>
 8002f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f7ff ff90 	bl	8002eb4 <NVIC_EncodePriority>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff5f 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff35 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ffa2 	bl	8002f18 <SysTick_Config>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e059      	b.n	80030aa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <HAL_DMA_Init+0xd4>)
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d80f      	bhi.n	8003022 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <HAL_DMA_Init+0xd8>)
 800300a:	4413      	add	r3, r2
 800300c:	4a2b      	ldr	r2, [pc, #172]	; (80030bc <HAL_DMA_Init+0xdc>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <HAL_DMA_Init+0xe0>)
 800301e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003020:	e00e      	b.n	8003040 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_DMA_Init+0xe4>)
 800302a:	4413      	add	r3, r2
 800302c:	4a23      	ldr	r2, [pc, #140]	; (80030bc <HAL_DMA_Init+0xdc>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	009a      	lsls	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a22      	ldr	r2, [pc, #136]	; (80030c8 <HAL_DMA_Init+0xe8>)
 800303e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003056:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800305a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	40020407 	.word	0x40020407
 80030b8:	bffdfff8 	.word	0xbffdfff8
 80030bc:	cccccccd 	.word	0xcccccccd
 80030c0:	40020000 	.word	0x40020000
 80030c4:	bffdfbf8 	.word	0xbffdfbf8
 80030c8:	40020400 	.word	0x40020400

080030cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_DMA_Start_IT+0x20>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e04b      	b.n	8003184 <HAL_DMA_Start_IT+0xb8>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d13a      	bne.n	8003176 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fbb1 	bl	800388c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 020e 	orr.w	r2, r2, #14
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e00f      	b.n	8003164 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0204 	bic.w	r2, r2, #4
 8003152:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 020a 	orr.w	r2, r2, #10
 8003162:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e005      	b.n	8003182 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d008      	beq.n	80031b6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2204      	movs	r2, #4
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e020      	b.n	80031f8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 020e 	bic.w	r2, r2, #14
 80031c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d005      	beq.n	8003228 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2204      	movs	r2, #4
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
 8003226:	e0d6      	b.n	80033d6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 020e 	bic.w	r2, r2, #14
 8003236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <HAL_DMA_Abort_IT+0x1dc>)
 8003250:	429a      	cmp	r2, r3
 8003252:	d958      	bls.n	8003306 <HAL_DMA_Abort_IT+0x102>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a62      	ldr	r2, [pc, #392]	; (80033e4 <HAL_DMA_Abort_IT+0x1e0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d04f      	beq.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a61      	ldr	r2, [pc, #388]	; (80033e8 <HAL_DMA_Abort_IT+0x1e4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d048      	beq.n	80032fa <HAL_DMA_Abort_IT+0xf6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a5f      	ldr	r2, [pc, #380]	; (80033ec <HAL_DMA_Abort_IT+0x1e8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d040      	beq.n	80032f4 <HAL_DMA_Abort_IT+0xf0>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5e      	ldr	r2, [pc, #376]	; (80033f0 <HAL_DMA_Abort_IT+0x1ec>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d038      	beq.n	80032ee <HAL_DMA_Abort_IT+0xea>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_DMA_Abort_IT+0x1f0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d030      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xe4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5b      	ldr	r2, [pc, #364]	; (80033f8 <HAL_DMA_Abort_IT+0x1f4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d028      	beq.n	80032e2 <HAL_DMA_Abort_IT+0xde>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_DMA_Abort_IT+0x1dc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d020      	beq.n	80032dc <HAL_DMA_Abort_IT+0xd8>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a57      	ldr	r2, [pc, #348]	; (80033fc <HAL_DMA_Abort_IT+0x1f8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d019      	beq.n	80032d8 <HAL_DMA_Abort_IT+0xd4>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a55      	ldr	r2, [pc, #340]	; (8003400 <HAL_DMA_Abort_IT+0x1fc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d012      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xd0>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a54      	ldr	r2, [pc, #336]	; (8003404 <HAL_DMA_Abort_IT+0x200>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00a      	beq.n	80032ce <HAL_DMA_Abort_IT+0xca>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_DMA_Abort_IT+0x204>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d102      	bne.n	80032c8 <HAL_DMA_Abort_IT+0xc4>
 80032c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c6:	e01b      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032cc:	e018      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d2:	e015      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032d4:	2310      	movs	r3, #16
 80032d6:	e013      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032d8:	2301      	movs	r3, #1
 80032da:	e011      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e0:	e00e      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032e6:	e00b      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ec:	e008      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f2:	e005      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f8:	e002      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032fa:	2310      	movs	r3, #16
 80032fc:	e000      	b.n	8003300 <HAL_DMA_Abort_IT+0xfc>
 80032fe:	2301      	movs	r3, #1
 8003300:	4a42      	ldr	r2, [pc, #264]	; (800340c <HAL_DMA_Abort_IT+0x208>)
 8003302:	6053      	str	r3, [r2, #4]
 8003304:	e057      	b.n	80033b6 <HAL_DMA_Abort_IT+0x1b2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a36      	ldr	r2, [pc, #216]	; (80033e4 <HAL_DMA_Abort_IT+0x1e0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04f      	beq.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <HAL_DMA_Abort_IT+0x1e4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d048      	beq.n	80033ac <HAL_DMA_Abort_IT+0x1a8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a33      	ldr	r2, [pc, #204]	; (80033ec <HAL_DMA_Abort_IT+0x1e8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d040      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x1a2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a31      	ldr	r2, [pc, #196]	; (80033f0 <HAL_DMA_Abort_IT+0x1ec>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d038      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x19c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_DMA_Abort_IT+0x1f0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d030      	beq.n	800339a <HAL_DMA_Abort_IT+0x196>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2e      	ldr	r2, [pc, #184]	; (80033f8 <HAL_DMA_Abort_IT+0x1f4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d028      	beq.n	8003394 <HAL_DMA_Abort_IT+0x190>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <HAL_DMA_Abort_IT+0x1dc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d020      	beq.n	800338e <HAL_DMA_Abort_IT+0x18a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <HAL_DMA_Abort_IT+0x1f8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d019      	beq.n	800338a <HAL_DMA_Abort_IT+0x186>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a29      	ldr	r2, [pc, #164]	; (8003400 <HAL_DMA_Abort_IT+0x1fc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d012      	beq.n	8003386 <HAL_DMA_Abort_IT+0x182>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a27      	ldr	r2, [pc, #156]	; (8003404 <HAL_DMA_Abort_IT+0x200>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00a      	beq.n	8003380 <HAL_DMA_Abort_IT+0x17c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_DMA_Abort_IT+0x204>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d102      	bne.n	800337a <HAL_DMA_Abort_IT+0x176>
 8003374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003378:	e01b      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 800337a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800337e:	e018      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 8003380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003384:	e015      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 8003386:	2310      	movs	r3, #16
 8003388:	e013      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 800338a:	2301      	movs	r3, #1
 800338c:	e011      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 800338e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003392:	e00e      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 8003394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003398:	e00b      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 800339a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339e:	e008      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 80033a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a4:	e005      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 80033a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033aa:	e002      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 80033ac:	2310      	movs	r3, #16
 80033ae:	e000      	b.n	80033b2 <HAL_DMA_Abort_IT+0x1ae>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4a17      	ldr	r2, [pc, #92]	; (8003410 <HAL_DMA_Abort_IT+0x20c>)
 80033b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
    } 
  }
  return status;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40020080 	.word	0x40020080
 80033e4:	40020008 	.word	0x40020008
 80033e8:	4002001c 	.word	0x4002001c
 80033ec:	40020030 	.word	0x40020030
 80033f0:	40020044 	.word	0x40020044
 80033f4:	40020058 	.word	0x40020058
 80033f8:	4002006c 	.word	0x4002006c
 80033fc:	40020408 	.word	0x40020408
 8003400:	4002041c 	.word	0x4002041c
 8003404:	40020430 	.word	0x40020430
 8003408:	40020444 	.word	0x40020444
 800340c:	40020400 	.word	0x40020400
 8003410:	40020000 	.word	0x40020000

08003414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2204      	movs	r2, #4
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80f1 	beq.w	8003620 <HAL_DMA_IRQHandler+0x20c>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80eb 	beq.w	8003620 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_DMA_IRQHandler+0x1d8>)
 8003470:	429a      	cmp	r2, r3
 8003472:	d958      	bls.n	8003526 <HAL_DMA_IRQHandler+0x112>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_DMA_IRQHandler+0x1dc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d04f      	beq.n	800351e <HAL_DMA_IRQHandler+0x10a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_DMA_IRQHandler+0x1e0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d048      	beq.n	800351a <HAL_DMA_IRQHandler+0x106>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_DMA_IRQHandler+0x1e4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d040      	beq.n	8003514 <HAL_DMA_IRQHandler+0x100>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a59      	ldr	r2, [pc, #356]	; (80035fc <HAL_DMA_IRQHandler+0x1e8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d038      	beq.n	800350e <HAL_DMA_IRQHandler+0xfa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a57      	ldr	r2, [pc, #348]	; (8003600 <HAL_DMA_IRQHandler+0x1ec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d030      	beq.n	8003508 <HAL_DMA_IRQHandler+0xf4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_DMA_IRQHandler+0x1f0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d028      	beq.n	8003502 <HAL_DMA_IRQHandler+0xee>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a4d      	ldr	r2, [pc, #308]	; (80035ec <HAL_DMA_IRQHandler+0x1d8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d020      	beq.n	80034fc <HAL_DMA_IRQHandler+0xe8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a52      	ldr	r2, [pc, #328]	; (8003608 <HAL_DMA_IRQHandler+0x1f4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d019      	beq.n	80034f8 <HAL_DMA_IRQHandler+0xe4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a50      	ldr	r2, [pc, #320]	; (800360c <HAL_DMA_IRQHandler+0x1f8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d012      	beq.n	80034f4 <HAL_DMA_IRQHandler+0xe0>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4f      	ldr	r2, [pc, #316]	; (8003610 <HAL_DMA_IRQHandler+0x1fc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00a      	beq.n	80034ee <HAL_DMA_IRQHandler+0xda>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <HAL_DMA_IRQHandler+0x200>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d102      	bne.n	80034e8 <HAL_DMA_IRQHandler+0xd4>
 80034e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034e6:	e01b      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034ec:	e018      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f2:	e015      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034f4:	2340      	movs	r3, #64	; 0x40
 80034f6:	e013      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e011      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003500:	e00e      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 8003502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003506:	e00b      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 8003508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800350c:	e008      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 800350e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003512:	e005      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 8003514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003518:	e002      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 800351a:	2340      	movs	r3, #64	; 0x40
 800351c:	e000      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 800351e:	2304      	movs	r3, #4
 8003520:	4a3d      	ldr	r2, [pc, #244]	; (8003618 <HAL_DMA_IRQHandler+0x204>)
 8003522:	6053      	str	r3, [r2, #4]
 8003524:	e057      	b.n	80035d6 <HAL_DMA_IRQHandler+0x1c2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <HAL_DMA_IRQHandler+0x1dc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d04f      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x1bc>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2f      	ldr	r2, [pc, #188]	; (80035f4 <HAL_DMA_IRQHandler+0x1e0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d048      	beq.n	80035cc <HAL_DMA_IRQHandler+0x1b8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2e      	ldr	r2, [pc, #184]	; (80035f8 <HAL_DMA_IRQHandler+0x1e4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d040      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x1b2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <HAL_DMA_IRQHandler+0x1e8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d038      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x1ac>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <HAL_DMA_IRQHandler+0x1ec>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d030      	beq.n	80035ba <HAL_DMA_IRQHandler+0x1a6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a29      	ldr	r2, [pc, #164]	; (8003604 <HAL_DMA_IRQHandler+0x1f0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d028      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x1a0>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a21      	ldr	r2, [pc, #132]	; (80035ec <HAL_DMA_IRQHandler+0x1d8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d020      	beq.n	80035ae <HAL_DMA_IRQHandler+0x19a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_DMA_IRQHandler+0x1f4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_DMA_IRQHandler+0x196>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a24      	ldr	r2, [pc, #144]	; (800360c <HAL_DMA_IRQHandler+0x1f8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d012      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x192>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_DMA_IRQHandler+0x1fc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00a      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x18c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <HAL_DMA_IRQHandler+0x200>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d102      	bne.n	800359a <HAL_DMA_IRQHandler+0x186>
 8003594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003598:	e01b      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 800359a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800359e:	e018      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a4:	e015      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035a6:	2340      	movs	r3, #64	; 0x40
 80035a8:	e013      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e011      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035b2:	e00e      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035b8:	e00b      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035be:	e008      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035c4:	e005      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ca:	e002      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035cc:	2340      	movs	r3, #64	; 0x40
 80035ce:	e000      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035d0:	2304      	movs	r3, #4
 80035d2:	4a12      	ldr	r2, [pc, #72]	; (800361c <HAL_DMA_IRQHandler+0x208>)
 80035d4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8136 	beq.w	800384c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035e8:	e130      	b.n	800384c <HAL_DMA_IRQHandler+0x438>
 80035ea:	bf00      	nop
 80035ec:	40020080 	.word	0x40020080
 80035f0:	40020008 	.word	0x40020008
 80035f4:	4002001c 	.word	0x4002001c
 80035f8:	40020030 	.word	0x40020030
 80035fc:	40020044 	.word	0x40020044
 8003600:	40020058 	.word	0x40020058
 8003604:	4002006c 	.word	0x4002006c
 8003608:	40020408 	.word	0x40020408
 800360c:	4002041c 	.word	0x4002041c
 8003610:	40020430 	.word	0x40020430
 8003614:	40020444 	.word	0x40020444
 8003618:	40020400 	.word	0x40020400
 800361c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2202      	movs	r2, #2
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80dd 	beq.w	80037ec <HAL_DMA_IRQHandler+0x3d8>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80d7 	beq.w	80037ec <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 020a 	bic.w	r2, r2, #10
 800365a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b7b      	ldr	r3, [pc, #492]	; (8003858 <HAL_DMA_IRQHandler+0x444>)
 800366c:	429a      	cmp	r2, r3
 800366e:	d958      	bls.n	8003722 <HAL_DMA_IRQHandler+0x30e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a79      	ldr	r2, [pc, #484]	; (800385c <HAL_DMA_IRQHandler+0x448>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d04f      	beq.n	800371a <HAL_DMA_IRQHandler+0x306>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a78      	ldr	r2, [pc, #480]	; (8003860 <HAL_DMA_IRQHandler+0x44c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d048      	beq.n	8003716 <HAL_DMA_IRQHandler+0x302>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a76      	ldr	r2, [pc, #472]	; (8003864 <HAL_DMA_IRQHandler+0x450>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d040      	beq.n	8003710 <HAL_DMA_IRQHandler+0x2fc>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a75      	ldr	r2, [pc, #468]	; (8003868 <HAL_DMA_IRQHandler+0x454>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d038      	beq.n	800370a <HAL_DMA_IRQHandler+0x2f6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a73      	ldr	r2, [pc, #460]	; (800386c <HAL_DMA_IRQHandler+0x458>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d030      	beq.n	8003704 <HAL_DMA_IRQHandler+0x2f0>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a72      	ldr	r2, [pc, #456]	; (8003870 <HAL_DMA_IRQHandler+0x45c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d028      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ea>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a69      	ldr	r2, [pc, #420]	; (8003858 <HAL_DMA_IRQHandler+0x444>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d020      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x2e4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6e      	ldr	r2, [pc, #440]	; (8003874 <HAL_DMA_IRQHandler+0x460>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d019      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x2e0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6c      	ldr	r2, [pc, #432]	; (8003878 <HAL_DMA_IRQHandler+0x464>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d012      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x2dc>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6b      	ldr	r2, [pc, #428]	; (800387c <HAL_DMA_IRQHandler+0x468>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00a      	beq.n	80036ea <HAL_DMA_IRQHandler+0x2d6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a69      	ldr	r2, [pc, #420]	; (8003880 <HAL_DMA_IRQHandler+0x46c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d102      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x2d0>
 80036de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036e2:	e01b      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e8:	e018      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ee:	e015      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036f0:	2320      	movs	r3, #32
 80036f2:	e013      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e011      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fc:	e00e      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003702:	e00b      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 8003704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003708:	e008      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 800370a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800370e:	e005      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 8003710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003714:	e002      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 8003716:	2320      	movs	r3, #32
 8003718:	e000      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 800371a:	2302      	movs	r3, #2
 800371c:	4a59      	ldr	r2, [pc, #356]	; (8003884 <HAL_DMA_IRQHandler+0x470>)
 800371e:	6053      	str	r3, [r2, #4]
 8003720:	e057      	b.n	80037d2 <HAL_DMA_IRQHandler+0x3be>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a4d      	ldr	r2, [pc, #308]	; (800385c <HAL_DMA_IRQHandler+0x448>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04f      	beq.n	80037cc <HAL_DMA_IRQHandler+0x3b8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a4b      	ldr	r2, [pc, #300]	; (8003860 <HAL_DMA_IRQHandler+0x44c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d048      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x3b4>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a4a      	ldr	r2, [pc, #296]	; (8003864 <HAL_DMA_IRQHandler+0x450>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3ae>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a48      	ldr	r2, [pc, #288]	; (8003868 <HAL_DMA_IRQHandler+0x454>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d038      	beq.n	80037bc <HAL_DMA_IRQHandler+0x3a8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a47      	ldr	r2, [pc, #284]	; (800386c <HAL_DMA_IRQHandler+0x458>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d030      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x3a2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a45      	ldr	r2, [pc, #276]	; (8003870 <HAL_DMA_IRQHandler+0x45c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d028      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x39c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <HAL_DMA_IRQHandler+0x444>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d020      	beq.n	80037aa <HAL_DMA_IRQHandler+0x396>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a41      	ldr	r2, [pc, #260]	; (8003874 <HAL_DMA_IRQHandler+0x460>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x392>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <HAL_DMA_IRQHandler+0x464>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d012      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x38e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3e      	ldr	r2, [pc, #248]	; (800387c <HAL_DMA_IRQHandler+0x468>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00a      	beq.n	800379c <HAL_DMA_IRQHandler+0x388>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3d      	ldr	r2, [pc, #244]	; (8003880 <HAL_DMA_IRQHandler+0x46c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d102      	bne.n	8003796 <HAL_DMA_IRQHandler+0x382>
 8003790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003794:	e01b      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 8003796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800379a:	e018      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 800379c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a0:	e015      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037a2:	2320      	movs	r3, #32
 80037a4:	e013      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e011      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ae:	e00e      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037b4:	e00b      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ba:	e008      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c0:	e005      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c6:	e002      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037c8:	2320      	movs	r3, #32
 80037ca:	e000      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037cc:	2302      	movs	r3, #2
 80037ce:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <HAL_DMA_IRQHandler+0x474>)
 80037d0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d034      	beq.n	800384c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037ea:	e02f      	b.n	800384c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2208      	movs	r2, #8
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d028      	beq.n	800384e <HAL_DMA_IRQHandler+0x43a>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d023      	beq.n	800384e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 020e 	bic.w	r2, r2, #14
 8003814:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2101      	movs	r1, #1
 8003820:	fa01 f202 	lsl.w	r2, r1, r2
 8003824:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
    }
  }
  return;
 800384c:	bf00      	nop
 800384e:	bf00      	nop
}
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40020080 	.word	0x40020080
 800385c:	40020008 	.word	0x40020008
 8003860:	4002001c 	.word	0x4002001c
 8003864:	40020030 	.word	0x40020030
 8003868:	40020044 	.word	0x40020044
 800386c:	40020058 	.word	0x40020058
 8003870:	4002006c 	.word	0x4002006c
 8003874:	40020408 	.word	0x40020408
 8003878:	4002041c 	.word	0x4002041c
 800387c:	40020430 	.word	0x40020430
 8003880:	40020444 	.word	0x40020444
 8003884:	40020400 	.word	0x40020400
 8003888:	40020000 	.word	0x40020000

0800388c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d108      	bne.n	80038cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038ca:	e007      	b.n	80038dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	60da      	str	r2, [r3, #12]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b08b      	sub	sp, #44	; 0x2c
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038fa:	e179      	b.n	8003bf0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038fc:	2201      	movs	r2, #1
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	429a      	cmp	r2, r3
 8003916:	f040 8168 	bne.w	8003bea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a96      	ldr	r2, [pc, #600]	; (8003b78 <HAL_GPIO_Init+0x290>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d05e      	beq.n	80039e2 <HAL_GPIO_Init+0xfa>
 8003924:	4a94      	ldr	r2, [pc, #592]	; (8003b78 <HAL_GPIO_Init+0x290>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d875      	bhi.n	8003a16 <HAL_GPIO_Init+0x12e>
 800392a:	4a94      	ldr	r2, [pc, #592]	; (8003b7c <HAL_GPIO_Init+0x294>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d058      	beq.n	80039e2 <HAL_GPIO_Init+0xfa>
 8003930:	4a92      	ldr	r2, [pc, #584]	; (8003b7c <HAL_GPIO_Init+0x294>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d86f      	bhi.n	8003a16 <HAL_GPIO_Init+0x12e>
 8003936:	4a92      	ldr	r2, [pc, #584]	; (8003b80 <HAL_GPIO_Init+0x298>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d052      	beq.n	80039e2 <HAL_GPIO_Init+0xfa>
 800393c:	4a90      	ldr	r2, [pc, #576]	; (8003b80 <HAL_GPIO_Init+0x298>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d869      	bhi.n	8003a16 <HAL_GPIO_Init+0x12e>
 8003942:	4a90      	ldr	r2, [pc, #576]	; (8003b84 <HAL_GPIO_Init+0x29c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04c      	beq.n	80039e2 <HAL_GPIO_Init+0xfa>
 8003948:	4a8e      	ldr	r2, [pc, #568]	; (8003b84 <HAL_GPIO_Init+0x29c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d863      	bhi.n	8003a16 <HAL_GPIO_Init+0x12e>
 800394e:	4a8e      	ldr	r2, [pc, #568]	; (8003b88 <HAL_GPIO_Init+0x2a0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d046      	beq.n	80039e2 <HAL_GPIO_Init+0xfa>
 8003954:	4a8c      	ldr	r2, [pc, #560]	; (8003b88 <HAL_GPIO_Init+0x2a0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d85d      	bhi.n	8003a16 <HAL_GPIO_Init+0x12e>
 800395a:	2b12      	cmp	r3, #18
 800395c:	d82a      	bhi.n	80039b4 <HAL_GPIO_Init+0xcc>
 800395e:	2b12      	cmp	r3, #18
 8003960:	d859      	bhi.n	8003a16 <HAL_GPIO_Init+0x12e>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <HAL_GPIO_Init+0x80>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	080039e3 	.word	0x080039e3
 800396c:	080039bd 	.word	0x080039bd
 8003970:	080039cf 	.word	0x080039cf
 8003974:	08003a11 	.word	0x08003a11
 8003978:	08003a17 	.word	0x08003a17
 800397c:	08003a17 	.word	0x08003a17
 8003980:	08003a17 	.word	0x08003a17
 8003984:	08003a17 	.word	0x08003a17
 8003988:	08003a17 	.word	0x08003a17
 800398c:	08003a17 	.word	0x08003a17
 8003990:	08003a17 	.word	0x08003a17
 8003994:	08003a17 	.word	0x08003a17
 8003998:	08003a17 	.word	0x08003a17
 800399c:	08003a17 	.word	0x08003a17
 80039a0:	08003a17 	.word	0x08003a17
 80039a4:	08003a17 	.word	0x08003a17
 80039a8:	08003a17 	.word	0x08003a17
 80039ac:	080039c5 	.word	0x080039c5
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	4a75      	ldr	r2, [pc, #468]	; (8003b8c <HAL_GPIO_Init+0x2a4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039ba:	e02c      	b.n	8003a16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	623b      	str	r3, [r7, #32]
          break;
 80039c2:	e029      	b.n	8003a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	3304      	adds	r3, #4
 80039ca:	623b      	str	r3, [r7, #32]
          break;
 80039cc:	e024      	b.n	8003a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	3308      	adds	r3, #8
 80039d4:	623b      	str	r3, [r7, #32]
          break;
 80039d6:	e01f      	b.n	8003a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	330c      	adds	r3, #12
 80039de:	623b      	str	r3, [r7, #32]
          break;
 80039e0:	e01a      	b.n	8003a18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ea:	2304      	movs	r3, #4
 80039ec:	623b      	str	r3, [r7, #32]
          break;
 80039ee:	e013      	b.n	8003a18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039f8:	2308      	movs	r3, #8
 80039fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	611a      	str	r2, [r3, #16]
          break;
 8003a02:	e009      	b.n	8003a18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a04:	2308      	movs	r3, #8
 8003a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	615a      	str	r2, [r3, #20]
          break;
 8003a0e:	e003      	b.n	8003a18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a10:	2300      	movs	r3, #0
 8003a12:	623b      	str	r3, [r7, #32]
          break;
 8003a14:	e000      	b.n	8003a18 <HAL_GPIO_Init+0x130>
          break;
 8003a16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2bff      	cmp	r3, #255	; 0xff
 8003a1c:	d801      	bhi.n	8003a22 <HAL_GPIO_Init+0x13a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	e001      	b.n	8003a26 <HAL_GPIO_Init+0x13e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
 8003a26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2bff      	cmp	r3, #255	; 0xff
 8003a2c:	d802      	bhi.n	8003a34 <HAL_GPIO_Init+0x14c>
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	e002      	b.n	8003a3a <HAL_GPIO_Init+0x152>
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	3b08      	subs	r3, #8
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	210f      	movs	r1, #15
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	6a39      	ldr	r1, [r7, #32]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	431a      	orrs	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80c1 	beq.w	8003bea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a68:	4b49      	ldr	r3, [pc, #292]	; (8003b90 <HAL_GPIO_Init+0x2a8>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	4a48      	ldr	r2, [pc, #288]	; (8003b90 <HAL_GPIO_Init+0x2a8>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6193      	str	r3, [r2, #24]
 8003a74:	4b46      	ldr	r3, [pc, #280]	; (8003b90 <HAL_GPIO_Init+0x2a8>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a80:	4a44      	ldr	r2, [pc, #272]	; (8003b94 <HAL_GPIO_Init+0x2ac>)
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	3302      	adds	r3, #2
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	220f      	movs	r2, #15
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3c      	ldr	r2, [pc, #240]	; (8003b98 <HAL_GPIO_Init+0x2b0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d01f      	beq.n	8003aec <HAL_GPIO_Init+0x204>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3b      	ldr	r2, [pc, #236]	; (8003b9c <HAL_GPIO_Init+0x2b4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d019      	beq.n	8003ae8 <HAL_GPIO_Init+0x200>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3a      	ldr	r2, [pc, #232]	; (8003ba0 <HAL_GPIO_Init+0x2b8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <HAL_GPIO_Init+0x1fc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a39      	ldr	r2, [pc, #228]	; (8003ba4 <HAL_GPIO_Init+0x2bc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_GPIO_Init+0x1f8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <HAL_GPIO_Init+0x2c0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <HAL_GPIO_Init+0x1f4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a37      	ldr	r2, [pc, #220]	; (8003bac <HAL_GPIO_Init+0x2c4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_GPIO_Init+0x1f0>
 8003ad4:	2305      	movs	r3, #5
 8003ad6:	e00a      	b.n	8003aee <HAL_GPIO_Init+0x206>
 8003ad8:	2306      	movs	r3, #6
 8003ada:	e008      	b.n	8003aee <HAL_GPIO_Init+0x206>
 8003adc:	2304      	movs	r3, #4
 8003ade:	e006      	b.n	8003aee <HAL_GPIO_Init+0x206>
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e004      	b.n	8003aee <HAL_GPIO_Init+0x206>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e002      	b.n	8003aee <HAL_GPIO_Init+0x206>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_GPIO_Init+0x206>
 8003aec:	2300      	movs	r3, #0
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	f002 0203 	and.w	r2, r2, #3
 8003af4:	0092      	lsls	r2, r2, #2
 8003af6:	4093      	lsls	r3, r2
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003afe:	4925      	ldr	r1, [pc, #148]	; (8003b94 <HAL_GPIO_Init+0x2ac>)
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	3302      	adds	r3, #2
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	4924      	ldr	r1, [pc, #144]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]
 8003b24:	e006      	b.n	8003b34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	4920      	ldr	r1, [pc, #128]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	491a      	ldr	r1, [pc, #104]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60cb      	str	r3, [r1, #12]
 8003b4c:	e006      	b.n	8003b5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b4e:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	4916      	ldr	r1, [pc, #88]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d025      	beq.n	8003bb4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	4910      	ldr	r1, [pc, #64]	; (8003bb0 <HAL_GPIO_Init+0x2c8>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
 8003b74:	e025      	b.n	8003bc2 <HAL_GPIO_Init+0x2da>
 8003b76:	bf00      	nop
 8003b78:	10320000 	.word	0x10320000
 8003b7c:	10310000 	.word	0x10310000
 8003b80:	10220000 	.word	0x10220000
 8003b84:	10210000 	.word	0x10210000
 8003b88:	10120000 	.word	0x10120000
 8003b8c:	10110000 	.word	0x10110000
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40010800 	.word	0x40010800
 8003b9c:	40010c00 	.word	0x40010c00
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	40011800 	.word	0x40011800
 8003bac:	40011c00 	.word	0x40011c00
 8003bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	4913      	ldr	r1, [pc, #76]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bce:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	490e      	ldr	r1, [pc, #56]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
 8003bda:	e006      	b.n	8003bea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	4909      	ldr	r1, [pc, #36]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	3301      	adds	r3, #1
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f47f ae7e 	bne.w	80038fc <HAL_GPIO_Init+0x14>
  }
}
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop
 8003c04:	372c      	adds	r7, #44	; 0x2c
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	40010400 	.word	0x40010400

08003c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c20:	787b      	ldrb	r3, [r7, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c2c:	e003      	b.n	8003c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	041a      	lsls	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e272      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8087 	beq.w	8003d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c60:	4b92      	ldr	r3, [pc, #584]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d00c      	beq.n	8003c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c6c:	4b8f      	ldr	r3, [pc, #572]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d112      	bne.n	8003c9e <HAL_RCC_OscConfig+0x5e>
 8003c78:	4b8c      	ldr	r3, [pc, #560]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d10b      	bne.n	8003c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c86:	4b89      	ldr	r3, [pc, #548]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d06c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x12c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d168      	bne.n	8003d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e24c      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x76>
 8003ca8:	4b80      	ldr	r3, [pc, #512]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a7f      	ldr	r2, [pc, #508]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	e02e      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x98>
 8003cbe:	4b7b      	ldr	r3, [pc, #492]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7a      	ldr	r2, [pc, #488]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b78      	ldr	r3, [pc, #480]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a77      	ldr	r2, [pc, #476]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e01d      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0xbc>
 8003ce2:	4b72      	ldr	r3, [pc, #456]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a71      	ldr	r2, [pc, #452]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b6f      	ldr	r3, [pc, #444]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6e      	ldr	r2, [pc, #440]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cfc:	4b6b      	ldr	r3, [pc, #428]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6a      	ldr	r2, [pc, #424]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b68      	ldr	r3, [pc, #416]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a67      	ldr	r2, [pc, #412]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7ff f848 	bl	8002db0 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d24:	f7ff f844 	bl	8002db0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e200      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xe4>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7ff f834 	bl	8002db0 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7ff f830 	bl	8002db0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1ec      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x10c>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d063      	beq.n	8003e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7a:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d86:	4b49      	ldr	r3, [pc, #292]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d11c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x18c>
 8003d92:	4b46      	ldr	r3, [pc, #280]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d116      	bne.n	8003dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	4b43      	ldr	r3, [pc, #268]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_RCC_OscConfig+0x176>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1c0      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4939      	ldr	r1, [pc, #228]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	e03a      	b.n	8003e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d020      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd4:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fe ffe9 	bl	8002db0 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fe ffe5 	bl	8002db0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e1a1      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4927      	ldr	r1, [pc, #156]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]
 8003e14:	e015      	b.n	8003e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <HAL_RCC_OscConfig+0x270>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe ffc8 	bl	8002db0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e24:	f7fe ffc4 	bl	8002db0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e180      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d03a      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d019      	beq.n	8003e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <HAL_RCC_OscConfig+0x274>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5c:	f7fe ffa8 	bl	8002db0 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e64:	f7fe ffa4 	bl	8002db0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e160      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e82:	2001      	movs	r0, #1
 8003e84:	f000 face 	bl	8004424 <RCC_Delay>
 8003e88:	e01c      	b.n	8003ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fe ff8e 	bl	8002db0 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e96:	e00f      	b.n	8003eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fe ff8a 	bl	8002db0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d908      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e146      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	42420000 	.word	0x42420000
 8003eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb8:	4b92      	ldr	r3, [pc, #584]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e9      	bne.n	8003e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80a6 	beq.w	800401e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed6:	4b8b      	ldr	r3, [pc, #556]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10d      	bne.n	8003efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	4b88      	ldr	r3, [pc, #544]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	4a87      	ldr	r2, [pc, #540]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eec:	61d3      	str	r3, [r2, #28]
 8003eee:	4b85      	ldr	r3, [pc, #532]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	4b82      	ldr	r3, [pc, #520]	; (8004108 <HAL_RCC_OscConfig+0x4c8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d118      	bne.n	8003f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f0a:	4b7f      	ldr	r3, [pc, #508]	; (8004108 <HAL_RCC_OscConfig+0x4c8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7e      	ldr	r2, [pc, #504]	; (8004108 <HAL_RCC_OscConfig+0x4c8>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f16:	f7fe ff4b 	bl	8002db0 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1e:	f7fe ff47 	bl	8002db0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b64      	cmp	r3, #100	; 0x64
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e103      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	4b75      	ldr	r3, [pc, #468]	; (8004108 <HAL_RCC_OscConfig+0x4c8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d106      	bne.n	8003f52 <HAL_RCC_OscConfig+0x312>
 8003f44:	4b6f      	ldr	r3, [pc, #444]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4a6e      	ldr	r2, [pc, #440]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6213      	str	r3, [r2, #32]
 8003f50:	e02d      	b.n	8003fae <HAL_RCC_OscConfig+0x36e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x334>
 8003f5a:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a69      	ldr	r2, [pc, #420]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6213      	str	r3, [r2, #32]
 8003f66:	4b67      	ldr	r3, [pc, #412]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4a66      	ldr	r2, [pc, #408]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	6213      	str	r3, [r2, #32]
 8003f72:	e01c      	b.n	8003fae <HAL_RCC_OscConfig+0x36e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	d10c      	bne.n	8003f96 <HAL_RCC_OscConfig+0x356>
 8003f7c:	4b61      	ldr	r3, [pc, #388]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4a60      	ldr	r2, [pc, #384]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6213      	str	r3, [r2, #32]
 8003f88:	4b5e      	ldr	r3, [pc, #376]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	4a5d      	ldr	r2, [pc, #372]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6213      	str	r3, [r2, #32]
 8003f94:	e00b      	b.n	8003fae <HAL_RCC_OscConfig+0x36e>
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a5a      	ldr	r2, [pc, #360]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6213      	str	r3, [r2, #32]
 8003fa2:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4a57      	ldr	r2, [pc, #348]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003fa8:	f023 0304 	bic.w	r3, r3, #4
 8003fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fefb 	bl	8002db0 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fe fef7 	bl	8002db0 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0b1      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ee      	beq.n	8003fbe <HAL_RCC_OscConfig+0x37e>
 8003fe0:	e014      	b.n	800400c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe2:	f7fe fee5 	bl	8002db0 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fe fee1 	bl	8002db0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e09b      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	4b40      	ldr	r3, [pc, #256]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ee      	bne.n	8003fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004012:	4b3c      	ldr	r3, [pc, #240]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4a3b      	ldr	r2, [pc, #236]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8087 	beq.w	8004136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004028:	4b36      	ldr	r3, [pc, #216]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d061      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d146      	bne.n	80040ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403c:	4b33      	ldr	r3, [pc, #204]	; (800410c <HAL_RCC_OscConfig+0x4cc>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fe feb5 	bl	8002db0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404a:	f7fe feb1 	bl	8002db0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e06d      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d108      	bne.n	8004084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	4921      	ldr	r1, [pc, #132]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004084:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a19      	ldr	r1, [r3, #32]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	430b      	orrs	r3, r1
 8004096:	491b      	ldr	r1, [pc, #108]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_RCC_OscConfig+0x4cc>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fe fe85 	bl	8002db0 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fe fe81 	bl	8002db0 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e03d      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x46a>
 80040c8:	e035      	b.n	8004136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_RCC_OscConfig+0x4cc>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fe fe6e 	bl	8002db0 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe fe6a 	bl	8002db0 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e026      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x498>
 80040f6:	e01e      	b.n	8004136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e019      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
 800410c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_OscConfig+0x500>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	429a      	cmp	r2, r3
 8004122:	d106      	bne.n	8004132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0d0      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b6a      	ldr	r3, [pc, #424]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d910      	bls.n	8004188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b67      	ldr	r3, [pc, #412]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 0207 	bic.w	r2, r3, #7
 800416e:	4965      	ldr	r1, [pc, #404]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b63      	ldr	r3, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0b8      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d020      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a52      	ldr	r2, [pc, #328]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b50      	ldr	r3, [pc, #320]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	494d      	ldr	r1, [pc, #308]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d040      	beq.n	8004264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d115      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e07f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e073      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004212:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e06b      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4936      	ldr	r1, [pc, #216]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004234:	f7fe fdbc 	bl	8002db0 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fe fdb8 	bl	8002db0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e053      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 020c 	and.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429a      	cmp	r2, r3
 8004262:	d1eb      	bne.n	800423c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d210      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	4922      	ldr	r1, [pc, #136]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e032      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4916      	ldr	r1, [pc, #88]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	490e      	ldr	r1, [pc, #56]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042d2:	f000 f821 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	490a      	ldr	r1, [pc, #40]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	4a09      	ldr	r2, [pc, #36]	; (8004310 <HAL_RCC_ClockConfig+0x1cc>)
 80042ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1d0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fd1a 	bl	8002d2c <HAL_InitTick>

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40022000 	.word	0x40022000
 8004308:	40021000 	.word	0x40021000
 800430c:	0800af04 	.word	0x0800af04
 8004310:	20000014 	.word	0x20000014
 8004314:	20000018 	.word	0x20000018

08004318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b04      	cmp	r3, #4
 8004340:	d002      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x30>
 8004342:	2b08      	cmp	r3, #8
 8004344:	d003      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0x36>
 8004346:	e027      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800434a:	613b      	str	r3, [r7, #16]
      break;
 800434c:	e027      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	0c9b      	lsrs	r3, r3, #18
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	4a17      	ldr	r2, [pc, #92]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004358:	5cd3      	ldrb	r3, [r2, r3]
 800435a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d010      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004366:	4b11      	ldr	r3, [pc, #68]	; (80043ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	0c5b      	lsrs	r3, r3, #17
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004372:	5cd3      	ldrb	r3, [r2, r3]
 8004374:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800437a:	fb03 f202 	mul.w	r2, r3, r2
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	e004      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	613b      	str	r3, [r7, #16]
      break;
 8004396:	e002      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800439a:	613b      	str	r3, [r7, #16]
      break;
 800439c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439e:	693b      	ldr	r3, [r7, #16]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	007a1200 	.word	0x007a1200
 80043b4:	0800af1c 	.word	0x0800af1c
 80043b8:	0800af2c 	.word	0x0800af2c
 80043bc:	003d0900 	.word	0x003d0900

080043c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c4:	4b02      	ldr	r3, [pc, #8]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr
 80043d0:	20000014 	.word	0x20000014

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff2 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	0800af14 	.word	0x0800af14

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004400:	f7ff ffde 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	0adb      	lsrs	r3, r3, #11
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	0800af14 	.word	0x0800af14

08004424 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <RCC_Delay+0x34>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <RCC_Delay+0x38>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	0a5b      	lsrs	r3, r3, #9
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004440:	bf00      	nop
  }
  while (Delay --);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	60fa      	str	r2, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f9      	bne.n	8004440 <RCC_Delay+0x1c>
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	20000014 	.word	0x20000014
 800445c:	10624dd3 	.word	0x10624dd3

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e041      	b.n	80044f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fe f940 	bl	800270c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fd86 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d001      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e044      	b.n	80045a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <HAL_TIM_Base_Start_IT+0xac>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d00e      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <HAL_TIM_Base_Start_IT+0xb8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <HAL_TIM_Base_Start_IT+0xbc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d111      	bne.n	8004590 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d010      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	e007      	b.n	80045a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40013400 	.word	0x40013400
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00

080045c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e041      	b.n	8004656 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f839 	bl	800465e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f000 fcd6 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <HAL_TIM_PWM_Start+0x24>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e022      	b.n	80046da <HAL_TIM_PWM_Start+0x6a>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b04      	cmp	r3, #4
 8004698:	d109      	bne.n	80046ae <HAL_TIM_PWM_Start+0x3e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	bf14      	ite	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	2300      	moveq	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	e015      	b.n	80046da <HAL_TIM_PWM_Start+0x6a>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d109      	bne.n	80046c8 <HAL_TIM_PWM_Start+0x58>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e008      	b.n	80046da <HAL_TIM_PWM_Start+0x6a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e072      	b.n	80047c8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x82>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f0:	e013      	b.n	800471a <HAL_TIM_PWM_Start+0xaa>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0x92>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004700:	e00b      	b.n	800471a <HAL_TIM_PWM_Start+0xaa>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0xa2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004710:	e003      	b.n	800471a <HAL_TIM_PWM_Start+0xaa>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2201      	movs	r2, #1
 8004720:	6839      	ldr	r1, [r7, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 ff00 	bl	8005528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a28      	ldr	r2, [pc, #160]	; (80047d0 <HAL_TIM_PWM_Start+0x160>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_TIM_PWM_Start+0xcc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <HAL_TIM_PWM_Start+0x164>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d101      	bne.n	8004740 <HAL_TIM_PWM_Start+0xd0>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <HAL_TIM_PWM_Start+0xd2>
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <HAL_TIM_PWM_Start+0x160>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d018      	beq.n	8004792 <HAL_TIM_PWM_Start+0x122>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_TIM_PWM_Start+0x164>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_TIM_PWM_Start+0x122>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d00e      	beq.n	8004792 <HAL_TIM_PWM_Start+0x122>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <HAL_TIM_PWM_Start+0x168>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_TIM_PWM_Start+0x122>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a16      	ldr	r2, [pc, #88]	; (80047dc <HAL_TIM_PWM_Start+0x16c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIM_PWM_Start+0x122>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <HAL_TIM_PWM_Start+0x170>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d111      	bne.n	80047b6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b06      	cmp	r3, #6
 80047a2:	d010      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b4:	e007      	b.n	80047c6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40013400 	.word	0x40013400
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00

080047e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e093      	b.n	8004920 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fd ffb7 	bl	8002780 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004828:	f023 0307 	bic.w	r3, r3, #7
 800482c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f000 fbb9 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	4313      	orrs	r3, r2
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004884:	f023 030c 	bic.w	r3, r3, #12
 8004888:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004894:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	4313      	orrs	r3, r2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	011a      	lsls	r2, r3, #4
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	031b      	lsls	r3, r3, #12
 80048b4:	4313      	orrs	r3, r2
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	4313      	orrs	r3, r2
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004938:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004940:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004948:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004950:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d110      	bne.n	800497a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800495e:	7b7b      	ldrb	r3, [r7, #13]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d001      	beq.n	8004968 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e069      	b.n	8004a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	e031      	b.n	80049de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b04      	cmp	r3, #4
 800497e:	d110      	bne.n	80049a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d102      	bne.n	800498c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004986:	7b3b      	ldrb	r3, [r7, #12]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d001      	beq.n	8004990 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e055      	b.n	8004a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a0:	e01d      	b.n	80049de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d108      	bne.n	80049ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a8:	7bbb      	ldrb	r3, [r7, #14]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d105      	bne.n	80049ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ae:	7b7b      	ldrb	r3, [r7, #13]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d102      	bne.n	80049ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049b4:	7b3b      	ldrb	r3, [r7, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e03e      	b.n	8004a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_TIM_Encoder_Start+0xc4>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d008      	beq.n	80049fc <HAL_TIM_Encoder_Start+0xd4>
 80049ea:	e00f      	b.n	8004a0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2201      	movs	r2, #1
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fd97 	bl	8005528 <TIM_CCxChannelCmd>
      break;
 80049fa:	e016      	b.n	8004a2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	2104      	movs	r1, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fd8f 	bl	8005528 <TIM_CCxChannelCmd>
      break;
 8004a0a:	e00e      	b.n	8004a2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2201      	movs	r2, #1
 8004a12:	2100      	movs	r1, #0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fd87 	bl	8005528 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	2104      	movs	r1, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fd80 	bl	8005528 <TIM_CCxChannelCmd>
      break;
 8004a28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0202 	mvn.w	r2, #2
 8004a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa76 	bl	8004f78 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa69 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa78 	bl	8004f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0204 	mvn.w	r2, #4
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa4c 	bl	8004f78 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa3f 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fa4e 	bl	8004f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0208 	mvn.w	r2, #8
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa22 	bl	8004f78 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa15 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fa24 	bl	8004f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f9f8 	bl	8004f78 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9eb 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f9fa 	bl	8004f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0201 	mvn.w	r2, #1
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fe64 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fd84 	bl	80056fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f9be 	bl	8004f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0220 	mvn.w	r2, #32
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fd4f 	bl	80056ea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0ae      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	f200 809f 	bhi.w	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004cbd 	.word	0x08004cbd
 8004c8c:	08004dc1 	.word	0x08004dc1
 8004c90:	08004dc1 	.word	0x08004dc1
 8004c94:	08004dc1 	.word	0x08004dc1
 8004c98:	08004cfd 	.word	0x08004cfd
 8004c9c:	08004dc1 	.word	0x08004dc1
 8004ca0:	08004dc1 	.word	0x08004dc1
 8004ca4:	08004dc1 	.word	0x08004dc1
 8004ca8:	08004d3f 	.word	0x08004d3f
 8004cac:	08004dc1 	.word	0x08004dc1
 8004cb0:	08004dc1 	.word	0x08004dc1
 8004cb4:	08004dc1 	.word	0x08004dc1
 8004cb8:	08004d7f 	.word	0x08004d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f9ee 	bl	80050a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0208 	orr.w	r2, r2, #8
 8004cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	619a      	str	r2, [r3, #24]
      break;
 8004cfa:	e064      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fa3e 	bl	8005184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6999      	ldr	r1, [r3, #24]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	021a      	lsls	r2, r3, #8
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	619a      	str	r2, [r3, #24]
      break;
 8004d3c:	e043      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa91 	bl	800526c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0208 	orr.w	r2, r2, #8
 8004d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0204 	bic.w	r2, r2, #4
 8004d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	61da      	str	r2, [r3, #28]
      break;
 8004d7c:	e023      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fae5 	bl	8005354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69d9      	ldr	r1, [r3, #28]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	021a      	lsls	r2, r3, #8
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	61da      	str	r2, [r3, #28]
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0b4      	b.n	8004f5e <HAL_TIM_ConfigClockSource+0x186>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2c:	d03e      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0xd4>
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	f200 8087 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3a:	f000 8086 	beq.w	8004f4a <HAL_TIM_ConfigClockSource+0x172>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d87f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b70      	cmp	r3, #112	; 0x70
 8004e46:	d01a      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xa6>
 8004e48:	2b70      	cmp	r3, #112	; 0x70
 8004e4a:	d87b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b60      	cmp	r3, #96	; 0x60
 8004e4e:	d050      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e50:	2b60      	cmp	r3, #96	; 0x60
 8004e52:	d877      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b50      	cmp	r3, #80	; 0x50
 8004e56:	d03c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8004e58:	2b50      	cmp	r3, #80	; 0x50
 8004e5a:	d873      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d058      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x13a>
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d86f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b30      	cmp	r3, #48	; 0x30
 8004e66:	d064      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e68:	2b30      	cmp	r3, #48	; 0x30
 8004e6a:	d86b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d060      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d867      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d05c      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d05a      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e7c:	e062      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e8e:	f000 fb2c 	bl	80054ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
      break;
 8004eaa:	e04f      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ebc:	f000 fb15 	bl	80054ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ece:	609a      	str	r2, [r3, #8]
      break;
 8004ed0:	e03c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fa8c 	bl	80053fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2150      	movs	r1, #80	; 0x50
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fae3 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e02c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 faaa 	bl	8005458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2160      	movs	r1, #96	; 0x60
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fad3 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8004f10:	e01c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 fa6c 	bl	80053fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2140      	movs	r1, #64	; 0x40
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fac3 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8004f30:	e00c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 faba 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8004f42:	e003      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr
	...

08004fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a33      	ldr	r2, [pc, #204]	; (8005090 <TIM_Base_SetConfig+0xe0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a32      	ldr	r2, [pc, #200]	; (8005094 <TIM_Base_SetConfig+0xe4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00f      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a2f      	ldr	r2, [pc, #188]	; (8005098 <TIM_Base_SetConfig+0xe8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a2e      	ldr	r2, [pc, #184]	; (800509c <TIM_Base_SetConfig+0xec>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a2d      	ldr	r2, [pc, #180]	; (80050a0 <TIM_Base_SetConfig+0xf0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a22      	ldr	r2, [pc, #136]	; (8005090 <TIM_Base_SetConfig+0xe0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <TIM_Base_SetConfig+0x82>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a21      	ldr	r2, [pc, #132]	; (8005094 <TIM_Base_SetConfig+0xe4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00f      	beq.n	8005032 <TIM_Base_SetConfig+0x82>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	d00b      	beq.n	8005032 <TIM_Base_SetConfig+0x82>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <TIM_Base_SetConfig+0xe8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_Base_SetConfig+0x82>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1d      	ldr	r2, [pc, #116]	; (800509c <TIM_Base_SetConfig+0xec>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_Base_SetConfig+0x82>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <TIM_Base_SetConfig+0xf0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d108      	bne.n	8005044 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <TIM_Base_SetConfig+0xe0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0xc8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a08      	ldr	r2, [pc, #32]	; (8005094 <TIM_Base_SetConfig+0xe4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	615a      	str	r2, [r3, #20]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00

080050a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 0201 	bic.w	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0302 	bic.w	r3, r3, #2
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a20      	ldr	r2, [pc, #128]	; (800517c <TIM_OC1_SetConfig+0xd8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC1_SetConfig+0x64>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <TIM_OC1_SetConfig+0xdc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d10c      	bne.n	8005122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 0308 	bic.w	r3, r3, #8
 800510e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <TIM_OC1_SetConfig+0xd8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d003      	beq.n	8005132 <TIM_OC1_SetConfig+0x8e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <TIM_OC1_SetConfig+0xdc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d111      	bne.n	8005156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	621a      	str	r2, [r3, #32]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40013400 	.word	0x40013400

08005184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f023 0210 	bic.w	r2, r3, #16
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0320 	bic.w	r3, r3, #32
 80051ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a21      	ldr	r2, [pc, #132]	; (8005264 <TIM_OC2_SetConfig+0xe0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC2_SetConfig+0x68>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a20      	ldr	r2, [pc, #128]	; (8005268 <TIM_OC2_SetConfig+0xe4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10d      	bne.n	8005208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <TIM_OC2_SetConfig+0xe0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC2_SetConfig+0x94>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <TIM_OC2_SetConfig+0xe4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d113      	bne.n	8005240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40013400 	.word	0x40013400

0800526c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a21      	ldr	r2, [pc, #132]	; (800534c <TIM_OC3_SetConfig+0xe0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_OC3_SetConfig+0x66>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a20      	ldr	r2, [pc, #128]	; (8005350 <TIM_OC3_SetConfig+0xe4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10d      	bne.n	80052ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a16      	ldr	r2, [pc, #88]	; (800534c <TIM_OC3_SetConfig+0xe0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC3_SetConfig+0x92>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a15      	ldr	r2, [pc, #84]	; (8005350 <TIM_OC3_SetConfig+0xe4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800530c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40013400 	.word	0x40013400

08005354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800539e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <TIM_OC4_SetConfig+0xa0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_OC4_SetConfig+0x68>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a10      	ldr	r2, [pc, #64]	; (80053f8 <TIM_OC4_SetConfig+0xa4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d109      	bne.n	80053d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40013400 	.word	0x40013400

080053fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f023 0201 	bic.w	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 030a 	bic.w	r3, r3, #10
 8005438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0210 	bic.w	r2, r3, #16
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	031b      	lsls	r3, r3, #12
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005494:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	621a      	str	r2, [r3, #32]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f043 0307 	orr.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b087      	sub	sp, #28
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	021a      	lsls	r2, r3, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	431a      	orrs	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4313      	orrs	r3, r2
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	609a      	str	r2, [r3, #8]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2201      	movs	r2, #1
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	43db      	mvns	r3, r3
 800554a:	401a      	ands	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	431a      	orrs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr

08005570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005584:	2302      	movs	r3, #2
 8005586:	e050      	b.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1b      	ldr	r2, [pc, #108]	; (8005634 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d018      	beq.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a19      	ldr	r2, [pc, #100]	; (8005638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055de:	d00e      	beq.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a15      	ldr	r2, [pc, #84]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d009      	beq.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a14      	ldr	r2, [pc, #80]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a12      	ldr	r2, [pc, #72]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d10c      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	4313      	orrs	r3, r2
 800560e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00

08005648 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005660:	2302      	movs	r3, #2
 8005662:	e03d      	b.n	80056e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e042      	b.n	80057a6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fd f99b 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2224      	movs	r2, #36	; 0x24
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005750:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 ff54 	bl	8006600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005766:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005776:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005786:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b08a      	sub	sp, #40	; 0x28
 80057b2:	af02      	add	r7, sp, #8
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d16d      	bne.n	80058aa <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_UART_Transmit+0x2c>
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e066      	b.n	80058ac <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2221      	movs	r2, #33	; 0x21
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057ec:	f7fd fae0 	bl	8002db0 <HAL_GetTick>
 80057f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	88fa      	ldrh	r2, [r7, #6]
 80057f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005806:	d108      	bne.n	800581a <HAL_UART_Transmit+0x6c>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e003      	b.n	8005822 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005822:	e02a      	b.n	800587a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2200      	movs	r2, #0
 800582c:	2180      	movs	r1, #128	; 0x80
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fc1c 	bl	800606c <UART_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e036      	b.n	80058ac <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10b      	bne.n	800585c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005852:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	3302      	adds	r3, #2
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	e007      	b.n	800586c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3301      	adds	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1cf      	bne.n	8005824 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2200      	movs	r2, #0
 800588c:	2140      	movs	r1, #64	; 0x40
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fbec 	bl	800606c <UART_WaitOnFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e006      	b.n	80058ac <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d112      	bne.n	80058f4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_UART_Receive_DMA+0x26>
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e00b      	b.n	80058f6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fc2c 	bl	8006148 <UART_Start_Receive_DMA>
 80058f0:	4603      	mov	r3, r0
 80058f2:	e000      	b.n	80058f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
  }
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b0ba      	sub	sp, #232	; 0xe8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005926:	2300      	movs	r3, #0
 8005928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800592c:	2300      	movs	r3, #0
 800592e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800593e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10f      	bne.n	8005966 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <HAL_UART_IRQHandler+0x66>
 8005952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fd90 	bl	8006484 <UART_Receive_IT>
      return;
 8005964:	e25b      	b.n	8005e1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80de 	beq.w	8005b2c <HAL_UART_IRQHandler+0x22c>
 8005970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005980:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80d1 	beq.w	8005b2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <HAL_UART_IRQHandler+0xae>
 8005996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	f043 0201 	orr.w	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00b      	beq.n	80059d2 <HAL_UART_IRQHandler+0xd2>
 80059ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d005      	beq.n	80059d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	f043 0202 	orr.w	r2, r3, #2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <HAL_UART_IRQHandler+0xf6>
 80059de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d011      	beq.n	8005a26 <HAL_UART_IRQHandler+0x126>
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d105      	bne.n	8005a1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	f043 0208 	orr.w	r2, r3, #8
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 81f2 	beq.w	8005e14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_UART_IRQHandler+0x14e>
 8005a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fd1b 	bl	8006484 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_UART_IRQHandler+0x17a>
 8005a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d04f      	beq.n	8005b1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fc25 	bl	80062ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d041      	beq.n	8005b12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3314      	adds	r3, #20
 8005a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1d9      	bne.n	8005a8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d013      	beq.n	8005b0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	4a7e      	ldr	r2, [pc, #504]	; (8005ce0 <HAL_UART_IRQHandler+0x3e0>)
 8005ae8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fd fb88 	bl	8003204 <HAL_DMA_Abort_IT>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b04:	4610      	mov	r0, r2
 8005b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	e00e      	b.n	8005b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f99c 	bl	8005e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	e00a      	b.n	8005b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f998 	bl	8005e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	e006      	b.n	8005b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f994 	bl	8005e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b26:	e175      	b.n	8005e14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	bf00      	nop
    return;
 8005b2a:	e173      	b.n	8005e14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	f040 814f 	bne.w	8005dd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 8148 	beq.w	8005dd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8141 	beq.w	8005dd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 80b6 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8145 	beq.w	8005e18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b96:	429a      	cmp	r2, r3
 8005b98:	f080 813e 	bcs.w	8005e18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ba2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	f000 8088 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bdc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005be0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005be8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1d9      	bne.n	8005bb0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c0e:	f023 0301 	bic.w	r3, r3, #1
 8005c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e1      	bne.n	8005bfc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3314      	adds	r3, #20
 8005c3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3314      	adds	r3, #20
 8005c58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e3      	bne.n	8005c38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c90:	f023 0310 	bic.w	r3, r3, #16
 8005c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ca2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ca4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e3      	bne.n	8005c7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fd fa66 	bl	800318c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f8bf 	bl	8005e5a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cdc:	e09c      	b.n	8005e18 <HAL_UART_IRQHandler+0x518>
 8005cde:	bf00      	nop
 8005ce0:	0800638f 	.word	0x0800638f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 808e 	beq.w	8005e1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8089 	beq.w	8005e1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d2e:	647a      	str	r2, [r7, #68]	; 0x44
 8005d30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e3      	bne.n	8005d0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3314      	adds	r3, #20
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	623b      	str	r3, [r7, #32]
   return(result);
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3314      	adds	r3, #20
 8005d62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d66:	633a      	str	r2, [r7, #48]	; 0x30
 8005d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e3      	bne.n	8005d42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005dac:	61fa      	str	r2, [r7, #28]
 8005dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69b9      	ldr	r1, [r7, #24]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e3      	bne.n	8005d88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f844 	bl	8005e5a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dd2:	e023      	b.n	8005e1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <HAL_UART_IRQHandler+0x4f4>
 8005de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fae2 	bl	80063b6 <UART_Transmit_IT>
    return;
 8005df2:	e014      	b.n	8005e1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <HAL_UART_IRQHandler+0x51e>
 8005e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb21 	bl	8006454 <UART_EndTransmit_IT>
    return;
 8005e12:	e004      	b.n	8005e1e <HAL_UART_IRQHandler+0x51e>
    return;
 8005e14:	bf00      	nop
 8005e16:	e002      	b.n	8005e1e <HAL_UART_IRQHandler+0x51e>
      return;
 8005e18:	bf00      	nop
 8005e1a:	e000      	b.n	8005e1e <HAL_UART_IRQHandler+0x51e>
      return;
 8005e1c:	bf00      	nop
  }
}
 8005e1e:	37e8      	adds	r7, #232	; 0xe8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b09c      	sub	sp, #112	; 0x70
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d172      	bne.n	8005f72 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8e:	2200      	movs	r2, #0
 8005e90:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005eb4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	667b      	str	r3, [r7, #100]	; 0x64
 8005ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ee6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e5      	bne.n	8005ec6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3314      	adds	r3, #20
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f10:	663b      	str	r3, [r7, #96]	; 0x60
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3314      	adds	r3, #20
 8005f18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d119      	bne.n	8005f72 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f023 0310 	bic.w	r3, r3, #16
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f5e:	61fa      	str	r2, [r7, #28]
 8005f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	69b9      	ldr	r1, [r7, #24]
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	2200      	movs	r2, #0
 8005f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d106      	bne.n	8005f8e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f84:	4619      	mov	r1, r3
 8005f86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f88:	f7ff ff67 	bl	8005e5a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f8c:	e002      	b.n	8005f94 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005f8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f90:	f7fc fe80 	bl	8002c94 <HAL_UART_RxCpltCallback>
}
 8005f94:	bf00      	nop
 8005f96:	3770      	adds	r7, #112	; 0x70
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d108      	bne.n	8005fca <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7ff ff49 	bl	8005e5a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fc8:	e002      	b.n	8005fd0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff ff33 	bl	8005e36 <HAL_UART_RxHalfCpltCallback>
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	bf14      	ite	ne
 8005ff8:	2301      	movne	r3, #1
 8005ffa:	2300      	moveq	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b21      	cmp	r3, #33	; 0x21
 800600a:	d108      	bne.n	800601e <UART_DMAError+0x46>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006018:	68b8      	ldr	r0, [r7, #8]
 800601a:	f000 f92f 	bl	800627c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	bf14      	ite	ne
 800602c:	2301      	movne	r3, #1
 800602e:	2300      	moveq	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b22      	cmp	r3, #34	; 0x22
 800603e:	d108      	bne.n	8006052 <UART_DMAError+0x7a>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800604c:	68b8      	ldr	r0, [r7, #8]
 800604e:	f000 f93c 	bl	80062ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006056:	f043 0210 	orr.w	r2, r3, #16
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605e:	68b8      	ldr	r0, [r7, #8]
 8006060:	f7ff fef2 	bl	8005e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b090      	sub	sp, #64	; 0x40
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607c:	e050      	b.n	8006120 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d04c      	beq.n	8006120 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <UART_WaitOnFlagUntilTimeout+0x30>
 800608c:	f7fc fe90 	bl	8002db0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006098:	429a      	cmp	r2, r3
 800609a:	d241      	bcs.n	8006120 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060bc:	637a      	str	r2, [r7, #52]	; 0x34
 80060be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e5      	bne.n	800609c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3314      	adds	r3, #20
 80060d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	613b      	str	r3, [r7, #16]
   return(result);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3314      	adds	r3, #20
 80060ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f0:	623a      	str	r2, [r7, #32]
 80060f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	69f9      	ldr	r1, [r7, #28]
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e5      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e00f      	b.n	8006140 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	4013      	ands	r3, r2
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	429a      	cmp	r2, r3
 800613c:	d09f      	beq.n	800607e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3740      	adds	r7, #64	; 0x40
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b098      	sub	sp, #96	; 0x60
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2222      	movs	r2, #34	; 0x22
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	4a3e      	ldr	r2, [pc, #248]	; (8006270 <UART_Start_Receive_DMA+0x128>)
 8006176:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	4a3d      	ldr	r2, [pc, #244]	; (8006274 <UART_Start_Receive_DMA+0x12c>)
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	4a3c      	ldr	r2, [pc, #240]	; (8006278 <UART_Start_Receive_DMA+0x130>)
 8006186:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	2200      	movs	r2, #0
 800618e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	f7fc ff90 	bl	80030cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80061ac:	2300      	movs	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d019      	beq.n	80061fe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80061ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80061f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e5      	bne.n	80061ca <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3314      	adds	r3, #20
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	657b      	str	r3, [r7, #84]	; 0x54
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800621e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e5      	bne.n	80061fe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	617b      	str	r3, [r7, #20]
   return(result);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006248:	653b      	str	r3, [r7, #80]	; 0x50
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006252:	627a      	str	r2, [r7, #36]	; 0x24
 8006254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6a39      	ldr	r1, [r7, #32]
 8006258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e5      	bne.n	8006232 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3760      	adds	r7, #96	; 0x60
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	08005e71 	.word	0x08005e71
 8006274:	08005f9d 	.word	0x08005f9d
 8006278:	08005fd9 	.word	0x08005fd9

0800627c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b089      	sub	sp, #36	; 0x24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60bb      	str	r3, [r7, #8]
   return(result);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	61ba      	str	r2, [r7, #24]
 80062a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6979      	ldr	r1, [r7, #20]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	613b      	str	r3, [r7, #16]
   return(result);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80062c0:	bf00      	nop
 80062c2:	3724      	adds	r7, #36	; 0x24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b095      	sub	sp, #84	; 0x54
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f2:	643a      	str	r2, [r7, #64]	; 0x40
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3314      	adds	r3, #20
 800630c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	61fb      	str	r3, [r7, #28]
   return(result);
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	64bb      	str	r3, [r7, #72]	; 0x48
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3314      	adds	r3, #20
 8006324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006326:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800632c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e5      	bne.n	8006306 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	2b01      	cmp	r3, #1
 8006340:	d119      	bne.n	8006376 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	330c      	adds	r3, #12
 8006348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	60bb      	str	r3, [r7, #8]
   return(result);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f023 0310 	bic.w	r3, r3, #16
 8006358:	647b      	str	r3, [r7, #68]	; 0x44
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	330c      	adds	r3, #12
 8006360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006362:	61ba      	str	r2, [r7, #24]
 8006364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	613b      	str	r3, [r7, #16]
   return(result);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e5      	bne.n	8006342 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006384:	bf00      	nop
 8006386:	3754      	adds	r7, #84	; 0x54
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr

0800638e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff fd4d 	bl	8005e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b21      	cmp	r3, #33	; 0x21
 80063c8:	d13e      	bne.n	8006448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d2:	d114      	bne.n	80063fe <UART_Transmit_IT+0x48>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d110      	bne.n	80063fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	1c9a      	adds	r2, r3, #2
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	621a      	str	r2, [r3, #32]
 80063fc:	e008      	b.n	8006410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6211      	str	r1, [r2, #32]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4619      	mov	r1, r3
 800641e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10f      	bne.n	8006444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	e000      	b.n	800644a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006448:	2302      	movs	r3, #2
  }
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fcd5 	bl	8005e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08c      	sub	sp, #48	; 0x30
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b22      	cmp	r3, #34	; 0x22
 8006496:	f040 80ae 	bne.w	80065f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a2:	d117      	bne.n	80064d4 <UART_Receive_IT+0x50>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d113      	bne.n	80064d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	1c9a      	adds	r2, r3, #2
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	629a      	str	r2, [r3, #40]	; 0x28
 80064d2:	e026      	b.n	8006522 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e6:	d007      	beq.n	80064f8 <UART_Receive_IT+0x74>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <UART_Receive_IT+0x82>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e008      	b.n	8006518 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006512:	b2da      	uxtb	r2, r3
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	4619      	mov	r1, r3
 8006530:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006532:	2b00      	cmp	r3, #0
 8006534:	d15d      	bne.n	80065f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0220 	bic.w	r2, r2, #32
 8006544:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006554:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	2b01      	cmp	r3, #1
 800657a:	d135      	bne.n	80065e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	330c      	adds	r3, #12
 8006588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	613b      	str	r3, [r7, #16]
   return(result);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f023 0310 	bic.w	r3, r3, #16
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	623a      	str	r2, [r7, #32]
 80065a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	69f9      	ldr	r1, [r7, #28]
 80065a8:	6a3a      	ldr	r2, [r7, #32]
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e5      	bne.n	8006582 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d10a      	bne.n	80065da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fc3a 	bl	8005e5a <HAL_UARTEx_RxEventCallback>
 80065e6:	e002      	b.n	80065ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fc fb53 	bl	8002c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e002      	b.n	80065f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	e000      	b.n	80065f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065f6:	2302      	movs	r3, #2
  }
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3730      	adds	r7, #48	; 0x30
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800663a:	f023 030c 	bic.w	r3, r3, #12
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	430b      	orrs	r3, r1
 8006646:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a2c      	ldr	r2, [pc, #176]	; (8006714 <UART_SetConfig+0x114>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d103      	bne.n	8006670 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006668:	f7fd fec8 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	e002      	b.n	8006676 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fd feb0 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8006674:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009a      	lsls	r2, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	4a22      	ldr	r2, [pc, #136]	; (8006718 <UART_SetConfig+0x118>)
 800668e:	fba2 2303 	umull	r2, r3, r2, r3
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	0119      	lsls	r1, r3, #4
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009a      	lsls	r2, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <UART_SetConfig+0x118>)
 80066ae:	fba3 0302 	umull	r0, r3, r3, r2
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	2064      	movs	r0, #100	; 0x64
 80066b6:	fb00 f303 	mul.w	r3, r0, r3
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	3332      	adds	r3, #50	; 0x32
 80066c0:	4a15      	ldr	r2, [pc, #84]	; (8006718 <UART_SetConfig+0x118>)
 80066c2:	fba2 2303 	umull	r2, r3, r2, r3
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066cc:	4419      	add	r1, r3
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009a      	lsls	r2, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <UART_SetConfig+0x118>)
 80066e6:	fba3 0302 	umull	r0, r3, r3, r2
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	2064      	movs	r0, #100	; 0x64
 80066ee:	fb00 f303 	mul.w	r3, r0, r3
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	3332      	adds	r3, #50	; 0x32
 80066f8:	4a07      	ldr	r2, [pc, #28]	; (8006718 <UART_SetConfig+0x118>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	f003 020f 	and.w	r2, r3, #15
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	440a      	add	r2, r1
 800670a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800670c:	bf00      	nop
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40013800 	.word	0x40013800
 8006718:	51eb851f 	.word	0x51eb851f

0800671c <__cvt>:
 800671c:	2b00      	cmp	r3, #0
 800671e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006722:	461f      	mov	r7, r3
 8006724:	bfbb      	ittet	lt
 8006726:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800672a:	461f      	movlt	r7, r3
 800672c:	2300      	movge	r3, #0
 800672e:	232d      	movlt	r3, #45	; 0x2d
 8006730:	b088      	sub	sp, #32
 8006732:	4614      	mov	r4, r2
 8006734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006736:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006738:	7013      	strb	r3, [r2, #0]
 800673a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800673c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006740:	f023 0820 	bic.w	r8, r3, #32
 8006744:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006748:	d005      	beq.n	8006756 <__cvt+0x3a>
 800674a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800674e:	d100      	bne.n	8006752 <__cvt+0x36>
 8006750:	3501      	adds	r5, #1
 8006752:	2302      	movs	r3, #2
 8006754:	e000      	b.n	8006758 <__cvt+0x3c>
 8006756:	2303      	movs	r3, #3
 8006758:	aa07      	add	r2, sp, #28
 800675a:	9204      	str	r2, [sp, #16]
 800675c:	aa06      	add	r2, sp, #24
 800675e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006762:	e9cd 3500 	strd	r3, r5, [sp]
 8006766:	4622      	mov	r2, r4
 8006768:	463b      	mov	r3, r7
 800676a:	f001 f8a5 	bl	80078b8 <_dtoa_r>
 800676e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006772:	4606      	mov	r6, r0
 8006774:	d102      	bne.n	800677c <__cvt+0x60>
 8006776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006778:	07db      	lsls	r3, r3, #31
 800677a:	d522      	bpl.n	80067c2 <__cvt+0xa6>
 800677c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006780:	eb06 0905 	add.w	r9, r6, r5
 8006784:	d110      	bne.n	80067a8 <__cvt+0x8c>
 8006786:	7833      	ldrb	r3, [r6, #0]
 8006788:	2b30      	cmp	r3, #48	; 0x30
 800678a:	d10a      	bne.n	80067a2 <__cvt+0x86>
 800678c:	2200      	movs	r2, #0
 800678e:	2300      	movs	r3, #0
 8006790:	4620      	mov	r0, r4
 8006792:	4639      	mov	r1, r7
 8006794:	f7fa f974 	bl	8000a80 <__aeabi_dcmpeq>
 8006798:	b918      	cbnz	r0, 80067a2 <__cvt+0x86>
 800679a:	f1c5 0501 	rsb	r5, r5, #1
 800679e:	f8ca 5000 	str.w	r5, [sl]
 80067a2:	f8da 3000 	ldr.w	r3, [sl]
 80067a6:	4499      	add	r9, r3
 80067a8:	2200      	movs	r2, #0
 80067aa:	2300      	movs	r3, #0
 80067ac:	4620      	mov	r0, r4
 80067ae:	4639      	mov	r1, r7
 80067b0:	f7fa f966 	bl	8000a80 <__aeabi_dcmpeq>
 80067b4:	b108      	cbz	r0, 80067ba <__cvt+0x9e>
 80067b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80067ba:	2230      	movs	r2, #48	; 0x30
 80067bc:	9b07      	ldr	r3, [sp, #28]
 80067be:	454b      	cmp	r3, r9
 80067c0:	d307      	bcc.n	80067d2 <__cvt+0xb6>
 80067c2:	4630      	mov	r0, r6
 80067c4:	9b07      	ldr	r3, [sp, #28]
 80067c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067c8:	1b9b      	subs	r3, r3, r6
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	b008      	add	sp, #32
 80067ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	9107      	str	r1, [sp, #28]
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	e7f0      	b.n	80067bc <__cvt+0xa0>

080067da <__exponent>:
 80067da:	4603      	mov	r3, r0
 80067dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067de:	2900      	cmp	r1, #0
 80067e0:	f803 2b02 	strb.w	r2, [r3], #2
 80067e4:	bfb6      	itet	lt
 80067e6:	222d      	movlt	r2, #45	; 0x2d
 80067e8:	222b      	movge	r2, #43	; 0x2b
 80067ea:	4249      	neglt	r1, r1
 80067ec:	2909      	cmp	r1, #9
 80067ee:	7042      	strb	r2, [r0, #1]
 80067f0:	dd2a      	ble.n	8006848 <__exponent+0x6e>
 80067f2:	f10d 0207 	add.w	r2, sp, #7
 80067f6:	4617      	mov	r7, r2
 80067f8:	260a      	movs	r6, #10
 80067fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80067fe:	4694      	mov	ip, r2
 8006800:	fb06 1415 	mls	r4, r6, r5, r1
 8006804:	3430      	adds	r4, #48	; 0x30
 8006806:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800680a:	460c      	mov	r4, r1
 800680c:	2c63      	cmp	r4, #99	; 0x63
 800680e:	4629      	mov	r1, r5
 8006810:	f102 32ff 	add.w	r2, r2, #4294967295
 8006814:	dcf1      	bgt.n	80067fa <__exponent+0x20>
 8006816:	3130      	adds	r1, #48	; 0x30
 8006818:	f1ac 0402 	sub.w	r4, ip, #2
 800681c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006820:	4622      	mov	r2, r4
 8006822:	1c41      	adds	r1, r0, #1
 8006824:	42ba      	cmp	r2, r7
 8006826:	d30a      	bcc.n	800683e <__exponent+0x64>
 8006828:	f10d 0209 	add.w	r2, sp, #9
 800682c:	eba2 020c 	sub.w	r2, r2, ip
 8006830:	42bc      	cmp	r4, r7
 8006832:	bf88      	it	hi
 8006834:	2200      	movhi	r2, #0
 8006836:	4413      	add	r3, r2
 8006838:	1a18      	subs	r0, r3, r0
 800683a:	b003      	add	sp, #12
 800683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800683e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006842:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006846:	e7ed      	b.n	8006824 <__exponent+0x4a>
 8006848:	2330      	movs	r3, #48	; 0x30
 800684a:	3130      	adds	r1, #48	; 0x30
 800684c:	7083      	strb	r3, [r0, #2]
 800684e:	70c1      	strb	r1, [r0, #3]
 8006850:	1d03      	adds	r3, r0, #4
 8006852:	e7f1      	b.n	8006838 <__exponent+0x5e>

08006854 <_printf_float>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	b091      	sub	sp, #68	; 0x44
 800685a:	460c      	mov	r4, r1
 800685c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006860:	4616      	mov	r6, r2
 8006862:	461f      	mov	r7, r3
 8006864:	4605      	mov	r5, r0
 8006866:	f000 ff13 	bl	8007690 <_localeconv_r>
 800686a:	6803      	ldr	r3, [r0, #0]
 800686c:	4618      	mov	r0, r3
 800686e:	9309      	str	r3, [sp, #36]	; 0x24
 8006870:	f7f9 fcda 	bl	8000228 <strlen>
 8006874:	2300      	movs	r3, #0
 8006876:	930e      	str	r3, [sp, #56]	; 0x38
 8006878:	f8d8 3000 	ldr.w	r3, [r8]
 800687c:	900a      	str	r0, [sp, #40]	; 0x28
 800687e:	3307      	adds	r3, #7
 8006880:	f023 0307 	bic.w	r3, r3, #7
 8006884:	f103 0208 	add.w	r2, r3, #8
 8006888:	f894 9018 	ldrb.w	r9, [r4, #24]
 800688c:	f8d4 b000 	ldr.w	fp, [r4]
 8006890:	f8c8 2000 	str.w	r2, [r8]
 8006894:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006898:	4652      	mov	r2, sl
 800689a:	4643      	mov	r3, r8
 800689c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068a0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80068a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295
 80068aa:	4650      	mov	r0, sl
 80068ac:	4b9c      	ldr	r3, [pc, #624]	; (8006b20 <_printf_float+0x2cc>)
 80068ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068b0:	f7fa f918 	bl	8000ae4 <__aeabi_dcmpun>
 80068b4:	bb70      	cbnz	r0, 8006914 <_printf_float+0xc0>
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	4650      	mov	r0, sl
 80068bc:	4b98      	ldr	r3, [pc, #608]	; (8006b20 <_printf_float+0x2cc>)
 80068be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068c0:	f7fa f8f2 	bl	8000aa8 <__aeabi_dcmple>
 80068c4:	bb30      	cbnz	r0, 8006914 <_printf_float+0xc0>
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	4650      	mov	r0, sl
 80068cc:	4641      	mov	r1, r8
 80068ce:	f7fa f8e1 	bl	8000a94 <__aeabi_dcmplt>
 80068d2:	b110      	cbz	r0, 80068da <_printf_float+0x86>
 80068d4:	232d      	movs	r3, #45	; 0x2d
 80068d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068da:	4a92      	ldr	r2, [pc, #584]	; (8006b24 <_printf_float+0x2d0>)
 80068dc:	4b92      	ldr	r3, [pc, #584]	; (8006b28 <_printf_float+0x2d4>)
 80068de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80068e2:	bf94      	ite	ls
 80068e4:	4690      	movls	r8, r2
 80068e6:	4698      	movhi	r8, r3
 80068e8:	2303      	movs	r3, #3
 80068ea:	f04f 0a00 	mov.w	sl, #0
 80068ee:	6123      	str	r3, [r4, #16]
 80068f0:	f02b 0304 	bic.w	r3, fp, #4
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	4633      	mov	r3, r6
 80068f8:	4621      	mov	r1, r4
 80068fa:	4628      	mov	r0, r5
 80068fc:	9700      	str	r7, [sp, #0]
 80068fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8006900:	f000 f9d6 	bl	8006cb0 <_printf_common>
 8006904:	3001      	adds	r0, #1
 8006906:	f040 8090 	bne.w	8006a2a <_printf_float+0x1d6>
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	b011      	add	sp, #68	; 0x44
 8006910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	4652      	mov	r2, sl
 8006916:	4643      	mov	r3, r8
 8006918:	4650      	mov	r0, sl
 800691a:	4641      	mov	r1, r8
 800691c:	f7fa f8e2 	bl	8000ae4 <__aeabi_dcmpun>
 8006920:	b148      	cbz	r0, 8006936 <_printf_float+0xe2>
 8006922:	f1b8 0f00 	cmp.w	r8, #0
 8006926:	bfb8      	it	lt
 8006928:	232d      	movlt	r3, #45	; 0x2d
 800692a:	4a80      	ldr	r2, [pc, #512]	; (8006b2c <_printf_float+0x2d8>)
 800692c:	bfb8      	it	lt
 800692e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006932:	4b7f      	ldr	r3, [pc, #508]	; (8006b30 <_printf_float+0x2dc>)
 8006934:	e7d3      	b.n	80068de <_printf_float+0x8a>
 8006936:	6863      	ldr	r3, [r4, #4]
 8006938:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	d142      	bne.n	80069c6 <_printf_float+0x172>
 8006940:	2306      	movs	r3, #6
 8006942:	6063      	str	r3, [r4, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	9206      	str	r2, [sp, #24]
 8006948:	aa0e      	add	r2, sp, #56	; 0x38
 800694a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800694e:	aa0d      	add	r2, sp, #52	; 0x34
 8006950:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006954:	9203      	str	r2, [sp, #12]
 8006956:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800695a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	4652      	mov	r2, sl
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4628      	mov	r0, r5
 8006968:	4643      	mov	r3, r8
 800696a:	910b      	str	r1, [sp, #44]	; 0x2c
 800696c:	f7ff fed6 	bl	800671c <__cvt>
 8006970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006972:	4680      	mov	r8, r0
 8006974:	2947      	cmp	r1, #71	; 0x47
 8006976:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006978:	d108      	bne.n	800698c <_printf_float+0x138>
 800697a:	1cc8      	adds	r0, r1, #3
 800697c:	db02      	blt.n	8006984 <_printf_float+0x130>
 800697e:	6863      	ldr	r3, [r4, #4]
 8006980:	4299      	cmp	r1, r3
 8006982:	dd40      	ble.n	8006a06 <_printf_float+0x1b2>
 8006984:	f1a9 0902 	sub.w	r9, r9, #2
 8006988:	fa5f f989 	uxtb.w	r9, r9
 800698c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006990:	d81f      	bhi.n	80069d2 <_printf_float+0x17e>
 8006992:	464a      	mov	r2, r9
 8006994:	3901      	subs	r1, #1
 8006996:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800699a:	910d      	str	r1, [sp, #52]	; 0x34
 800699c:	f7ff ff1d 	bl	80067da <__exponent>
 80069a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069a2:	4682      	mov	sl, r0
 80069a4:	1813      	adds	r3, r2, r0
 80069a6:	2a01      	cmp	r2, #1
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	dc02      	bgt.n	80069b2 <_printf_float+0x15e>
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	07d2      	lsls	r2, r2, #31
 80069b0:	d501      	bpl.n	80069b6 <_printf_float+0x162>
 80069b2:	3301      	adds	r3, #1
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d09b      	beq.n	80068f6 <_printf_float+0xa2>
 80069be:	232d      	movs	r3, #45	; 0x2d
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c4:	e797      	b.n	80068f6 <_printf_float+0xa2>
 80069c6:	2947      	cmp	r1, #71	; 0x47
 80069c8:	d1bc      	bne.n	8006944 <_printf_float+0xf0>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1ba      	bne.n	8006944 <_printf_float+0xf0>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e7b7      	b.n	8006942 <_printf_float+0xee>
 80069d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80069d6:	d118      	bne.n	8006a0a <_printf_float+0x1b6>
 80069d8:	2900      	cmp	r1, #0
 80069da:	6863      	ldr	r3, [r4, #4]
 80069dc:	dd0b      	ble.n	80069f6 <_printf_float+0x1a2>
 80069de:	6121      	str	r1, [r4, #16]
 80069e0:	b913      	cbnz	r3, 80069e8 <_printf_float+0x194>
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	07d0      	lsls	r0, r2, #31
 80069e6:	d502      	bpl.n	80069ee <_printf_float+0x19a>
 80069e8:	3301      	adds	r3, #1
 80069ea:	440b      	add	r3, r1
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	f04f 0a00 	mov.w	sl, #0
 80069f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80069f4:	e7df      	b.n	80069b6 <_printf_float+0x162>
 80069f6:	b913      	cbnz	r3, 80069fe <_printf_float+0x1aa>
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	07d2      	lsls	r2, r2, #31
 80069fc:	d501      	bpl.n	8006a02 <_printf_float+0x1ae>
 80069fe:	3302      	adds	r3, #2
 8006a00:	e7f4      	b.n	80069ec <_printf_float+0x198>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7f2      	b.n	80069ec <_printf_float+0x198>
 8006a06:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a0c:	4299      	cmp	r1, r3
 8006a0e:	db05      	blt.n	8006a1c <_printf_float+0x1c8>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	6121      	str	r1, [r4, #16]
 8006a14:	07d8      	lsls	r0, r3, #31
 8006a16:	d5ea      	bpl.n	80069ee <_printf_float+0x19a>
 8006a18:	1c4b      	adds	r3, r1, #1
 8006a1a:	e7e7      	b.n	80069ec <_printf_float+0x198>
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	bfcc      	ite	gt
 8006a20:	2201      	movgt	r2, #1
 8006a22:	f1c1 0202 	rsble	r2, r1, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	e7e0      	b.n	80069ec <_printf_float+0x198>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	055a      	lsls	r2, r3, #21
 8006a2e:	d407      	bmi.n	8006a40 <_printf_float+0x1ec>
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	4642      	mov	r2, r8
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d12b      	bne.n	8006a96 <_printf_float+0x242>
 8006a3e:	e764      	b.n	800690a <_printf_float+0xb6>
 8006a40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a44:	f240 80dd 	bls.w	8006c02 <_printf_float+0x3ae>
 8006a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f7fa f816 	bl	8000a80 <__aeabi_dcmpeq>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d033      	beq.n	8006ac0 <_printf_float+0x26c>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	4a35      	ldr	r2, [pc, #212]	; (8006b34 <_printf_float+0x2e0>)
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	f43f af51 	beq.w	800690a <_printf_float+0xb6>
 8006a68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	db02      	blt.n	8006a76 <_printf_float+0x222>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	07d8      	lsls	r0, r3, #31
 8006a74:	d50f      	bpl.n	8006a96 <_printf_float+0x242>
 8006a76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b8      	blx	r7
 8006a80:	3001      	adds	r0, #1
 8006a82:	f43f af42 	beq.w	800690a <_printf_float+0xb6>
 8006a86:	f04f 0800 	mov.w	r8, #0
 8006a8a:	f104 091a 	add.w	r9, r4, #26
 8006a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a90:	3b01      	subs	r3, #1
 8006a92:	4543      	cmp	r3, r8
 8006a94:	dc09      	bgt.n	8006aaa <_printf_float+0x256>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	079b      	lsls	r3, r3, #30
 8006a9a:	f100 8104 	bmi.w	8006ca6 <_printf_float+0x452>
 8006a9e:	68e0      	ldr	r0, [r4, #12]
 8006aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006aa2:	4298      	cmp	r0, r3
 8006aa4:	bfb8      	it	lt
 8006aa6:	4618      	movlt	r0, r3
 8006aa8:	e731      	b.n	800690e <_printf_float+0xba>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	464a      	mov	r2, r9
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f af28 	beq.w	800690a <_printf_float+0xb6>
 8006aba:	f108 0801 	add.w	r8, r8, #1
 8006abe:	e7e6      	b.n	8006a8e <_printf_float+0x23a>
 8006ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	dc38      	bgt.n	8006b38 <_printf_float+0x2e4>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	4a19      	ldr	r2, [pc, #100]	; (8006b34 <_printf_float+0x2e0>)
 8006ace:	47b8      	blx	r7
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	f43f af1a 	beq.w	800690a <_printf_float+0xb6>
 8006ad6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006ada:	4313      	orrs	r3, r2
 8006adc:	d102      	bne.n	8006ae4 <_printf_float+0x290>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	07d9      	lsls	r1, r3, #31
 8006ae2:	d5d8      	bpl.n	8006a96 <_printf_float+0x242>
 8006ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f af0b 	beq.w	800690a <_printf_float+0xb6>
 8006af4:	f04f 0900 	mov.w	r9, #0
 8006af8:	f104 0a1a 	add.w	sl, r4, #26
 8006afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006afe:	425b      	negs	r3, r3
 8006b00:	454b      	cmp	r3, r9
 8006b02:	dc01      	bgt.n	8006b08 <_printf_float+0x2b4>
 8006b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b06:	e794      	b.n	8006a32 <_printf_float+0x1de>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4652      	mov	r2, sl
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	f43f aef9 	beq.w	800690a <_printf_float+0xb6>
 8006b18:	f109 0901 	add.w	r9, r9, #1
 8006b1c:	e7ee      	b.n	8006afc <_printf_float+0x2a8>
 8006b1e:	bf00      	nop
 8006b20:	7fefffff 	.word	0x7fefffff
 8006b24:	0800af2e 	.word	0x0800af2e
 8006b28:	0800af32 	.word	0x0800af32
 8006b2c:	0800af36 	.word	0x0800af36
 8006b30:	0800af3a 	.word	0x0800af3a
 8006b34:	0800af3e 	.word	0x0800af3e
 8006b38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	bfa8      	it	ge
 8006b40:	461a      	movge	r2, r3
 8006b42:	2a00      	cmp	r2, #0
 8006b44:	4691      	mov	r9, r2
 8006b46:	dc37      	bgt.n	8006bb8 <_printf_float+0x364>
 8006b48:	f04f 0b00 	mov.w	fp, #0
 8006b4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b50:	f104 021a 	add.w	r2, r4, #26
 8006b54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006b58:	ebaa 0309 	sub.w	r3, sl, r9
 8006b5c:	455b      	cmp	r3, fp
 8006b5e:	dc33      	bgt.n	8006bc8 <_printf_float+0x374>
 8006b60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b64:	429a      	cmp	r2, r3
 8006b66:	db3b      	blt.n	8006be0 <_printf_float+0x38c>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	07da      	lsls	r2, r3, #31
 8006b6c:	d438      	bmi.n	8006be0 <_printf_float+0x38c>
 8006b6e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006b72:	eba2 0903 	sub.w	r9, r2, r3
 8006b76:	eba2 020a 	sub.w	r2, r2, sl
 8006b7a:	4591      	cmp	r9, r2
 8006b7c:	bfa8      	it	ge
 8006b7e:	4691      	movge	r9, r2
 8006b80:	f1b9 0f00 	cmp.w	r9, #0
 8006b84:	dc34      	bgt.n	8006bf0 <_printf_float+0x39c>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b8e:	f104 0a1a 	add.w	sl, r4, #26
 8006b92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	eba3 0309 	sub.w	r3, r3, r9
 8006b9c:	4543      	cmp	r3, r8
 8006b9e:	f77f af7a 	ble.w	8006a96 <_printf_float+0x242>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4652      	mov	r2, sl
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	f43f aeac 	beq.w	800690a <_printf_float+0xb6>
 8006bb2:	f108 0801 	add.w	r8, r8, #1
 8006bb6:	e7ec      	b.n	8006b92 <_printf_float+0x33e>
 8006bb8:	4613      	mov	r3, r2
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	47b8      	blx	r7
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d1c0      	bne.n	8006b48 <_printf_float+0x2f4>
 8006bc6:	e6a0      	b.n	800690a <_printf_float+0xb6>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4628      	mov	r0, r5
 8006bce:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	f43f ae99 	beq.w	800690a <_printf_float+0xb6>
 8006bd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bda:	f10b 0b01 	add.w	fp, fp, #1
 8006bde:	e7b9      	b.n	8006b54 <_printf_float+0x300>
 8006be0:	4631      	mov	r1, r6
 8006be2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b8      	blx	r7
 8006bea:	3001      	adds	r0, #1
 8006bec:	d1bf      	bne.n	8006b6e <_printf_float+0x31a>
 8006bee:	e68c      	b.n	800690a <_printf_float+0xb6>
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	eb08 020a 	add.w	r2, r8, sl
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d1c2      	bne.n	8006b86 <_printf_float+0x332>
 8006c00:	e683      	b.n	800690a <_printf_float+0xb6>
 8006c02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c04:	2a01      	cmp	r2, #1
 8006c06:	dc01      	bgt.n	8006c0c <_printf_float+0x3b8>
 8006c08:	07db      	lsls	r3, r3, #31
 8006c0a:	d539      	bpl.n	8006c80 <_printf_float+0x42c>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	4642      	mov	r2, r8
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f ae77 	beq.w	800690a <_printf_float+0xb6>
 8006c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c20:	4631      	mov	r1, r6
 8006c22:	4628      	mov	r0, r5
 8006c24:	47b8      	blx	r7
 8006c26:	3001      	adds	r0, #1
 8006c28:	f43f ae6f 	beq.w	800690a <_printf_float+0xb6>
 8006c2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c30:	2200      	movs	r2, #0
 8006c32:	2300      	movs	r3, #0
 8006c34:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006c38:	f7f9 ff22 	bl	8000a80 <__aeabi_dcmpeq>
 8006c3c:	b9d8      	cbnz	r0, 8006c76 <_printf_float+0x422>
 8006c3e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006c42:	f108 0201 	add.w	r2, r8, #1
 8006c46:	4631      	mov	r1, r6
 8006c48:	4628      	mov	r0, r5
 8006c4a:	47b8      	blx	r7
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d10e      	bne.n	8006c6e <_printf_float+0x41a>
 8006c50:	e65b      	b.n	800690a <_printf_float+0xb6>
 8006c52:	2301      	movs	r3, #1
 8006c54:	464a      	mov	r2, r9
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f43f ae54 	beq.w	800690a <_printf_float+0xb6>
 8006c62:	f108 0801 	add.w	r8, r8, #1
 8006c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	4543      	cmp	r3, r8
 8006c6c:	dcf1      	bgt.n	8006c52 <_printf_float+0x3fe>
 8006c6e:	4653      	mov	r3, sl
 8006c70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c74:	e6de      	b.n	8006a34 <_printf_float+0x1e0>
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	f104 091a 	add.w	r9, r4, #26
 8006c7e:	e7f2      	b.n	8006c66 <_printf_float+0x412>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4642      	mov	r2, r8
 8006c84:	e7df      	b.n	8006c46 <_printf_float+0x3f2>
 8006c86:	2301      	movs	r3, #1
 8006c88:	464a      	mov	r2, r9
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	47b8      	blx	r7
 8006c90:	3001      	adds	r0, #1
 8006c92:	f43f ae3a 	beq.w	800690a <_printf_float+0xb6>
 8006c96:	f108 0801 	add.w	r8, r8, #1
 8006c9a:	68e3      	ldr	r3, [r4, #12]
 8006c9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c9e:	1a5b      	subs	r3, r3, r1
 8006ca0:	4543      	cmp	r3, r8
 8006ca2:	dcf0      	bgt.n	8006c86 <_printf_float+0x432>
 8006ca4:	e6fb      	b.n	8006a9e <_printf_float+0x24a>
 8006ca6:	f04f 0800 	mov.w	r8, #0
 8006caa:	f104 0919 	add.w	r9, r4, #25
 8006cae:	e7f4      	b.n	8006c9a <_printf_float+0x446>

08006cb0 <_printf_common>:
 8006cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	4699      	mov	r9, r3
 8006cb8:	688a      	ldr	r2, [r1, #8]
 8006cba:	690b      	ldr	r3, [r1, #16]
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	bfb8      	it	lt
 8006cc2:	4613      	movlt	r3, r2
 8006cc4:	6033      	str	r3, [r6, #0]
 8006cc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cca:	460c      	mov	r4, r1
 8006ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cd0:	b10a      	cbz	r2, 8006cd6 <_printf_common+0x26>
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	6033      	str	r3, [r6, #0]
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	0699      	lsls	r1, r3, #26
 8006cda:	bf42      	ittt	mi
 8006cdc:	6833      	ldrmi	r3, [r6, #0]
 8006cde:	3302      	addmi	r3, #2
 8006ce0:	6033      	strmi	r3, [r6, #0]
 8006ce2:	6825      	ldr	r5, [r4, #0]
 8006ce4:	f015 0506 	ands.w	r5, r5, #6
 8006ce8:	d106      	bne.n	8006cf8 <_printf_common+0x48>
 8006cea:	f104 0a19 	add.w	sl, r4, #25
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	6832      	ldr	r2, [r6, #0]
 8006cf2:	1a9b      	subs	r3, r3, r2
 8006cf4:	42ab      	cmp	r3, r5
 8006cf6:	dc2b      	bgt.n	8006d50 <_printf_common+0xa0>
 8006cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cfc:	1e13      	subs	r3, r2, #0
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	bf18      	it	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	0692      	lsls	r2, r2, #26
 8006d06:	d430      	bmi.n	8006d6a <_printf_common+0xba>
 8006d08:	4649      	mov	r1, r9
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d10:	47c0      	blx	r8
 8006d12:	3001      	adds	r0, #1
 8006d14:	d023      	beq.n	8006d5e <_printf_common+0xae>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	6922      	ldr	r2, [r4, #16]
 8006d1a:	f003 0306 	and.w	r3, r3, #6
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	bf14      	ite	ne
 8006d22:	2500      	movne	r5, #0
 8006d24:	6833      	ldreq	r3, [r6, #0]
 8006d26:	f04f 0600 	mov.w	r6, #0
 8006d2a:	bf08      	it	eq
 8006d2c:	68e5      	ldreq	r5, [r4, #12]
 8006d2e:	f104 041a 	add.w	r4, r4, #26
 8006d32:	bf08      	it	eq
 8006d34:	1aed      	subeq	r5, r5, r3
 8006d36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d3a:	bf08      	it	eq
 8006d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bfc4      	itt	gt
 8006d44:	1a9b      	subgt	r3, r3, r2
 8006d46:	18ed      	addgt	r5, r5, r3
 8006d48:	42b5      	cmp	r5, r6
 8006d4a:	d11a      	bne.n	8006d82 <_printf_common+0xd2>
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	e008      	b.n	8006d62 <_printf_common+0xb2>
 8006d50:	2301      	movs	r3, #1
 8006d52:	4652      	mov	r2, sl
 8006d54:	4649      	mov	r1, r9
 8006d56:	4638      	mov	r0, r7
 8006d58:	47c0      	blx	r8
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d103      	bne.n	8006d66 <_printf_common+0xb6>
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d66:	3501      	adds	r5, #1
 8006d68:	e7c1      	b.n	8006cee <_printf_common+0x3e>
 8006d6a:	2030      	movs	r0, #48	; 0x30
 8006d6c:	18e1      	adds	r1, r4, r3
 8006d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d78:	4422      	add	r2, r4
 8006d7a:	3302      	adds	r3, #2
 8006d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d80:	e7c2      	b.n	8006d08 <_printf_common+0x58>
 8006d82:	2301      	movs	r3, #1
 8006d84:	4622      	mov	r2, r4
 8006d86:	4649      	mov	r1, r9
 8006d88:	4638      	mov	r0, r7
 8006d8a:	47c0      	blx	r8
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d0e6      	beq.n	8006d5e <_printf_common+0xae>
 8006d90:	3601      	adds	r6, #1
 8006d92:	e7d9      	b.n	8006d48 <_printf_common+0x98>

08006d94 <_printf_i>:
 8006d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	7e0f      	ldrb	r7, [r1, #24]
 8006d9a:	4691      	mov	r9, r2
 8006d9c:	2f78      	cmp	r7, #120	; 0x78
 8006d9e:	4680      	mov	r8, r0
 8006da0:	460c      	mov	r4, r1
 8006da2:	469a      	mov	sl, r3
 8006da4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006daa:	d807      	bhi.n	8006dbc <_printf_i+0x28>
 8006dac:	2f62      	cmp	r7, #98	; 0x62
 8006dae:	d80a      	bhi.n	8006dc6 <_printf_i+0x32>
 8006db0:	2f00      	cmp	r7, #0
 8006db2:	f000 80d5 	beq.w	8006f60 <_printf_i+0x1cc>
 8006db6:	2f58      	cmp	r7, #88	; 0x58
 8006db8:	f000 80c1 	beq.w	8006f3e <_printf_i+0x1aa>
 8006dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dc4:	e03a      	b.n	8006e3c <_printf_i+0xa8>
 8006dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dca:	2b15      	cmp	r3, #21
 8006dcc:	d8f6      	bhi.n	8006dbc <_printf_i+0x28>
 8006dce:	a101      	add	r1, pc, #4	; (adr r1, 8006dd4 <_printf_i+0x40>)
 8006dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dd4:	08006e2d 	.word	0x08006e2d
 8006dd8:	08006e41 	.word	0x08006e41
 8006ddc:	08006dbd 	.word	0x08006dbd
 8006de0:	08006dbd 	.word	0x08006dbd
 8006de4:	08006dbd 	.word	0x08006dbd
 8006de8:	08006dbd 	.word	0x08006dbd
 8006dec:	08006e41 	.word	0x08006e41
 8006df0:	08006dbd 	.word	0x08006dbd
 8006df4:	08006dbd 	.word	0x08006dbd
 8006df8:	08006dbd 	.word	0x08006dbd
 8006dfc:	08006dbd 	.word	0x08006dbd
 8006e00:	08006f47 	.word	0x08006f47
 8006e04:	08006e6d 	.word	0x08006e6d
 8006e08:	08006f01 	.word	0x08006f01
 8006e0c:	08006dbd 	.word	0x08006dbd
 8006e10:	08006dbd 	.word	0x08006dbd
 8006e14:	08006f69 	.word	0x08006f69
 8006e18:	08006dbd 	.word	0x08006dbd
 8006e1c:	08006e6d 	.word	0x08006e6d
 8006e20:	08006dbd 	.word	0x08006dbd
 8006e24:	08006dbd 	.word	0x08006dbd
 8006e28:	08006f09 	.word	0x08006f09
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	1d1a      	adds	r2, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	602a      	str	r2, [r5, #0]
 8006e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0a0      	b.n	8006f82 <_printf_i+0x1ee>
 8006e40:	6820      	ldr	r0, [r4, #0]
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	0607      	lsls	r7, r0, #24
 8006e46:	f103 0104 	add.w	r1, r3, #4
 8006e4a:	6029      	str	r1, [r5, #0]
 8006e4c:	d501      	bpl.n	8006e52 <_printf_i+0xbe>
 8006e4e:	681e      	ldr	r6, [r3, #0]
 8006e50:	e003      	b.n	8006e5a <_printf_i+0xc6>
 8006e52:	0646      	lsls	r6, r0, #25
 8006e54:	d5fb      	bpl.n	8006e4e <_printf_i+0xba>
 8006e56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e5a:	2e00      	cmp	r6, #0
 8006e5c:	da03      	bge.n	8006e66 <_printf_i+0xd2>
 8006e5e:	232d      	movs	r3, #45	; 0x2d
 8006e60:	4276      	negs	r6, r6
 8006e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e66:	230a      	movs	r3, #10
 8006e68:	4859      	ldr	r0, [pc, #356]	; (8006fd0 <_printf_i+0x23c>)
 8006e6a:	e012      	b.n	8006e92 <_printf_i+0xfe>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	1d19      	adds	r1, r3, #4
 8006e72:	6029      	str	r1, [r5, #0]
 8006e74:	0605      	lsls	r5, r0, #24
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0xe8>
 8006e78:	681e      	ldr	r6, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0xee>
 8006e7c:	0641      	lsls	r1, r0, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0xe4>
 8006e80:	881e      	ldrh	r6, [r3, #0]
 8006e82:	2f6f      	cmp	r7, #111	; 0x6f
 8006e84:	bf0c      	ite	eq
 8006e86:	2308      	moveq	r3, #8
 8006e88:	230a      	movne	r3, #10
 8006e8a:	4851      	ldr	r0, [pc, #324]	; (8006fd0 <_printf_i+0x23c>)
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e92:	6865      	ldr	r5, [r4, #4]
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	bfa8      	it	ge
 8006e98:	6821      	ldrge	r1, [r4, #0]
 8006e9a:	60a5      	str	r5, [r4, #8]
 8006e9c:	bfa4      	itt	ge
 8006e9e:	f021 0104 	bicge.w	r1, r1, #4
 8006ea2:	6021      	strge	r1, [r4, #0]
 8006ea4:	b90e      	cbnz	r6, 8006eaa <_printf_i+0x116>
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	d04b      	beq.n	8006f42 <_printf_i+0x1ae>
 8006eaa:	4615      	mov	r5, r2
 8006eac:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eb0:	fb03 6711 	mls	r7, r3, r1, r6
 8006eb4:	5dc7      	ldrb	r7, [r0, r7]
 8006eb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eba:	4637      	mov	r7, r6
 8006ebc:	42bb      	cmp	r3, r7
 8006ebe:	460e      	mov	r6, r1
 8006ec0:	d9f4      	bls.n	8006eac <_printf_i+0x118>
 8006ec2:	2b08      	cmp	r3, #8
 8006ec4:	d10b      	bne.n	8006ede <_printf_i+0x14a>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	07de      	lsls	r6, r3, #31
 8006eca:	d508      	bpl.n	8006ede <_printf_i+0x14a>
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	6861      	ldr	r1, [r4, #4]
 8006ed0:	4299      	cmp	r1, r3
 8006ed2:	bfde      	ittt	le
 8006ed4:	2330      	movle	r3, #48	; 0x30
 8006ed6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ede:	1b52      	subs	r2, r2, r5
 8006ee0:	6122      	str	r2, [r4, #16]
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	f8cd a000 	str.w	sl, [sp]
 8006eec:	aa03      	add	r2, sp, #12
 8006eee:	f7ff fedf 	bl	8006cb0 <_printf_common>
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d14a      	bne.n	8006f8c <_printf_i+0x1f8>
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	b004      	add	sp, #16
 8006efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	f043 0320 	orr.w	r3, r3, #32
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	2778      	movs	r7, #120	; 0x78
 8006f0a:	4832      	ldr	r0, [pc, #200]	; (8006fd4 <_printf_i+0x240>)
 8006f0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	6829      	ldr	r1, [r5, #0]
 8006f14:	061f      	lsls	r7, r3, #24
 8006f16:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f1a:	d402      	bmi.n	8006f22 <_printf_i+0x18e>
 8006f1c:	065f      	lsls	r7, r3, #25
 8006f1e:	bf48      	it	mi
 8006f20:	b2b6      	uxthmi	r6, r6
 8006f22:	07df      	lsls	r7, r3, #31
 8006f24:	bf48      	it	mi
 8006f26:	f043 0320 	orrmi.w	r3, r3, #32
 8006f2a:	6029      	str	r1, [r5, #0]
 8006f2c:	bf48      	it	mi
 8006f2e:	6023      	strmi	r3, [r4, #0]
 8006f30:	b91e      	cbnz	r6, 8006f3a <_printf_i+0x1a6>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	f023 0320 	bic.w	r3, r3, #32
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	2310      	movs	r3, #16
 8006f3c:	e7a6      	b.n	8006e8c <_printf_i+0xf8>
 8006f3e:	4824      	ldr	r0, [pc, #144]	; (8006fd0 <_printf_i+0x23c>)
 8006f40:	e7e4      	b.n	8006f0c <_printf_i+0x178>
 8006f42:	4615      	mov	r5, r2
 8006f44:	e7bd      	b.n	8006ec2 <_printf_i+0x12e>
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	6826      	ldr	r6, [r4, #0]
 8006f4a:	1d18      	adds	r0, r3, #4
 8006f4c:	6961      	ldr	r1, [r4, #20]
 8006f4e:	6028      	str	r0, [r5, #0]
 8006f50:	0635      	lsls	r5, r6, #24
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	d501      	bpl.n	8006f5a <_printf_i+0x1c6>
 8006f56:	6019      	str	r1, [r3, #0]
 8006f58:	e002      	b.n	8006f60 <_printf_i+0x1cc>
 8006f5a:	0670      	lsls	r0, r6, #25
 8006f5c:	d5fb      	bpl.n	8006f56 <_printf_i+0x1c2>
 8006f5e:	8019      	strh	r1, [r3, #0]
 8006f60:	2300      	movs	r3, #0
 8006f62:	4615      	mov	r5, r2
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	e7bc      	b.n	8006ee2 <_printf_i+0x14e>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	681d      	ldr	r5, [r3, #0]
 8006f72:	6862      	ldr	r2, [r4, #4]
 8006f74:	4628      	mov	r0, r5
 8006f76:	f000 fc02 	bl	800777e <memchr>
 8006f7a:	b108      	cbz	r0, 8006f80 <_printf_i+0x1ec>
 8006f7c:	1b40      	subs	r0, r0, r5
 8006f7e:	6060      	str	r0, [r4, #4]
 8006f80:	6863      	ldr	r3, [r4, #4]
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	2300      	movs	r3, #0
 8006f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8a:	e7aa      	b.n	8006ee2 <_printf_i+0x14e>
 8006f8c:	462a      	mov	r2, r5
 8006f8e:	4649      	mov	r1, r9
 8006f90:	4640      	mov	r0, r8
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	47d0      	blx	sl
 8006f96:	3001      	adds	r0, #1
 8006f98:	d0ad      	beq.n	8006ef6 <_printf_i+0x162>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	079b      	lsls	r3, r3, #30
 8006f9e:	d413      	bmi.n	8006fc8 <_printf_i+0x234>
 8006fa0:	68e0      	ldr	r0, [r4, #12]
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	4298      	cmp	r0, r3
 8006fa6:	bfb8      	it	lt
 8006fa8:	4618      	movlt	r0, r3
 8006faa:	e7a6      	b.n	8006efa <_printf_i+0x166>
 8006fac:	2301      	movs	r3, #1
 8006fae:	4632      	mov	r2, r6
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	47d0      	blx	sl
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d09d      	beq.n	8006ef6 <_printf_i+0x162>
 8006fba:	3501      	adds	r5, #1
 8006fbc:	68e3      	ldr	r3, [r4, #12]
 8006fbe:	9903      	ldr	r1, [sp, #12]
 8006fc0:	1a5b      	subs	r3, r3, r1
 8006fc2:	42ab      	cmp	r3, r5
 8006fc4:	dcf2      	bgt.n	8006fac <_printf_i+0x218>
 8006fc6:	e7eb      	b.n	8006fa0 <_printf_i+0x20c>
 8006fc8:	2500      	movs	r5, #0
 8006fca:	f104 0619 	add.w	r6, r4, #25
 8006fce:	e7f5      	b.n	8006fbc <_printf_i+0x228>
 8006fd0:	0800af40 	.word	0x0800af40
 8006fd4:	0800af51 	.word	0x0800af51

08006fd8 <_scanf_float>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	688b      	ldr	r3, [r1, #8]
 8006fe2:	4617      	mov	r7, r2
 8006fe4:	1e5a      	subs	r2, r3, #1
 8006fe6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006fea:	bf85      	ittet	hi
 8006fec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ff0:	195b      	addhi	r3, r3, r5
 8006ff2:	2300      	movls	r3, #0
 8006ff4:	9302      	strhi	r3, [sp, #8]
 8006ff6:	bf88      	it	hi
 8006ff8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ffc:	468b      	mov	fp, r1
 8006ffe:	f04f 0500 	mov.w	r5, #0
 8007002:	bf8c      	ite	hi
 8007004:	608b      	strhi	r3, [r1, #8]
 8007006:	9302      	strls	r3, [sp, #8]
 8007008:	680b      	ldr	r3, [r1, #0]
 800700a:	4680      	mov	r8, r0
 800700c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007010:	f84b 3b1c 	str.w	r3, [fp], #28
 8007014:	460c      	mov	r4, r1
 8007016:	465e      	mov	r6, fp
 8007018:	46aa      	mov	sl, r5
 800701a:	46a9      	mov	r9, r5
 800701c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007020:	9501      	str	r5, [sp, #4]
 8007022:	68a2      	ldr	r2, [r4, #8]
 8007024:	b152      	cbz	r2, 800703c <_scanf_float+0x64>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b4e      	cmp	r3, #78	; 0x4e
 800702c:	d864      	bhi.n	80070f8 <_scanf_float+0x120>
 800702e:	2b40      	cmp	r3, #64	; 0x40
 8007030:	d83c      	bhi.n	80070ac <_scanf_float+0xd4>
 8007032:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007036:	b2c8      	uxtb	r0, r1
 8007038:	280e      	cmp	r0, #14
 800703a:	d93a      	bls.n	80070b2 <_scanf_float+0xda>
 800703c:	f1b9 0f00 	cmp.w	r9, #0
 8007040:	d003      	beq.n	800704a <_scanf_float+0x72>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800704e:	f1ba 0f01 	cmp.w	sl, #1
 8007052:	f200 8113 	bhi.w	800727c <_scanf_float+0x2a4>
 8007056:	455e      	cmp	r6, fp
 8007058:	f200 8105 	bhi.w	8007266 <_scanf_float+0x28e>
 800705c:	2501      	movs	r5, #1
 800705e:	4628      	mov	r0, r5
 8007060:	b007      	add	sp, #28
 8007062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007066:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800706a:	2a0d      	cmp	r2, #13
 800706c:	d8e6      	bhi.n	800703c <_scanf_float+0x64>
 800706e:	a101      	add	r1, pc, #4	; (adr r1, 8007074 <_scanf_float+0x9c>)
 8007070:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007074:	080071b3 	.word	0x080071b3
 8007078:	0800703d 	.word	0x0800703d
 800707c:	0800703d 	.word	0x0800703d
 8007080:	0800703d 	.word	0x0800703d
 8007084:	08007213 	.word	0x08007213
 8007088:	080071eb 	.word	0x080071eb
 800708c:	0800703d 	.word	0x0800703d
 8007090:	0800703d 	.word	0x0800703d
 8007094:	080071c1 	.word	0x080071c1
 8007098:	0800703d 	.word	0x0800703d
 800709c:	0800703d 	.word	0x0800703d
 80070a0:	0800703d 	.word	0x0800703d
 80070a4:	0800703d 	.word	0x0800703d
 80070a8:	08007179 	.word	0x08007179
 80070ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80070b0:	e7db      	b.n	800706a <_scanf_float+0x92>
 80070b2:	290e      	cmp	r1, #14
 80070b4:	d8c2      	bhi.n	800703c <_scanf_float+0x64>
 80070b6:	a001      	add	r0, pc, #4	; (adr r0, 80070bc <_scanf_float+0xe4>)
 80070b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070bc:	0800716b 	.word	0x0800716b
 80070c0:	0800703d 	.word	0x0800703d
 80070c4:	0800716b 	.word	0x0800716b
 80070c8:	080071ff 	.word	0x080071ff
 80070cc:	0800703d 	.word	0x0800703d
 80070d0:	08007119 	.word	0x08007119
 80070d4:	08007155 	.word	0x08007155
 80070d8:	08007155 	.word	0x08007155
 80070dc:	08007155 	.word	0x08007155
 80070e0:	08007155 	.word	0x08007155
 80070e4:	08007155 	.word	0x08007155
 80070e8:	08007155 	.word	0x08007155
 80070ec:	08007155 	.word	0x08007155
 80070f0:	08007155 	.word	0x08007155
 80070f4:	08007155 	.word	0x08007155
 80070f8:	2b6e      	cmp	r3, #110	; 0x6e
 80070fa:	d809      	bhi.n	8007110 <_scanf_float+0x138>
 80070fc:	2b60      	cmp	r3, #96	; 0x60
 80070fe:	d8b2      	bhi.n	8007066 <_scanf_float+0x8e>
 8007100:	2b54      	cmp	r3, #84	; 0x54
 8007102:	d077      	beq.n	80071f4 <_scanf_float+0x21c>
 8007104:	2b59      	cmp	r3, #89	; 0x59
 8007106:	d199      	bne.n	800703c <_scanf_float+0x64>
 8007108:	2d07      	cmp	r5, #7
 800710a:	d197      	bne.n	800703c <_scanf_float+0x64>
 800710c:	2508      	movs	r5, #8
 800710e:	e029      	b.n	8007164 <_scanf_float+0x18c>
 8007110:	2b74      	cmp	r3, #116	; 0x74
 8007112:	d06f      	beq.n	80071f4 <_scanf_float+0x21c>
 8007114:	2b79      	cmp	r3, #121	; 0x79
 8007116:	e7f6      	b.n	8007106 <_scanf_float+0x12e>
 8007118:	6821      	ldr	r1, [r4, #0]
 800711a:	05c8      	lsls	r0, r1, #23
 800711c:	d51a      	bpl.n	8007154 <_scanf_float+0x17c>
 800711e:	9b02      	ldr	r3, [sp, #8]
 8007120:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007124:	6021      	str	r1, [r4, #0]
 8007126:	f109 0901 	add.w	r9, r9, #1
 800712a:	b11b      	cbz	r3, 8007134 <_scanf_float+0x15c>
 800712c:	3b01      	subs	r3, #1
 800712e:	3201      	adds	r2, #1
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	60a2      	str	r2, [r4, #8]
 8007134:	68a3      	ldr	r3, [r4, #8]
 8007136:	3b01      	subs	r3, #1
 8007138:	60a3      	str	r3, [r4, #8]
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	3301      	adds	r3, #1
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3b01      	subs	r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	f340 8084 	ble.w	8007254 <_scanf_float+0x27c>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	e766      	b.n	8007022 <_scanf_float+0x4a>
 8007154:	eb1a 0f05 	cmn.w	sl, r5
 8007158:	f47f af70 	bne.w	800703c <_scanf_float+0x64>
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007162:	6022      	str	r2, [r4, #0]
 8007164:	f806 3b01 	strb.w	r3, [r6], #1
 8007168:	e7e4      	b.n	8007134 <_scanf_float+0x15c>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	0610      	lsls	r0, r2, #24
 800716e:	f57f af65 	bpl.w	800703c <_scanf_float+0x64>
 8007172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007176:	e7f4      	b.n	8007162 <_scanf_float+0x18a>
 8007178:	f1ba 0f00 	cmp.w	sl, #0
 800717c:	d10e      	bne.n	800719c <_scanf_float+0x1c4>
 800717e:	f1b9 0f00 	cmp.w	r9, #0
 8007182:	d10e      	bne.n	80071a2 <_scanf_float+0x1ca>
 8007184:	6822      	ldr	r2, [r4, #0]
 8007186:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800718a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800718e:	d108      	bne.n	80071a2 <_scanf_float+0x1ca>
 8007190:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007194:	f04f 0a01 	mov.w	sl, #1
 8007198:	6022      	str	r2, [r4, #0]
 800719a:	e7e3      	b.n	8007164 <_scanf_float+0x18c>
 800719c:	f1ba 0f02 	cmp.w	sl, #2
 80071a0:	d055      	beq.n	800724e <_scanf_float+0x276>
 80071a2:	2d01      	cmp	r5, #1
 80071a4:	d002      	beq.n	80071ac <_scanf_float+0x1d4>
 80071a6:	2d04      	cmp	r5, #4
 80071a8:	f47f af48 	bne.w	800703c <_scanf_float+0x64>
 80071ac:	3501      	adds	r5, #1
 80071ae:	b2ed      	uxtb	r5, r5
 80071b0:	e7d8      	b.n	8007164 <_scanf_float+0x18c>
 80071b2:	f1ba 0f01 	cmp.w	sl, #1
 80071b6:	f47f af41 	bne.w	800703c <_scanf_float+0x64>
 80071ba:	f04f 0a02 	mov.w	sl, #2
 80071be:	e7d1      	b.n	8007164 <_scanf_float+0x18c>
 80071c0:	b97d      	cbnz	r5, 80071e2 <_scanf_float+0x20a>
 80071c2:	f1b9 0f00 	cmp.w	r9, #0
 80071c6:	f47f af3c 	bne.w	8007042 <_scanf_float+0x6a>
 80071ca:	6822      	ldr	r2, [r4, #0]
 80071cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071d4:	f47f af39 	bne.w	800704a <_scanf_float+0x72>
 80071d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071dc:	2501      	movs	r5, #1
 80071de:	6022      	str	r2, [r4, #0]
 80071e0:	e7c0      	b.n	8007164 <_scanf_float+0x18c>
 80071e2:	2d03      	cmp	r5, #3
 80071e4:	d0e2      	beq.n	80071ac <_scanf_float+0x1d4>
 80071e6:	2d05      	cmp	r5, #5
 80071e8:	e7de      	b.n	80071a8 <_scanf_float+0x1d0>
 80071ea:	2d02      	cmp	r5, #2
 80071ec:	f47f af26 	bne.w	800703c <_scanf_float+0x64>
 80071f0:	2503      	movs	r5, #3
 80071f2:	e7b7      	b.n	8007164 <_scanf_float+0x18c>
 80071f4:	2d06      	cmp	r5, #6
 80071f6:	f47f af21 	bne.w	800703c <_scanf_float+0x64>
 80071fa:	2507      	movs	r5, #7
 80071fc:	e7b2      	b.n	8007164 <_scanf_float+0x18c>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	0591      	lsls	r1, r2, #22
 8007202:	f57f af1b 	bpl.w	800703c <_scanf_float+0x64>
 8007206:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800720a:	6022      	str	r2, [r4, #0]
 800720c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007210:	e7a8      	b.n	8007164 <_scanf_float+0x18c>
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007218:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800721c:	d006      	beq.n	800722c <_scanf_float+0x254>
 800721e:	0550      	lsls	r0, r2, #21
 8007220:	f57f af0c 	bpl.w	800703c <_scanf_float+0x64>
 8007224:	f1b9 0f00 	cmp.w	r9, #0
 8007228:	f43f af0f 	beq.w	800704a <_scanf_float+0x72>
 800722c:	0591      	lsls	r1, r2, #22
 800722e:	bf58      	it	pl
 8007230:	9901      	ldrpl	r1, [sp, #4]
 8007232:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007236:	bf58      	it	pl
 8007238:	eba9 0101 	subpl.w	r1, r9, r1
 800723c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007240:	f04f 0900 	mov.w	r9, #0
 8007244:	bf58      	it	pl
 8007246:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	e78a      	b.n	8007164 <_scanf_float+0x18c>
 800724e:	f04f 0a03 	mov.w	sl, #3
 8007252:	e787      	b.n	8007164 <_scanf_float+0x18c>
 8007254:	4639      	mov	r1, r7
 8007256:	4640      	mov	r0, r8
 8007258:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800725c:	4798      	blx	r3
 800725e:	2800      	cmp	r0, #0
 8007260:	f43f aedf 	beq.w	8007022 <_scanf_float+0x4a>
 8007264:	e6ea      	b.n	800703c <_scanf_float+0x64>
 8007266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800726a:	463a      	mov	r2, r7
 800726c:	4640      	mov	r0, r8
 800726e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007272:	4798      	blx	r3
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	3b01      	subs	r3, #1
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	e6ec      	b.n	8007056 <_scanf_float+0x7e>
 800727c:	1e6b      	subs	r3, r5, #1
 800727e:	2b06      	cmp	r3, #6
 8007280:	d825      	bhi.n	80072ce <_scanf_float+0x2f6>
 8007282:	2d02      	cmp	r5, #2
 8007284:	d836      	bhi.n	80072f4 <_scanf_float+0x31c>
 8007286:	455e      	cmp	r6, fp
 8007288:	f67f aee8 	bls.w	800705c <_scanf_float+0x84>
 800728c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007290:	463a      	mov	r2, r7
 8007292:	4640      	mov	r0, r8
 8007294:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007298:	4798      	blx	r3
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	3b01      	subs	r3, #1
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	e7f1      	b.n	8007286 <_scanf_float+0x2ae>
 80072a2:	9802      	ldr	r0, [sp, #8]
 80072a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072ac:	463a      	mov	r2, r7
 80072ae:	9002      	str	r0, [sp, #8]
 80072b0:	4640      	mov	r0, r8
 80072b2:	4798      	blx	r3
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	6123      	str	r3, [r4, #16]
 80072ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072be:	fa5f fa8a 	uxtb.w	sl, sl
 80072c2:	f1ba 0f02 	cmp.w	sl, #2
 80072c6:	d1ec      	bne.n	80072a2 <_scanf_float+0x2ca>
 80072c8:	3d03      	subs	r5, #3
 80072ca:	b2ed      	uxtb	r5, r5
 80072cc:	1b76      	subs	r6, r6, r5
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	05da      	lsls	r2, r3, #23
 80072d2:	d52f      	bpl.n	8007334 <_scanf_float+0x35c>
 80072d4:	055b      	lsls	r3, r3, #21
 80072d6:	d510      	bpl.n	80072fa <_scanf_float+0x322>
 80072d8:	455e      	cmp	r6, fp
 80072da:	f67f aebf 	bls.w	800705c <_scanf_float+0x84>
 80072de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072e2:	463a      	mov	r2, r7
 80072e4:	4640      	mov	r0, r8
 80072e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072ea:	4798      	blx	r3
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	6123      	str	r3, [r4, #16]
 80072f2:	e7f1      	b.n	80072d8 <_scanf_float+0x300>
 80072f4:	46aa      	mov	sl, r5
 80072f6:	9602      	str	r6, [sp, #8]
 80072f8:	e7df      	b.n	80072ba <_scanf_float+0x2e2>
 80072fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	2965      	cmp	r1, #101	; 0x65
 8007302:	f103 33ff 	add.w	r3, r3, #4294967295
 8007306:	f106 35ff 	add.w	r5, r6, #4294967295
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	d00c      	beq.n	8007328 <_scanf_float+0x350>
 800730e:	2945      	cmp	r1, #69	; 0x45
 8007310:	d00a      	beq.n	8007328 <_scanf_float+0x350>
 8007312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007316:	463a      	mov	r2, r7
 8007318:	4640      	mov	r0, r8
 800731a:	4798      	blx	r3
 800731c:	6923      	ldr	r3, [r4, #16]
 800731e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007322:	3b01      	subs	r3, #1
 8007324:	1eb5      	subs	r5, r6, #2
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	463a      	mov	r2, r7
 800732a:	4640      	mov	r0, r8
 800732c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007330:	4798      	blx	r3
 8007332:	462e      	mov	r6, r5
 8007334:	6825      	ldr	r5, [r4, #0]
 8007336:	f015 0510 	ands.w	r5, r5, #16
 800733a:	d155      	bne.n	80073e8 <_scanf_float+0x410>
 800733c:	7035      	strb	r5, [r6, #0]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007348:	d11d      	bne.n	8007386 <_scanf_float+0x3ae>
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	454b      	cmp	r3, r9
 800734e:	eba3 0209 	sub.w	r2, r3, r9
 8007352:	d125      	bne.n	80073a0 <_scanf_float+0x3c8>
 8007354:	2200      	movs	r2, #0
 8007356:	4659      	mov	r1, fp
 8007358:	4640      	mov	r0, r8
 800735a:	f002 fc41 	bl	8009be0 <_strtod_r>
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	f8d4 c000 	ldr.w	ip, [r4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f01c 0f02 	tst.w	ip, #2
 800736a:	4606      	mov	r6, r0
 800736c:	460f      	mov	r7, r1
 800736e:	f103 0204 	add.w	r2, r3, #4
 8007372:	d020      	beq.n	80073b6 <_scanf_float+0x3de>
 8007374:	9903      	ldr	r1, [sp, #12]
 8007376:	600a      	str	r2, [r1, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	e9c3 6700 	strd	r6, r7, [r3]
 800737e:	68e3      	ldr	r3, [r4, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60e3      	str	r3, [r4, #12]
 8007384:	e66b      	b.n	800705e <_scanf_float+0x86>
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0e3      	beq.n	8007354 <_scanf_float+0x37c>
 800738c:	9905      	ldr	r1, [sp, #20]
 800738e:	230a      	movs	r3, #10
 8007390:	462a      	mov	r2, r5
 8007392:	4640      	mov	r0, r8
 8007394:	3101      	adds	r1, #1
 8007396:	f002 fca7 	bl	8009ce8 <_strtol_r>
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	9e05      	ldr	r6, [sp, #20]
 800739e:	1ac2      	subs	r2, r0, r3
 80073a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073a4:	429e      	cmp	r6, r3
 80073a6:	bf28      	it	cs
 80073a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073ac:	4630      	mov	r0, r6
 80073ae:	490f      	ldr	r1, [pc, #60]	; (80073ec <_scanf_float+0x414>)
 80073b0:	f000 f8e2 	bl	8007578 <siprintf>
 80073b4:	e7ce      	b.n	8007354 <_scanf_float+0x37c>
 80073b6:	f01c 0f04 	tst.w	ip, #4
 80073ba:	d1db      	bne.n	8007374 <_scanf_float+0x39c>
 80073bc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80073c0:	f8cc 2000 	str.w	r2, [ip]
 80073c4:	f8d3 8000 	ldr.w	r8, [r3]
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	f7f9 fb8a 	bl	8000ae4 <__aeabi_dcmpun>
 80073d0:	b128      	cbz	r0, 80073de <_scanf_float+0x406>
 80073d2:	4807      	ldr	r0, [pc, #28]	; (80073f0 <_scanf_float+0x418>)
 80073d4:	f000 f9e2 	bl	800779c <nanf>
 80073d8:	f8c8 0000 	str.w	r0, [r8]
 80073dc:	e7cf      	b.n	800737e <_scanf_float+0x3a6>
 80073de:	4630      	mov	r0, r6
 80073e0:	4639      	mov	r1, r7
 80073e2:	f7f9 fbdd 	bl	8000ba0 <__aeabi_d2f>
 80073e6:	e7f7      	b.n	80073d8 <_scanf_float+0x400>
 80073e8:	2500      	movs	r5, #0
 80073ea:	e638      	b.n	800705e <_scanf_float+0x86>
 80073ec:	0800af62 	.word	0x0800af62
 80073f0:	0800b2f5 	.word	0x0800b2f5

080073f4 <std>:
 80073f4:	2300      	movs	r3, #0
 80073f6:	b510      	push	{r4, lr}
 80073f8:	4604      	mov	r4, r0
 80073fa:	e9c0 3300 	strd	r3, r3, [r0]
 80073fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007402:	6083      	str	r3, [r0, #8]
 8007404:	8181      	strh	r1, [r0, #12]
 8007406:	6643      	str	r3, [r0, #100]	; 0x64
 8007408:	81c2      	strh	r2, [r0, #14]
 800740a:	6183      	str	r3, [r0, #24]
 800740c:	4619      	mov	r1, r3
 800740e:	2208      	movs	r2, #8
 8007410:	305c      	adds	r0, #92	; 0x5c
 8007412:	f000 f935 	bl	8007680 <memset>
 8007416:	4b0d      	ldr	r3, [pc, #52]	; (800744c <std+0x58>)
 8007418:	6224      	str	r4, [r4, #32]
 800741a:	6263      	str	r3, [r4, #36]	; 0x24
 800741c:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <std+0x5c>)
 800741e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <std+0x60>)
 8007422:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007424:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <std+0x64>)
 8007426:	6323      	str	r3, [r4, #48]	; 0x30
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <std+0x68>)
 800742a:	429c      	cmp	r4, r3
 800742c:	d006      	beq.n	800743c <std+0x48>
 800742e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007432:	4294      	cmp	r4, r2
 8007434:	d002      	beq.n	800743c <std+0x48>
 8007436:	33d0      	adds	r3, #208	; 0xd0
 8007438:	429c      	cmp	r4, r3
 800743a:	d105      	bne.n	8007448 <std+0x54>
 800743c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007444:	f000 b998 	b.w	8007778 <__retarget_lock_init_recursive>
 8007448:	bd10      	pop	{r4, pc}
 800744a:	bf00      	nop
 800744c:	080075b9 	.word	0x080075b9
 8007450:	080075db 	.word	0x080075db
 8007454:	08007613 	.word	0x08007613
 8007458:	08007637 	.word	0x08007637
 800745c:	200005d0 	.word	0x200005d0

08007460 <stdio_exit_handler>:
 8007460:	4a02      	ldr	r2, [pc, #8]	; (800746c <stdio_exit_handler+0xc>)
 8007462:	4903      	ldr	r1, [pc, #12]	; (8007470 <stdio_exit_handler+0x10>)
 8007464:	4803      	ldr	r0, [pc, #12]	; (8007474 <stdio_exit_handler+0x14>)
 8007466:	f000 b869 	b.w	800753c <_fwalk_sglue>
 800746a:	bf00      	nop
 800746c:	20000020 	.word	0x20000020
 8007470:	0800a0a1 	.word	0x0800a0a1
 8007474:	2000002c 	.word	0x2000002c

08007478 <cleanup_stdio>:
 8007478:	6841      	ldr	r1, [r0, #4]
 800747a:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <cleanup_stdio+0x34>)
 800747c:	b510      	push	{r4, lr}
 800747e:	4299      	cmp	r1, r3
 8007480:	4604      	mov	r4, r0
 8007482:	d001      	beq.n	8007488 <cleanup_stdio+0x10>
 8007484:	f002 fe0c 	bl	800a0a0 <_fflush_r>
 8007488:	68a1      	ldr	r1, [r4, #8]
 800748a:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <cleanup_stdio+0x38>)
 800748c:	4299      	cmp	r1, r3
 800748e:	d002      	beq.n	8007496 <cleanup_stdio+0x1e>
 8007490:	4620      	mov	r0, r4
 8007492:	f002 fe05 	bl	800a0a0 <_fflush_r>
 8007496:	68e1      	ldr	r1, [r4, #12]
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <cleanup_stdio+0x3c>)
 800749a:	4299      	cmp	r1, r3
 800749c:	d004      	beq.n	80074a8 <cleanup_stdio+0x30>
 800749e:	4620      	mov	r0, r4
 80074a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a4:	f002 bdfc 	b.w	800a0a0 <_fflush_r>
 80074a8:	bd10      	pop	{r4, pc}
 80074aa:	bf00      	nop
 80074ac:	200005d0 	.word	0x200005d0
 80074b0:	20000638 	.word	0x20000638
 80074b4:	200006a0 	.word	0x200006a0

080074b8 <global_stdio_init.part.0>:
 80074b8:	b510      	push	{r4, lr}
 80074ba:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <global_stdio_init.part.0+0x30>)
 80074bc:	4c0b      	ldr	r4, [pc, #44]	; (80074ec <global_stdio_init.part.0+0x34>)
 80074be:	4a0c      	ldr	r2, [pc, #48]	; (80074f0 <global_stdio_init.part.0+0x38>)
 80074c0:	4620      	mov	r0, r4
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	2104      	movs	r1, #4
 80074c6:	2200      	movs	r2, #0
 80074c8:	f7ff ff94 	bl	80073f4 <std>
 80074cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80074d0:	2201      	movs	r2, #1
 80074d2:	2109      	movs	r1, #9
 80074d4:	f7ff ff8e 	bl	80073f4 <std>
 80074d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80074dc:	2202      	movs	r2, #2
 80074de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e2:	2112      	movs	r1, #18
 80074e4:	f7ff bf86 	b.w	80073f4 <std>
 80074e8:	20000708 	.word	0x20000708
 80074ec:	200005d0 	.word	0x200005d0
 80074f0:	08007461 	.word	0x08007461

080074f4 <__sfp_lock_acquire>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__sfp_lock_acquire+0x8>)
 80074f6:	f000 b940 	b.w	800777a <__retarget_lock_acquire_recursive>
 80074fa:	bf00      	nop
 80074fc:	20000711 	.word	0x20000711

08007500 <__sfp_lock_release>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__sfp_lock_release+0x8>)
 8007502:	f000 b93b 	b.w	800777c <__retarget_lock_release_recursive>
 8007506:	bf00      	nop
 8007508:	20000711 	.word	0x20000711

0800750c <__sinit>:
 800750c:	b510      	push	{r4, lr}
 800750e:	4604      	mov	r4, r0
 8007510:	f7ff fff0 	bl	80074f4 <__sfp_lock_acquire>
 8007514:	6a23      	ldr	r3, [r4, #32]
 8007516:	b11b      	cbz	r3, 8007520 <__sinit+0x14>
 8007518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751c:	f7ff bff0 	b.w	8007500 <__sfp_lock_release>
 8007520:	4b04      	ldr	r3, [pc, #16]	; (8007534 <__sinit+0x28>)
 8007522:	6223      	str	r3, [r4, #32]
 8007524:	4b04      	ldr	r3, [pc, #16]	; (8007538 <__sinit+0x2c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f5      	bne.n	8007518 <__sinit+0xc>
 800752c:	f7ff ffc4 	bl	80074b8 <global_stdio_init.part.0>
 8007530:	e7f2      	b.n	8007518 <__sinit+0xc>
 8007532:	bf00      	nop
 8007534:	08007479 	.word	0x08007479
 8007538:	20000708 	.word	0x20000708

0800753c <_fwalk_sglue>:
 800753c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007540:	4607      	mov	r7, r0
 8007542:	4688      	mov	r8, r1
 8007544:	4614      	mov	r4, r2
 8007546:	2600      	movs	r6, #0
 8007548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800754c:	f1b9 0901 	subs.w	r9, r9, #1
 8007550:	d505      	bpl.n	800755e <_fwalk_sglue+0x22>
 8007552:	6824      	ldr	r4, [r4, #0]
 8007554:	2c00      	cmp	r4, #0
 8007556:	d1f7      	bne.n	8007548 <_fwalk_sglue+0xc>
 8007558:	4630      	mov	r0, r6
 800755a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755e:	89ab      	ldrh	r3, [r5, #12]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d907      	bls.n	8007574 <_fwalk_sglue+0x38>
 8007564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007568:	3301      	adds	r3, #1
 800756a:	d003      	beq.n	8007574 <_fwalk_sglue+0x38>
 800756c:	4629      	mov	r1, r5
 800756e:	4638      	mov	r0, r7
 8007570:	47c0      	blx	r8
 8007572:	4306      	orrs	r6, r0
 8007574:	3568      	adds	r5, #104	; 0x68
 8007576:	e7e9      	b.n	800754c <_fwalk_sglue+0x10>

08007578 <siprintf>:
 8007578:	b40e      	push	{r1, r2, r3}
 800757a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800757e:	b500      	push	{lr}
 8007580:	b09c      	sub	sp, #112	; 0x70
 8007582:	ab1d      	add	r3, sp, #116	; 0x74
 8007584:	9002      	str	r0, [sp, #8]
 8007586:	9006      	str	r0, [sp, #24]
 8007588:	9107      	str	r1, [sp, #28]
 800758a:	9104      	str	r1, [sp, #16]
 800758c:	4808      	ldr	r0, [pc, #32]	; (80075b0 <siprintf+0x38>)
 800758e:	4909      	ldr	r1, [pc, #36]	; (80075b4 <siprintf+0x3c>)
 8007590:	f853 2b04 	ldr.w	r2, [r3], #4
 8007594:	9105      	str	r1, [sp, #20]
 8007596:	6800      	ldr	r0, [r0, #0]
 8007598:	a902      	add	r1, sp, #8
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	f002 fc00 	bl	8009da0 <_svfiprintf_r>
 80075a0:	2200      	movs	r2, #0
 80075a2:	9b02      	ldr	r3, [sp, #8]
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	b01c      	add	sp, #112	; 0x70
 80075a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075ac:	b003      	add	sp, #12
 80075ae:	4770      	bx	lr
 80075b0:	20000078 	.word	0x20000078
 80075b4:	ffff0208 	.word	0xffff0208

080075b8 <__sread>:
 80075b8:	b510      	push	{r4, lr}
 80075ba:	460c      	mov	r4, r1
 80075bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c0:	f000 f88c 	bl	80076dc <_read_r>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	bfab      	itete	ge
 80075c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075ca:	89a3      	ldrhlt	r3, [r4, #12]
 80075cc:	181b      	addge	r3, r3, r0
 80075ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075d2:	bfac      	ite	ge
 80075d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075d6:	81a3      	strhlt	r3, [r4, #12]
 80075d8:	bd10      	pop	{r4, pc}

080075da <__swrite>:
 80075da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075de:	461f      	mov	r7, r3
 80075e0:	898b      	ldrh	r3, [r1, #12]
 80075e2:	4605      	mov	r5, r0
 80075e4:	05db      	lsls	r3, r3, #23
 80075e6:	460c      	mov	r4, r1
 80075e8:	4616      	mov	r6, r2
 80075ea:	d505      	bpl.n	80075f8 <__swrite+0x1e>
 80075ec:	2302      	movs	r3, #2
 80075ee:	2200      	movs	r2, #0
 80075f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f4:	f000 f860 	bl	80076b8 <_lseek_r>
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	4632      	mov	r2, r6
 80075fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	4628      	mov	r0, r5
 8007604:	463b      	mov	r3, r7
 8007606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800760a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800760e:	f000 b877 	b.w	8007700 <_write_r>

08007612 <__sseek>:
 8007612:	b510      	push	{r4, lr}
 8007614:	460c      	mov	r4, r1
 8007616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761a:	f000 f84d 	bl	80076b8 <_lseek_r>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	bf15      	itete	ne
 8007624:	6560      	strne	r0, [r4, #84]	; 0x54
 8007626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800762a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800762e:	81a3      	strheq	r3, [r4, #12]
 8007630:	bf18      	it	ne
 8007632:	81a3      	strhne	r3, [r4, #12]
 8007634:	bd10      	pop	{r4, pc}

08007636 <__sclose>:
 8007636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763a:	f000 b82d 	b.w	8007698 <_close_r>
	...

08007640 <_vsiprintf_r>:
 8007640:	b500      	push	{lr}
 8007642:	b09b      	sub	sp, #108	; 0x6c
 8007644:	9100      	str	r1, [sp, #0]
 8007646:	9104      	str	r1, [sp, #16]
 8007648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800764c:	9105      	str	r1, [sp, #20]
 800764e:	9102      	str	r1, [sp, #8]
 8007650:	4905      	ldr	r1, [pc, #20]	; (8007668 <_vsiprintf_r+0x28>)
 8007652:	9103      	str	r1, [sp, #12]
 8007654:	4669      	mov	r1, sp
 8007656:	f002 fba3 	bl	8009da0 <_svfiprintf_r>
 800765a:	2200      	movs	r2, #0
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	b01b      	add	sp, #108	; 0x6c
 8007662:	f85d fb04 	ldr.w	pc, [sp], #4
 8007666:	bf00      	nop
 8007668:	ffff0208 	.word	0xffff0208

0800766c <vsiprintf>:
 800766c:	4613      	mov	r3, r2
 800766e:	460a      	mov	r2, r1
 8007670:	4601      	mov	r1, r0
 8007672:	4802      	ldr	r0, [pc, #8]	; (800767c <vsiprintf+0x10>)
 8007674:	6800      	ldr	r0, [r0, #0]
 8007676:	f7ff bfe3 	b.w	8007640 <_vsiprintf_r>
 800767a:	bf00      	nop
 800767c:	20000078 	.word	0x20000078

08007680 <memset>:
 8007680:	4603      	mov	r3, r0
 8007682:	4402      	add	r2, r0
 8007684:	4293      	cmp	r3, r2
 8007686:	d100      	bne.n	800768a <memset+0xa>
 8007688:	4770      	bx	lr
 800768a:	f803 1b01 	strb.w	r1, [r3], #1
 800768e:	e7f9      	b.n	8007684 <memset+0x4>

08007690 <_localeconv_r>:
 8007690:	4800      	ldr	r0, [pc, #0]	; (8007694 <_localeconv_r+0x4>)
 8007692:	4770      	bx	lr
 8007694:	2000016c 	.word	0x2000016c

08007698 <_close_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	2300      	movs	r3, #0
 800769c:	4d05      	ldr	r5, [pc, #20]	; (80076b4 <_close_r+0x1c>)
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	f7fa fd7c 	bl	80021a0 <_close>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_close_r+0x1a>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_close_r+0x1a>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	2000070c 	.word	0x2000070c

080076b8 <_lseek_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4604      	mov	r4, r0
 80076bc:	4608      	mov	r0, r1
 80076be:	4611      	mov	r1, r2
 80076c0:	2200      	movs	r2, #0
 80076c2:	4d05      	ldr	r5, [pc, #20]	; (80076d8 <_lseek_r+0x20>)
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f7fa fd8e 	bl	80021e8 <_lseek>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_lseek_r+0x1e>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_lseek_r+0x1e>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	2000070c 	.word	0x2000070c

080076dc <_read_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	2200      	movs	r2, #0
 80076e6:	4d05      	ldr	r5, [pc, #20]	; (80076fc <_read_r+0x20>)
 80076e8:	602a      	str	r2, [r5, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f7fa fd1f 	bl	800212e <_read>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_read_r+0x1e>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_read_r+0x1e>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	2000070c 	.word	0x2000070c

08007700 <_write_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	2200      	movs	r2, #0
 800770a:	4d05      	ldr	r5, [pc, #20]	; (8007720 <_write_r+0x20>)
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f7fa fd2a 	bl	8002168 <_write>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_write_r+0x1e>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_write_r+0x1e>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	2000070c 	.word	0x2000070c

08007724 <__errno>:
 8007724:	4b01      	ldr	r3, [pc, #4]	; (800772c <__errno+0x8>)
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000078 	.word	0x20000078

08007730 <__libc_init_array>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	2600      	movs	r6, #0
 8007734:	4d0c      	ldr	r5, [pc, #48]	; (8007768 <__libc_init_array+0x38>)
 8007736:	4c0d      	ldr	r4, [pc, #52]	; (800776c <__libc_init_array+0x3c>)
 8007738:	1b64      	subs	r4, r4, r5
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	42a6      	cmp	r6, r4
 800773e:	d109      	bne.n	8007754 <__libc_init_array+0x24>
 8007740:	f003 fbc0 	bl	800aec4 <_init>
 8007744:	2600      	movs	r6, #0
 8007746:	4d0a      	ldr	r5, [pc, #40]	; (8007770 <__libc_init_array+0x40>)
 8007748:	4c0a      	ldr	r4, [pc, #40]	; (8007774 <__libc_init_array+0x44>)
 800774a:	1b64      	subs	r4, r4, r5
 800774c:	10a4      	asrs	r4, r4, #2
 800774e:	42a6      	cmp	r6, r4
 8007750:	d105      	bne.n	800775e <__libc_init_array+0x2e>
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	f855 3b04 	ldr.w	r3, [r5], #4
 8007758:	4798      	blx	r3
 800775a:	3601      	adds	r6, #1
 800775c:	e7ee      	b.n	800773c <__libc_init_array+0xc>
 800775e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007762:	4798      	blx	r3
 8007764:	3601      	adds	r6, #1
 8007766:	e7f2      	b.n	800774e <__libc_init_array+0x1e>
 8007768:	0800b358 	.word	0x0800b358
 800776c:	0800b358 	.word	0x0800b358
 8007770:	0800b358 	.word	0x0800b358
 8007774:	0800b35c 	.word	0x0800b35c

08007778 <__retarget_lock_init_recursive>:
 8007778:	4770      	bx	lr

0800777a <__retarget_lock_acquire_recursive>:
 800777a:	4770      	bx	lr

0800777c <__retarget_lock_release_recursive>:
 800777c:	4770      	bx	lr

0800777e <memchr>:
 800777e:	4603      	mov	r3, r0
 8007780:	b510      	push	{r4, lr}
 8007782:	b2c9      	uxtb	r1, r1
 8007784:	4402      	add	r2, r0
 8007786:	4293      	cmp	r3, r2
 8007788:	4618      	mov	r0, r3
 800778a:	d101      	bne.n	8007790 <memchr+0x12>
 800778c:	2000      	movs	r0, #0
 800778e:	e003      	b.n	8007798 <memchr+0x1a>
 8007790:	7804      	ldrb	r4, [r0, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	428c      	cmp	r4, r1
 8007796:	d1f6      	bne.n	8007786 <memchr+0x8>
 8007798:	bd10      	pop	{r4, pc}
	...

0800779c <nanf>:
 800779c:	4800      	ldr	r0, [pc, #0]	; (80077a0 <nanf+0x4>)
 800779e:	4770      	bx	lr
 80077a0:	7fc00000 	.word	0x7fc00000

080077a4 <quorem>:
 80077a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	6903      	ldr	r3, [r0, #16]
 80077aa:	690c      	ldr	r4, [r1, #16]
 80077ac:	4607      	mov	r7, r0
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	db7f      	blt.n	80078b2 <quorem+0x10e>
 80077b2:	3c01      	subs	r4, #1
 80077b4:	f100 0514 	add.w	r5, r0, #20
 80077b8:	f101 0814 	add.w	r8, r1, #20
 80077bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ca:	3301      	adds	r3, #1
 80077cc:	429a      	cmp	r2, r3
 80077ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80077d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077da:	d331      	bcc.n	8007840 <quorem+0x9c>
 80077dc:	f04f 0e00 	mov.w	lr, #0
 80077e0:	4640      	mov	r0, r8
 80077e2:	46ac      	mov	ip, r5
 80077e4:	46f2      	mov	sl, lr
 80077e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80077ea:	b293      	uxth	r3, r2
 80077ec:	fb06 e303 	mla	r3, r6, r3, lr
 80077f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077f4:	0c1a      	lsrs	r2, r3, #16
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	fb06 220e 	mla	r2, r6, lr, r2
 80077fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007800:	f8dc a000 	ldr.w	sl, [ip]
 8007804:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007808:	fa1f fa8a 	uxth.w	sl, sl
 800780c:	4453      	add	r3, sl
 800780e:	f8dc a000 	ldr.w	sl, [ip]
 8007812:	b292      	uxth	r2, r2
 8007814:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800781c:	b29b      	uxth	r3, r3
 800781e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007822:	4581      	cmp	r9, r0
 8007824:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007828:	f84c 3b04 	str.w	r3, [ip], #4
 800782c:	d2db      	bcs.n	80077e6 <quorem+0x42>
 800782e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007832:	b92b      	cbnz	r3, 8007840 <quorem+0x9c>
 8007834:	9b01      	ldr	r3, [sp, #4]
 8007836:	3b04      	subs	r3, #4
 8007838:	429d      	cmp	r5, r3
 800783a:	461a      	mov	r2, r3
 800783c:	d32d      	bcc.n	800789a <quorem+0xf6>
 800783e:	613c      	str	r4, [r7, #16]
 8007840:	4638      	mov	r0, r7
 8007842:	f001 f9dd 	bl	8008c00 <__mcmp>
 8007846:	2800      	cmp	r0, #0
 8007848:	db23      	blt.n	8007892 <quorem+0xee>
 800784a:	4629      	mov	r1, r5
 800784c:	2000      	movs	r0, #0
 800784e:	3601      	adds	r6, #1
 8007850:	f858 2b04 	ldr.w	r2, [r8], #4
 8007854:	f8d1 c000 	ldr.w	ip, [r1]
 8007858:	b293      	uxth	r3, r2
 800785a:	1ac3      	subs	r3, r0, r3
 800785c:	0c12      	lsrs	r2, r2, #16
 800785e:	fa1f f08c 	uxth.w	r0, ip
 8007862:	4403      	add	r3, r0
 8007864:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800786c:	b29b      	uxth	r3, r3
 800786e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007872:	45c1      	cmp	r9, r8
 8007874:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007878:	f841 3b04 	str.w	r3, [r1], #4
 800787c:	d2e8      	bcs.n	8007850 <quorem+0xac>
 800787e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007886:	b922      	cbnz	r2, 8007892 <quorem+0xee>
 8007888:	3b04      	subs	r3, #4
 800788a:	429d      	cmp	r5, r3
 800788c:	461a      	mov	r2, r3
 800788e:	d30a      	bcc.n	80078a6 <quorem+0x102>
 8007890:	613c      	str	r4, [r7, #16]
 8007892:	4630      	mov	r0, r6
 8007894:	b003      	add	sp, #12
 8007896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	3b04      	subs	r3, #4
 800789e:	2a00      	cmp	r2, #0
 80078a0:	d1cd      	bne.n	800783e <quorem+0x9a>
 80078a2:	3c01      	subs	r4, #1
 80078a4:	e7c8      	b.n	8007838 <quorem+0x94>
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	3b04      	subs	r3, #4
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	d1f0      	bne.n	8007890 <quorem+0xec>
 80078ae:	3c01      	subs	r4, #1
 80078b0:	e7eb      	b.n	800788a <quorem+0xe6>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e7ee      	b.n	8007894 <quorem+0xf0>
	...

080078b8 <_dtoa_r>:
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	4616      	mov	r6, r2
 80078be:	461f      	mov	r7, r3
 80078c0:	69c4      	ldr	r4, [r0, #28]
 80078c2:	b099      	sub	sp, #100	; 0x64
 80078c4:	4605      	mov	r5, r0
 80078c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80078ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80078ce:	b974      	cbnz	r4, 80078ee <_dtoa_r+0x36>
 80078d0:	2010      	movs	r0, #16
 80078d2:	f000 fe1d 	bl	8008510 <malloc>
 80078d6:	4602      	mov	r2, r0
 80078d8:	61e8      	str	r0, [r5, #28]
 80078da:	b920      	cbnz	r0, 80078e6 <_dtoa_r+0x2e>
 80078dc:	21ef      	movs	r1, #239	; 0xef
 80078de:	4bac      	ldr	r3, [pc, #688]	; (8007b90 <_dtoa_r+0x2d8>)
 80078e0:	48ac      	ldr	r0, [pc, #688]	; (8007b94 <_dtoa_r+0x2dc>)
 80078e2:	f002 fc55 	bl	800a190 <__assert_func>
 80078e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078ea:	6004      	str	r4, [r0, #0]
 80078ec:	60c4      	str	r4, [r0, #12]
 80078ee:	69eb      	ldr	r3, [r5, #28]
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	b151      	cbz	r1, 800790a <_dtoa_r+0x52>
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	2301      	movs	r3, #1
 80078f8:	4093      	lsls	r3, r2
 80078fa:	604a      	str	r2, [r1, #4]
 80078fc:	608b      	str	r3, [r1, #8]
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 fefa 	bl	80086f8 <_Bfree>
 8007904:	2200      	movs	r2, #0
 8007906:	69eb      	ldr	r3, [r5, #28]
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	1e3b      	subs	r3, r7, #0
 800790c:	bfaf      	iteee	ge
 800790e:	2300      	movge	r3, #0
 8007910:	2201      	movlt	r2, #1
 8007912:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007916:	9305      	strlt	r3, [sp, #20]
 8007918:	bfa8      	it	ge
 800791a:	f8c8 3000 	strge.w	r3, [r8]
 800791e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007922:	4b9d      	ldr	r3, [pc, #628]	; (8007b98 <_dtoa_r+0x2e0>)
 8007924:	bfb8      	it	lt
 8007926:	f8c8 2000 	strlt.w	r2, [r8]
 800792a:	ea33 0309 	bics.w	r3, r3, r9
 800792e:	d119      	bne.n	8007964 <_dtoa_r+0xac>
 8007930:	f242 730f 	movw	r3, #9999	; 0x270f
 8007934:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800793c:	4333      	orrs	r3, r6
 800793e:	f000 8589 	beq.w	8008454 <_dtoa_r+0xb9c>
 8007942:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007944:	b953      	cbnz	r3, 800795c <_dtoa_r+0xa4>
 8007946:	4b95      	ldr	r3, [pc, #596]	; (8007b9c <_dtoa_r+0x2e4>)
 8007948:	e023      	b.n	8007992 <_dtoa_r+0xda>
 800794a:	4b95      	ldr	r3, [pc, #596]	; (8007ba0 <_dtoa_r+0x2e8>)
 800794c:	9303      	str	r3, [sp, #12]
 800794e:	3308      	adds	r3, #8
 8007950:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	9803      	ldr	r0, [sp, #12]
 8007956:	b019      	add	sp, #100	; 0x64
 8007958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795c:	4b8f      	ldr	r3, [pc, #572]	; (8007b9c <_dtoa_r+0x2e4>)
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	3303      	adds	r3, #3
 8007962:	e7f5      	b.n	8007950 <_dtoa_r+0x98>
 8007964:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007968:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800796c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	f7f9 f884 	bl	8000a80 <__aeabi_dcmpeq>
 8007978:	4680      	mov	r8, r0
 800797a:	b160      	cbz	r0, 8007996 <_dtoa_r+0xde>
 800797c:	2301      	movs	r3, #1
 800797e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 8562 	beq.w	800844e <_dtoa_r+0xb96>
 800798a:	4b86      	ldr	r3, [pc, #536]	; (8007ba4 <_dtoa_r+0x2ec>)
 800798c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	3b01      	subs	r3, #1
 8007992:	9303      	str	r3, [sp, #12]
 8007994:	e7de      	b.n	8007954 <_dtoa_r+0x9c>
 8007996:	ab16      	add	r3, sp, #88	; 0x58
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	ab17      	add	r3, sp, #92	; 0x5c
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4628      	mov	r0, r5
 80079a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079a4:	f001 fa3c 	bl	8008e20 <__d2b>
 80079a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80079ac:	4682      	mov	sl, r0
 80079ae:	2c00      	cmp	r4, #0
 80079b0:	d07e      	beq.n	8007ab0 <_dtoa_r+0x1f8>
 80079b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80079bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80079c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80079c8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80079cc:	4619      	mov	r1, r3
 80079ce:	2200      	movs	r2, #0
 80079d0:	4b75      	ldr	r3, [pc, #468]	; (8007ba8 <_dtoa_r+0x2f0>)
 80079d2:	f7f8 fc35 	bl	8000240 <__aeabi_dsub>
 80079d6:	a368      	add	r3, pc, #416	; (adr r3, 8007b78 <_dtoa_r+0x2c0>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fde8 	bl	80005b0 <__aeabi_dmul>
 80079e0:	a367      	add	r3, pc, #412	; (adr r3, 8007b80 <_dtoa_r+0x2c8>)
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	f7f8 fc2d 	bl	8000244 <__adddf3>
 80079ea:	4606      	mov	r6, r0
 80079ec:	4620      	mov	r0, r4
 80079ee:	460f      	mov	r7, r1
 80079f0:	f7f8 fd74 	bl	80004dc <__aeabi_i2d>
 80079f4:	a364      	add	r3, pc, #400	; (adr r3, 8007b88 <_dtoa_r+0x2d0>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f7f8 fdd9 	bl	80005b0 <__aeabi_dmul>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f8 fc1d 	bl	8000244 <__adddf3>
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	f7f9 f87f 	bl	8000b10 <__aeabi_d2iz>
 8007a12:	2200      	movs	r2, #0
 8007a14:	4683      	mov	fp, r0
 8007a16:	2300      	movs	r3, #0
 8007a18:	4630      	mov	r0, r6
 8007a1a:	4639      	mov	r1, r7
 8007a1c:	f7f9 f83a 	bl	8000a94 <__aeabi_dcmplt>
 8007a20:	b148      	cbz	r0, 8007a36 <_dtoa_r+0x17e>
 8007a22:	4658      	mov	r0, fp
 8007a24:	f7f8 fd5a 	bl	80004dc <__aeabi_i2d>
 8007a28:	4632      	mov	r2, r6
 8007a2a:	463b      	mov	r3, r7
 8007a2c:	f7f9 f828 	bl	8000a80 <__aeabi_dcmpeq>
 8007a30:	b908      	cbnz	r0, 8007a36 <_dtoa_r+0x17e>
 8007a32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a36:	f1bb 0f16 	cmp.w	fp, #22
 8007a3a:	d857      	bhi.n	8007aec <_dtoa_r+0x234>
 8007a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a40:	4b5a      	ldr	r3, [pc, #360]	; (8007bac <_dtoa_r+0x2f4>)
 8007a42:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	f7f9 f823 	bl	8000a94 <__aeabi_dcmplt>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d04e      	beq.n	8007af0 <_dtoa_r+0x238>
 8007a52:	2300      	movs	r3, #0
 8007a54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a58:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a5c:	1b1b      	subs	r3, r3, r4
 8007a5e:	1e5a      	subs	r2, r3, #1
 8007a60:	bf46      	itte	mi
 8007a62:	f1c3 0901 	rsbmi	r9, r3, #1
 8007a66:	2300      	movmi	r3, #0
 8007a68:	f04f 0900 	movpl.w	r9, #0
 8007a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a6e:	bf48      	it	mi
 8007a70:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007a72:	f1bb 0f00 	cmp.w	fp, #0
 8007a76:	db3d      	blt.n	8007af4 <_dtoa_r+0x23c>
 8007a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007a7e:	445b      	add	r3, fp
 8007a80:	9309      	str	r3, [sp, #36]	; 0x24
 8007a82:	2300      	movs	r3, #0
 8007a84:	930a      	str	r3, [sp, #40]	; 0x28
 8007a86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a88:	2b09      	cmp	r3, #9
 8007a8a:	d867      	bhi.n	8007b5c <_dtoa_r+0x2a4>
 8007a8c:	2b05      	cmp	r3, #5
 8007a8e:	bfc4      	itt	gt
 8007a90:	3b04      	subgt	r3, #4
 8007a92:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a96:	bfc8      	it	gt
 8007a98:	2400      	movgt	r4, #0
 8007a9a:	f1a3 0302 	sub.w	r3, r3, #2
 8007a9e:	bfd8      	it	le
 8007aa0:	2401      	movle	r4, #1
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f200 8086 	bhi.w	8007bb4 <_dtoa_r+0x2fc>
 8007aa8:	e8df f003 	tbb	[pc, r3]
 8007aac:	5637392c 	.word	0x5637392c
 8007ab0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007ab4:	441c      	add	r4, r3
 8007ab6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	bfc1      	itttt	gt
 8007abe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ac2:	fa09 f903 	lslgt.w	r9, r9, r3
 8007ac6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007aca:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ace:	bfd6      	itet	le
 8007ad0:	f1c3 0320 	rsble	r3, r3, #32
 8007ad4:	ea49 0003 	orrgt.w	r0, r9, r3
 8007ad8:	fa06 f003 	lslle.w	r0, r6, r3
 8007adc:	f7f8 fcee 	bl	80004bc <__aeabi_ui2d>
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ae6:	3c01      	subs	r4, #1
 8007ae8:	9213      	str	r2, [sp, #76]	; 0x4c
 8007aea:	e76f      	b.n	80079cc <_dtoa_r+0x114>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7b3      	b.n	8007a58 <_dtoa_r+0x1a0>
 8007af0:	900f      	str	r0, [sp, #60]	; 0x3c
 8007af2:	e7b2      	b.n	8007a5a <_dtoa_r+0x1a2>
 8007af4:	f1cb 0300 	rsb	r3, fp, #0
 8007af8:	930a      	str	r3, [sp, #40]	; 0x28
 8007afa:	2300      	movs	r3, #0
 8007afc:	eba9 090b 	sub.w	r9, r9, fp
 8007b00:	930e      	str	r3, [sp, #56]	; 0x38
 8007b02:	e7c0      	b.n	8007a86 <_dtoa_r+0x1ce>
 8007b04:	2300      	movs	r3, #0
 8007b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dc55      	bgt.n	8007bba <_dtoa_r+0x302>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	461a      	mov	r2, r3
 8007b12:	9306      	str	r3, [sp, #24]
 8007b14:	9308      	str	r3, [sp, #32]
 8007b16:	9223      	str	r2, [sp, #140]	; 0x8c
 8007b18:	e00b      	b.n	8007b32 <_dtoa_r+0x27a>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e7f3      	b.n	8007b06 <_dtoa_r+0x24e>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b24:	445b      	add	r3, fp
 8007b26:	9306      	str	r3, [sp, #24]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	9308      	str	r3, [sp, #32]
 8007b2e:	bfb8      	it	lt
 8007b30:	2301      	movlt	r3, #1
 8007b32:	2100      	movs	r1, #0
 8007b34:	2204      	movs	r2, #4
 8007b36:	69e8      	ldr	r0, [r5, #28]
 8007b38:	f102 0614 	add.w	r6, r2, #20
 8007b3c:	429e      	cmp	r6, r3
 8007b3e:	d940      	bls.n	8007bc2 <_dtoa_r+0x30a>
 8007b40:	6041      	str	r1, [r0, #4]
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 fd98 	bl	8008678 <_Balloc>
 8007b48:	9003      	str	r0, [sp, #12]
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d13c      	bne.n	8007bc8 <_dtoa_r+0x310>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	f240 11af 	movw	r1, #431	; 0x1af
 8007b54:	4b16      	ldr	r3, [pc, #88]	; (8007bb0 <_dtoa_r+0x2f8>)
 8007b56:	e6c3      	b.n	80078e0 <_dtoa_r+0x28>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e7e1      	b.n	8007b20 <_dtoa_r+0x268>
 8007b5c:	2401      	movs	r4, #1
 8007b5e:	2300      	movs	r3, #0
 8007b60:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b62:	9322      	str	r3, [sp, #136]	; 0x88
 8007b64:	f04f 33ff 	mov.w	r3, #4294967295
 8007b68:	2200      	movs	r2, #0
 8007b6a:	9306      	str	r3, [sp, #24]
 8007b6c:	9308      	str	r3, [sp, #32]
 8007b6e:	2312      	movs	r3, #18
 8007b70:	e7d1      	b.n	8007b16 <_dtoa_r+0x25e>
 8007b72:	bf00      	nop
 8007b74:	f3af 8000 	nop.w
 8007b78:	636f4361 	.word	0x636f4361
 8007b7c:	3fd287a7 	.word	0x3fd287a7
 8007b80:	8b60c8b3 	.word	0x8b60c8b3
 8007b84:	3fc68a28 	.word	0x3fc68a28
 8007b88:	509f79fb 	.word	0x509f79fb
 8007b8c:	3fd34413 	.word	0x3fd34413
 8007b90:	0800af74 	.word	0x0800af74
 8007b94:	0800af8b 	.word	0x0800af8b
 8007b98:	7ff00000 	.word	0x7ff00000
 8007b9c:	0800af70 	.word	0x0800af70
 8007ba0:	0800af67 	.word	0x0800af67
 8007ba4:	0800af3f 	.word	0x0800af3f
 8007ba8:	3ff80000 	.word	0x3ff80000
 8007bac:	0800b078 	.word	0x0800b078
 8007bb0:	0800afe3 	.word	0x0800afe3
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb8:	e7d4      	b.n	8007b64 <_dtoa_r+0x2ac>
 8007bba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bbc:	9306      	str	r3, [sp, #24]
 8007bbe:	9308      	str	r3, [sp, #32]
 8007bc0:	e7b7      	b.n	8007b32 <_dtoa_r+0x27a>
 8007bc2:	3101      	adds	r1, #1
 8007bc4:	0052      	lsls	r2, r2, #1
 8007bc6:	e7b7      	b.n	8007b38 <_dtoa_r+0x280>
 8007bc8:	69eb      	ldr	r3, [r5, #28]
 8007bca:	9a03      	ldr	r2, [sp, #12]
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	9b08      	ldr	r3, [sp, #32]
 8007bd0:	2b0e      	cmp	r3, #14
 8007bd2:	f200 80a8 	bhi.w	8007d26 <_dtoa_r+0x46e>
 8007bd6:	2c00      	cmp	r4, #0
 8007bd8:	f000 80a5 	beq.w	8007d26 <_dtoa_r+0x46e>
 8007bdc:	f1bb 0f00 	cmp.w	fp, #0
 8007be0:	dd34      	ble.n	8007c4c <_dtoa_r+0x394>
 8007be2:	4b9a      	ldr	r3, [pc, #616]	; (8007e4c <_dtoa_r+0x594>)
 8007be4:	f00b 020f 	and.w	r2, fp, #15
 8007be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007bf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bf4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007bf8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007bfc:	d016      	beq.n	8007c2c <_dtoa_r+0x374>
 8007bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c02:	4b93      	ldr	r3, [pc, #588]	; (8007e50 <_dtoa_r+0x598>)
 8007c04:	2703      	movs	r7, #3
 8007c06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c0a:	f7f8 fdfb 	bl	8000804 <__aeabi_ddiv>
 8007c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c12:	f004 040f 	and.w	r4, r4, #15
 8007c16:	4e8e      	ldr	r6, [pc, #568]	; (8007e50 <_dtoa_r+0x598>)
 8007c18:	b954      	cbnz	r4, 8007c30 <_dtoa_r+0x378>
 8007c1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c22:	f7f8 fdef 	bl	8000804 <__aeabi_ddiv>
 8007c26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c2a:	e029      	b.n	8007c80 <_dtoa_r+0x3c8>
 8007c2c:	2702      	movs	r7, #2
 8007c2e:	e7f2      	b.n	8007c16 <_dtoa_r+0x35e>
 8007c30:	07e1      	lsls	r1, r4, #31
 8007c32:	d508      	bpl.n	8007c46 <_dtoa_r+0x38e>
 8007c34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c3c:	f7f8 fcb8 	bl	80005b0 <__aeabi_dmul>
 8007c40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c44:	3701      	adds	r7, #1
 8007c46:	1064      	asrs	r4, r4, #1
 8007c48:	3608      	adds	r6, #8
 8007c4a:	e7e5      	b.n	8007c18 <_dtoa_r+0x360>
 8007c4c:	f000 80a5 	beq.w	8007d9a <_dtoa_r+0x4e2>
 8007c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c54:	f1cb 0400 	rsb	r4, fp, #0
 8007c58:	4b7c      	ldr	r3, [pc, #496]	; (8007e4c <_dtoa_r+0x594>)
 8007c5a:	f004 020f 	and.w	r2, r4, #15
 8007c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fca3 	bl	80005b0 <__aeabi_dmul>
 8007c6a:	2702      	movs	r7, #2
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c72:	4e77      	ldr	r6, [pc, #476]	; (8007e50 <_dtoa_r+0x598>)
 8007c74:	1124      	asrs	r4, r4, #4
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	f040 8084 	bne.w	8007d84 <_dtoa_r+0x4cc>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1d2      	bne.n	8007c26 <_dtoa_r+0x36e>
 8007c80:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8087 	beq.w	8007d9e <_dtoa_r+0x4e6>
 8007c90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c94:	2200      	movs	r2, #0
 8007c96:	4b6f      	ldr	r3, [pc, #444]	; (8007e54 <_dtoa_r+0x59c>)
 8007c98:	f7f8 fefc 	bl	8000a94 <__aeabi_dcmplt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d07e      	beq.n	8007d9e <_dtoa_r+0x4e6>
 8007ca0:	9b08      	ldr	r3, [sp, #32]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d07b      	beq.n	8007d9e <_dtoa_r+0x4e6>
 8007ca6:	9b06      	ldr	r3, [sp, #24]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dd38      	ble.n	8007d1e <_dtoa_r+0x466>
 8007cac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4b69      	ldr	r3, [pc, #420]	; (8007e58 <_dtoa_r+0x5a0>)
 8007cb4:	f7f8 fc7c 	bl	80005b0 <__aeabi_dmul>
 8007cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cbc:	9c06      	ldr	r4, [sp, #24]
 8007cbe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007cc2:	3701      	adds	r7, #1
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7f8 fc09 	bl	80004dc <__aeabi_i2d>
 8007cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cce:	f7f8 fc6f 	bl	80005b0 <__aeabi_dmul>
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4b61      	ldr	r3, [pc, #388]	; (8007e5c <_dtoa_r+0x5a4>)
 8007cd6:	f7f8 fab5 	bl	8000244 <__adddf3>
 8007cda:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007cde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ce2:	9611      	str	r6, [sp, #68]	; 0x44
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	d15d      	bne.n	8007da4 <_dtoa_r+0x4ec>
 8007ce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cec:	2200      	movs	r2, #0
 8007cee:	4b5c      	ldr	r3, [pc, #368]	; (8007e60 <_dtoa_r+0x5a8>)
 8007cf0:	f7f8 faa6 	bl	8000240 <__aeabi_dsub>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cfc:	4633      	mov	r3, r6
 8007cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d00:	f7f8 fee6 	bl	8000ad0 <__aeabi_dcmpgt>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f040 8295 	bne.w	8008234 <_dtoa_r+0x97c>
 8007d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007d14:	f7f8 febe 	bl	8000a94 <__aeabi_dcmplt>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f040 8289 	bne.w	8008230 <_dtoa_r+0x978>
 8007d1e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007d22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f2c0 8151 	blt.w	8007fd0 <_dtoa_r+0x718>
 8007d2e:	f1bb 0f0e 	cmp.w	fp, #14
 8007d32:	f300 814d 	bgt.w	8007fd0 <_dtoa_r+0x718>
 8007d36:	4b45      	ldr	r3, [pc, #276]	; (8007e4c <_dtoa_r+0x594>)
 8007d38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d40:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007d44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f280 80da 	bge.w	8007f00 <_dtoa_r+0x648>
 8007d4c:	9b08      	ldr	r3, [sp, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f300 80d6 	bgt.w	8007f00 <_dtoa_r+0x648>
 8007d54:	f040 826b 	bne.w	800822e <_dtoa_r+0x976>
 8007d58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	4b40      	ldr	r3, [pc, #256]	; (8007e60 <_dtoa_r+0x5a8>)
 8007d60:	f7f8 fc26 	bl	80005b0 <__aeabi_dmul>
 8007d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d68:	f7f8 fea8 	bl	8000abc <__aeabi_dcmpge>
 8007d6c:	9c08      	ldr	r4, [sp, #32]
 8007d6e:	4626      	mov	r6, r4
 8007d70:	2800      	cmp	r0, #0
 8007d72:	f040 8241 	bne.w	80081f8 <_dtoa_r+0x940>
 8007d76:	2331      	movs	r3, #49	; 0x31
 8007d78:	9f03      	ldr	r7, [sp, #12]
 8007d7a:	f10b 0b01 	add.w	fp, fp, #1
 8007d7e:	f807 3b01 	strb.w	r3, [r7], #1
 8007d82:	e23d      	b.n	8008200 <_dtoa_r+0x948>
 8007d84:	07e2      	lsls	r2, r4, #31
 8007d86:	d505      	bpl.n	8007d94 <_dtoa_r+0x4dc>
 8007d88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d8c:	f7f8 fc10 	bl	80005b0 <__aeabi_dmul>
 8007d90:	2301      	movs	r3, #1
 8007d92:	3701      	adds	r7, #1
 8007d94:	1064      	asrs	r4, r4, #1
 8007d96:	3608      	adds	r6, #8
 8007d98:	e76d      	b.n	8007c76 <_dtoa_r+0x3be>
 8007d9a:	2702      	movs	r7, #2
 8007d9c:	e770      	b.n	8007c80 <_dtoa_r+0x3c8>
 8007d9e:	46d8      	mov	r8, fp
 8007da0:	9c08      	ldr	r4, [sp, #32]
 8007da2:	e78f      	b.n	8007cc4 <_dtoa_r+0x40c>
 8007da4:	9903      	ldr	r1, [sp, #12]
 8007da6:	4b29      	ldr	r3, [pc, #164]	; (8007e4c <_dtoa_r+0x594>)
 8007da8:	4421      	add	r1, r4
 8007daa:	9112      	str	r1, [sp, #72]	; 0x48
 8007dac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007db2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007db6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	d054      	beq.n	8007e68 <_dtoa_r+0x5b0>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	4928      	ldr	r1, [pc, #160]	; (8007e64 <_dtoa_r+0x5ac>)
 8007dc2:	f7f8 fd1f 	bl	8000804 <__aeabi_ddiv>
 8007dc6:	463b      	mov	r3, r7
 8007dc8:	4632      	mov	r2, r6
 8007dca:	f7f8 fa39 	bl	8000240 <__aeabi_dsub>
 8007dce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dd2:	9f03      	ldr	r7, [sp, #12]
 8007dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd8:	f7f8 fe9a 	bl	8000b10 <__aeabi_d2iz>
 8007ddc:	4604      	mov	r4, r0
 8007dde:	f7f8 fb7d 	bl	80004dc <__aeabi_i2d>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dea:	f7f8 fa29 	bl	8000240 <__aeabi_dsub>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	3430      	adds	r4, #48	; 0x30
 8007df4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007df8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dfc:	f807 4b01 	strb.w	r4, [r7], #1
 8007e00:	f7f8 fe48 	bl	8000a94 <__aeabi_dcmplt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d173      	bne.n	8007ef0 <_dtoa_r+0x638>
 8007e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	4911      	ldr	r1, [pc, #68]	; (8007e54 <_dtoa_r+0x59c>)
 8007e10:	f7f8 fa16 	bl	8000240 <__aeabi_dsub>
 8007e14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e18:	f7f8 fe3c 	bl	8000a94 <__aeabi_dcmplt>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f040 80b6 	bne.w	8007f8e <_dtoa_r+0x6d6>
 8007e22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e24:	429f      	cmp	r7, r3
 8007e26:	f43f af7a 	beq.w	8007d1e <_dtoa_r+0x466>
 8007e2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <_dtoa_r+0x5a0>)
 8007e32:	f7f8 fbbd 	bl	80005b0 <__aeabi_dmul>
 8007e36:	2200      	movs	r2, #0
 8007e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <_dtoa_r+0x5a0>)
 8007e42:	f7f8 fbb5 	bl	80005b0 <__aeabi_dmul>
 8007e46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e4a:	e7c3      	b.n	8007dd4 <_dtoa_r+0x51c>
 8007e4c:	0800b078 	.word	0x0800b078
 8007e50:	0800b050 	.word	0x0800b050
 8007e54:	3ff00000 	.word	0x3ff00000
 8007e58:	40240000 	.word	0x40240000
 8007e5c:	401c0000 	.word	0x401c0000
 8007e60:	40140000 	.word	0x40140000
 8007e64:	3fe00000 	.word	0x3fe00000
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fba0 	bl	80005b0 <__aeabi_dmul>
 8007e70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e76:	9c03      	ldr	r4, [sp, #12]
 8007e78:	9314      	str	r3, [sp, #80]	; 0x50
 8007e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e7e:	f7f8 fe47 	bl	8000b10 <__aeabi_d2iz>
 8007e82:	9015      	str	r0, [sp, #84]	; 0x54
 8007e84:	f7f8 fb2a 	bl	80004dc <__aeabi_i2d>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e90:	f7f8 f9d6 	bl	8000240 <__aeabi_dsub>
 8007e94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e96:	4606      	mov	r6, r0
 8007e98:	3330      	adds	r3, #48	; 0x30
 8007e9a:	f804 3b01 	strb.w	r3, [r4], #1
 8007e9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	429c      	cmp	r4, r3
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	d124      	bne.n	8007ef4 <_dtoa_r+0x63c>
 8007eaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007eae:	4baf      	ldr	r3, [pc, #700]	; (800816c <_dtoa_r+0x8b4>)
 8007eb0:	f7f8 f9c8 	bl	8000244 <__adddf3>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	f7f8 fe08 	bl	8000ad0 <__aeabi_dcmpgt>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d163      	bne.n	8007f8c <_dtoa_r+0x6d4>
 8007ec4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ec8:	2000      	movs	r0, #0
 8007eca:	49a8      	ldr	r1, [pc, #672]	; (800816c <_dtoa_r+0x8b4>)
 8007ecc:	f7f8 f9b8 	bl	8000240 <__aeabi_dsub>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	f7f8 fddc 	bl	8000a94 <__aeabi_dcmplt>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f43f af1e 	beq.w	8007d1e <_dtoa_r+0x466>
 8007ee2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007ee4:	1e7b      	subs	r3, r7, #1
 8007ee6:	9314      	str	r3, [sp, #80]	; 0x50
 8007ee8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007eec:	2b30      	cmp	r3, #48	; 0x30
 8007eee:	d0f8      	beq.n	8007ee2 <_dtoa_r+0x62a>
 8007ef0:	46c3      	mov	fp, r8
 8007ef2:	e03b      	b.n	8007f6c <_dtoa_r+0x6b4>
 8007ef4:	4b9e      	ldr	r3, [pc, #632]	; (8008170 <_dtoa_r+0x8b8>)
 8007ef6:	f7f8 fb5b 	bl	80005b0 <__aeabi_dmul>
 8007efa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007efe:	e7bc      	b.n	8007e7a <_dtoa_r+0x5c2>
 8007f00:	9f03      	ldr	r7, [sp, #12]
 8007f02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007f06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	f7f8 fc79 	bl	8000804 <__aeabi_ddiv>
 8007f12:	f7f8 fdfd 	bl	8000b10 <__aeabi_d2iz>
 8007f16:	4604      	mov	r4, r0
 8007f18:	f7f8 fae0 	bl	80004dc <__aeabi_i2d>
 8007f1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f20:	f7f8 fb46 	bl	80005b0 <__aeabi_dmul>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 f988 	bl	8000240 <__aeabi_dsub>
 8007f30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007f34:	f807 6b01 	strb.w	r6, [r7], #1
 8007f38:	9e03      	ldr	r6, [sp, #12]
 8007f3a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007f3e:	1bbe      	subs	r6, r7, r6
 8007f40:	45b4      	cmp	ip, r6
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	d136      	bne.n	8007fb6 <_dtoa_r+0x6fe>
 8007f48:	f7f8 f97c 	bl	8000244 <__adddf3>
 8007f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f50:	4680      	mov	r8, r0
 8007f52:	4689      	mov	r9, r1
 8007f54:	f7f8 fdbc 	bl	8000ad0 <__aeabi_dcmpgt>
 8007f58:	bb58      	cbnz	r0, 8007fb2 <_dtoa_r+0x6fa>
 8007f5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4649      	mov	r1, r9
 8007f62:	f7f8 fd8d 	bl	8000a80 <__aeabi_dcmpeq>
 8007f66:	b108      	cbz	r0, 8007f6c <_dtoa_r+0x6b4>
 8007f68:	07e3      	lsls	r3, r4, #31
 8007f6a:	d422      	bmi.n	8007fb2 <_dtoa_r+0x6fa>
 8007f6c:	4651      	mov	r1, sl
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 fbc2 	bl	80086f8 <_Bfree>
 8007f74:	2300      	movs	r3, #0
 8007f76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f78:	703b      	strb	r3, [r7, #0]
 8007f7a:	f10b 0301 	add.w	r3, fp, #1
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f43f ace6 	beq.w	8007954 <_dtoa_r+0x9c>
 8007f88:	601f      	str	r7, [r3, #0]
 8007f8a:	e4e3      	b.n	8007954 <_dtoa_r+0x9c>
 8007f8c:	4627      	mov	r7, r4
 8007f8e:	463b      	mov	r3, r7
 8007f90:	461f      	mov	r7, r3
 8007f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f96:	2a39      	cmp	r2, #57	; 0x39
 8007f98:	d107      	bne.n	8007faa <_dtoa_r+0x6f2>
 8007f9a:	9a03      	ldr	r2, [sp, #12]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d1f7      	bne.n	8007f90 <_dtoa_r+0x6d8>
 8007fa0:	2230      	movs	r2, #48	; 0x30
 8007fa2:	9903      	ldr	r1, [sp, #12]
 8007fa4:	f108 0801 	add.w	r8, r8, #1
 8007fa8:	700a      	strb	r2, [r1, #0]
 8007faa:	781a      	ldrb	r2, [r3, #0]
 8007fac:	3201      	adds	r2, #1
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e79e      	b.n	8007ef0 <_dtoa_r+0x638>
 8007fb2:	46d8      	mov	r8, fp
 8007fb4:	e7eb      	b.n	8007f8e <_dtoa_r+0x6d6>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4b6d      	ldr	r3, [pc, #436]	; (8008170 <_dtoa_r+0x8b8>)
 8007fba:	f7f8 faf9 	bl	80005b0 <__aeabi_dmul>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4680      	mov	r8, r0
 8007fc4:	4689      	mov	r9, r1
 8007fc6:	f7f8 fd5b 	bl	8000a80 <__aeabi_dcmpeq>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d09b      	beq.n	8007f06 <_dtoa_r+0x64e>
 8007fce:	e7cd      	b.n	8007f6c <_dtoa_r+0x6b4>
 8007fd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	f000 80c4 	beq.w	8008160 <_dtoa_r+0x8a8>
 8007fd8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007fda:	2a01      	cmp	r2, #1
 8007fdc:	f300 80a8 	bgt.w	8008130 <_dtoa_r+0x878>
 8007fe0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	f000 80a0 	beq.w	8008128 <_dtoa_r+0x870>
 8007fe8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fec:	464f      	mov	r7, r9
 8007fee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	441a      	add	r2, r3
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	4499      	add	r9, r3
 8007ffa:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffc:	f000 fc7c 	bl	80088f8 <__i2b>
 8008000:	4606      	mov	r6, r0
 8008002:	b15f      	cbz	r7, 800801c <_dtoa_r+0x764>
 8008004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	dd08      	ble.n	800801c <_dtoa_r+0x764>
 800800a:	42bb      	cmp	r3, r7
 800800c:	bfa8      	it	ge
 800800e:	463b      	movge	r3, r7
 8008010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008012:	eba9 0903 	sub.w	r9, r9, r3
 8008016:	1aff      	subs	r7, r7, r3
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	9309      	str	r3, [sp, #36]	; 0x24
 800801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801e:	b1f3      	cbz	r3, 800805e <_dtoa_r+0x7a6>
 8008020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80a0 	beq.w	8008168 <_dtoa_r+0x8b0>
 8008028:	2c00      	cmp	r4, #0
 800802a:	dd10      	ble.n	800804e <_dtoa_r+0x796>
 800802c:	4631      	mov	r1, r6
 800802e:	4622      	mov	r2, r4
 8008030:	4628      	mov	r0, r5
 8008032:	f000 fd1f 	bl	8008a74 <__pow5mult>
 8008036:	4652      	mov	r2, sl
 8008038:	4601      	mov	r1, r0
 800803a:	4606      	mov	r6, r0
 800803c:	4628      	mov	r0, r5
 800803e:	f000 fc71 	bl	8008924 <__multiply>
 8008042:	4680      	mov	r8, r0
 8008044:	4651      	mov	r1, sl
 8008046:	4628      	mov	r0, r5
 8008048:	f000 fb56 	bl	80086f8 <_Bfree>
 800804c:	46c2      	mov	sl, r8
 800804e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008050:	1b1a      	subs	r2, r3, r4
 8008052:	d004      	beq.n	800805e <_dtoa_r+0x7a6>
 8008054:	4651      	mov	r1, sl
 8008056:	4628      	mov	r0, r5
 8008058:	f000 fd0c 	bl	8008a74 <__pow5mult>
 800805c:	4682      	mov	sl, r0
 800805e:	2101      	movs	r1, #1
 8008060:	4628      	mov	r0, r5
 8008062:	f000 fc49 	bl	80088f8 <__i2b>
 8008066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008068:	4604      	mov	r4, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	f340 8082 	ble.w	8008174 <_dtoa_r+0x8bc>
 8008070:	461a      	mov	r2, r3
 8008072:	4601      	mov	r1, r0
 8008074:	4628      	mov	r0, r5
 8008076:	f000 fcfd 	bl	8008a74 <__pow5mult>
 800807a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800807c:	4604      	mov	r4, r0
 800807e:	2b01      	cmp	r3, #1
 8008080:	dd7b      	ble.n	800817a <_dtoa_r+0x8c2>
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800808c:	6918      	ldr	r0, [r3, #16]
 800808e:	f000 fbe5 	bl	800885c <__hi0bits>
 8008092:	f1c0 0020 	rsb	r0, r0, #32
 8008096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008098:	4418      	add	r0, r3
 800809a:	f010 001f 	ands.w	r0, r0, #31
 800809e:	f000 8092 	beq.w	80081c6 <_dtoa_r+0x90e>
 80080a2:	f1c0 0320 	rsb	r3, r0, #32
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	f340 8085 	ble.w	80081b6 <_dtoa_r+0x8fe>
 80080ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ae:	f1c0 001c 	rsb	r0, r0, #28
 80080b2:	4403      	add	r3, r0
 80080b4:	4481      	add	r9, r0
 80080b6:	4407      	add	r7, r0
 80080b8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ba:	f1b9 0f00 	cmp.w	r9, #0
 80080be:	dd05      	ble.n	80080cc <_dtoa_r+0x814>
 80080c0:	4651      	mov	r1, sl
 80080c2:	464a      	mov	r2, r9
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 fd2f 	bl	8008b28 <__lshift>
 80080ca:	4682      	mov	sl, r0
 80080cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	dd05      	ble.n	80080de <_dtoa_r+0x826>
 80080d2:	4621      	mov	r1, r4
 80080d4:	461a      	mov	r2, r3
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 fd26 	bl	8008b28 <__lshift>
 80080dc:	4604      	mov	r4, r0
 80080de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d072      	beq.n	80081ca <_dtoa_r+0x912>
 80080e4:	4621      	mov	r1, r4
 80080e6:	4650      	mov	r0, sl
 80080e8:	f000 fd8a 	bl	8008c00 <__mcmp>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	da6c      	bge.n	80081ca <_dtoa_r+0x912>
 80080f0:	2300      	movs	r3, #0
 80080f2:	4651      	mov	r1, sl
 80080f4:	220a      	movs	r2, #10
 80080f6:	4628      	mov	r0, r5
 80080f8:	f000 fb20 	bl	800873c <__multadd>
 80080fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080fe:	4682      	mov	sl, r0
 8008100:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 81ac 	beq.w	8008462 <_dtoa_r+0xbaa>
 800810a:	2300      	movs	r3, #0
 800810c:	4631      	mov	r1, r6
 800810e:	220a      	movs	r2, #10
 8008110:	4628      	mov	r0, r5
 8008112:	f000 fb13 	bl	800873c <__multadd>
 8008116:	9b06      	ldr	r3, [sp, #24]
 8008118:	4606      	mov	r6, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	f300 8093 	bgt.w	8008246 <_dtoa_r+0x98e>
 8008120:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008122:	2b02      	cmp	r3, #2
 8008124:	dc59      	bgt.n	80081da <_dtoa_r+0x922>
 8008126:	e08e      	b.n	8008246 <_dtoa_r+0x98e>
 8008128:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800812a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800812e:	e75d      	b.n	8007fec <_dtoa_r+0x734>
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	1e5c      	subs	r4, r3, #1
 8008134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008136:	42a3      	cmp	r3, r4
 8008138:	bfbf      	itttt	lt
 800813a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800813c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800813e:	1ae3      	sublt	r3, r4, r3
 8008140:	18d2      	addlt	r2, r2, r3
 8008142:	bfa8      	it	ge
 8008144:	1b1c      	subge	r4, r3, r4
 8008146:	9b08      	ldr	r3, [sp, #32]
 8008148:	bfbe      	ittt	lt
 800814a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800814c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800814e:	2400      	movlt	r4, #0
 8008150:	2b00      	cmp	r3, #0
 8008152:	bfb5      	itete	lt
 8008154:	eba9 0703 	sublt.w	r7, r9, r3
 8008158:	464f      	movge	r7, r9
 800815a:	2300      	movlt	r3, #0
 800815c:	9b08      	ldrge	r3, [sp, #32]
 800815e:	e747      	b.n	8007ff0 <_dtoa_r+0x738>
 8008160:	464f      	mov	r7, r9
 8008162:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008164:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008166:	e74c      	b.n	8008002 <_dtoa_r+0x74a>
 8008168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800816a:	e773      	b.n	8008054 <_dtoa_r+0x79c>
 800816c:	3fe00000 	.word	0x3fe00000
 8008170:	40240000 	.word	0x40240000
 8008174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008176:	2b01      	cmp	r3, #1
 8008178:	dc18      	bgt.n	80081ac <_dtoa_r+0x8f4>
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	b9b3      	cbnz	r3, 80081ac <_dtoa_r+0x8f4>
 800817e:	9b05      	ldr	r3, [sp, #20]
 8008180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008184:	b993      	cbnz	r3, 80081ac <_dtoa_r+0x8f4>
 8008186:	9b05      	ldr	r3, [sp, #20]
 8008188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800818c:	0d1b      	lsrs	r3, r3, #20
 800818e:	051b      	lsls	r3, r3, #20
 8008190:	b17b      	cbz	r3, 80081b2 <_dtoa_r+0x8fa>
 8008192:	f04f 0801 	mov.w	r8, #1
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	f109 0901 	add.w	r9, r9, #1
 800819c:	3301      	adds	r3, #1
 800819e:	9309      	str	r3, [sp, #36]	; 0x24
 80081a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f47f af6f 	bne.w	8008086 <_dtoa_r+0x7ce>
 80081a8:	2001      	movs	r0, #1
 80081aa:	e774      	b.n	8008096 <_dtoa_r+0x7de>
 80081ac:	f04f 0800 	mov.w	r8, #0
 80081b0:	e7f6      	b.n	80081a0 <_dtoa_r+0x8e8>
 80081b2:	4698      	mov	r8, r3
 80081b4:	e7f4      	b.n	80081a0 <_dtoa_r+0x8e8>
 80081b6:	d080      	beq.n	80080ba <_dtoa_r+0x802>
 80081b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ba:	331c      	adds	r3, #28
 80081bc:	441a      	add	r2, r3
 80081be:	4499      	add	r9, r3
 80081c0:	441f      	add	r7, r3
 80081c2:	9209      	str	r2, [sp, #36]	; 0x24
 80081c4:	e779      	b.n	80080ba <_dtoa_r+0x802>
 80081c6:	4603      	mov	r3, r0
 80081c8:	e7f6      	b.n	80081b8 <_dtoa_r+0x900>
 80081ca:	9b08      	ldr	r3, [sp, #32]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dc34      	bgt.n	800823a <_dtoa_r+0x982>
 80081d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	dd31      	ble.n	800823a <_dtoa_r+0x982>
 80081d6:	9b08      	ldr	r3, [sp, #32]
 80081d8:	9306      	str	r3, [sp, #24]
 80081da:	9b06      	ldr	r3, [sp, #24]
 80081dc:	b963      	cbnz	r3, 80081f8 <_dtoa_r+0x940>
 80081de:	4621      	mov	r1, r4
 80081e0:	2205      	movs	r2, #5
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 faaa 	bl	800873c <__multadd>
 80081e8:	4601      	mov	r1, r0
 80081ea:	4604      	mov	r4, r0
 80081ec:	4650      	mov	r0, sl
 80081ee:	f000 fd07 	bl	8008c00 <__mcmp>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	f73f adbf 	bgt.w	8007d76 <_dtoa_r+0x4be>
 80081f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081fa:	9f03      	ldr	r7, [sp, #12]
 80081fc:	ea6f 0b03 	mvn.w	fp, r3
 8008200:	f04f 0800 	mov.w	r8, #0
 8008204:	4621      	mov	r1, r4
 8008206:	4628      	mov	r0, r5
 8008208:	f000 fa76 	bl	80086f8 <_Bfree>
 800820c:	2e00      	cmp	r6, #0
 800820e:	f43f aead 	beq.w	8007f6c <_dtoa_r+0x6b4>
 8008212:	f1b8 0f00 	cmp.w	r8, #0
 8008216:	d005      	beq.n	8008224 <_dtoa_r+0x96c>
 8008218:	45b0      	cmp	r8, r6
 800821a:	d003      	beq.n	8008224 <_dtoa_r+0x96c>
 800821c:	4641      	mov	r1, r8
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fa6a 	bl	80086f8 <_Bfree>
 8008224:	4631      	mov	r1, r6
 8008226:	4628      	mov	r0, r5
 8008228:	f000 fa66 	bl	80086f8 <_Bfree>
 800822c:	e69e      	b.n	8007f6c <_dtoa_r+0x6b4>
 800822e:	2400      	movs	r4, #0
 8008230:	4626      	mov	r6, r4
 8008232:	e7e1      	b.n	80081f8 <_dtoa_r+0x940>
 8008234:	46c3      	mov	fp, r8
 8008236:	4626      	mov	r6, r4
 8008238:	e59d      	b.n	8007d76 <_dtoa_r+0x4be>
 800823a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80c8 	beq.w	80083d2 <_dtoa_r+0xb1a>
 8008242:	9b08      	ldr	r3, [sp, #32]
 8008244:	9306      	str	r3, [sp, #24]
 8008246:	2f00      	cmp	r7, #0
 8008248:	dd05      	ble.n	8008256 <_dtoa_r+0x99e>
 800824a:	4631      	mov	r1, r6
 800824c:	463a      	mov	r2, r7
 800824e:	4628      	mov	r0, r5
 8008250:	f000 fc6a 	bl	8008b28 <__lshift>
 8008254:	4606      	mov	r6, r0
 8008256:	f1b8 0f00 	cmp.w	r8, #0
 800825a:	d05b      	beq.n	8008314 <_dtoa_r+0xa5c>
 800825c:	4628      	mov	r0, r5
 800825e:	6871      	ldr	r1, [r6, #4]
 8008260:	f000 fa0a 	bl	8008678 <_Balloc>
 8008264:	4607      	mov	r7, r0
 8008266:	b928      	cbnz	r0, 8008274 <_dtoa_r+0x9bc>
 8008268:	4602      	mov	r2, r0
 800826a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800826e:	4b81      	ldr	r3, [pc, #516]	; (8008474 <_dtoa_r+0xbbc>)
 8008270:	f7ff bb36 	b.w	80078e0 <_dtoa_r+0x28>
 8008274:	6932      	ldr	r2, [r6, #16]
 8008276:	f106 010c 	add.w	r1, r6, #12
 800827a:	3202      	adds	r2, #2
 800827c:	0092      	lsls	r2, r2, #2
 800827e:	300c      	adds	r0, #12
 8008280:	f001 ff72 	bl	800a168 <memcpy>
 8008284:	2201      	movs	r2, #1
 8008286:	4639      	mov	r1, r7
 8008288:	4628      	mov	r0, r5
 800828a:	f000 fc4d 	bl	8008b28 <__lshift>
 800828e:	46b0      	mov	r8, r6
 8008290:	4606      	mov	r6, r0
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	9a03      	ldr	r2, [sp, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	9b06      	ldr	r3, [sp, #24]
 800829c:	4413      	add	r3, r2
 800829e:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	930a      	str	r3, [sp, #40]	; 0x28
 80082a8:	9b08      	ldr	r3, [sp, #32]
 80082aa:	4621      	mov	r1, r4
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4650      	mov	r0, sl
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	f7ff fa77 	bl	80077a4 <quorem>
 80082b6:	4641      	mov	r1, r8
 80082b8:	9006      	str	r0, [sp, #24]
 80082ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082be:	4650      	mov	r0, sl
 80082c0:	f000 fc9e 	bl	8008c00 <__mcmp>
 80082c4:	4632      	mov	r2, r6
 80082c6:	9009      	str	r0, [sp, #36]	; 0x24
 80082c8:	4621      	mov	r1, r4
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 fcb4 	bl	8008c38 <__mdiff>
 80082d0:	68c2      	ldr	r2, [r0, #12]
 80082d2:	4607      	mov	r7, r0
 80082d4:	bb02      	cbnz	r2, 8008318 <_dtoa_r+0xa60>
 80082d6:	4601      	mov	r1, r0
 80082d8:	4650      	mov	r0, sl
 80082da:	f000 fc91 	bl	8008c00 <__mcmp>
 80082de:	4602      	mov	r2, r0
 80082e0:	4639      	mov	r1, r7
 80082e2:	4628      	mov	r0, r5
 80082e4:	920c      	str	r2, [sp, #48]	; 0x30
 80082e6:	f000 fa07 	bl	80086f8 <_Bfree>
 80082ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ee:	9f08      	ldr	r7, [sp, #32]
 80082f0:	ea43 0102 	orr.w	r1, r3, r2
 80082f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f6:	4319      	orrs	r1, r3
 80082f8:	d110      	bne.n	800831c <_dtoa_r+0xa64>
 80082fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082fe:	d029      	beq.n	8008354 <_dtoa_r+0xa9c>
 8008300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008302:	2b00      	cmp	r3, #0
 8008304:	dd02      	ble.n	800830c <_dtoa_r+0xa54>
 8008306:	9b06      	ldr	r3, [sp, #24]
 8008308:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800830c:	9b04      	ldr	r3, [sp, #16]
 800830e:	f883 9000 	strb.w	r9, [r3]
 8008312:	e777      	b.n	8008204 <_dtoa_r+0x94c>
 8008314:	4630      	mov	r0, r6
 8008316:	e7ba      	b.n	800828e <_dtoa_r+0x9d6>
 8008318:	2201      	movs	r2, #1
 800831a:	e7e1      	b.n	80082e0 <_dtoa_r+0xa28>
 800831c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	db04      	blt.n	800832c <_dtoa_r+0xa74>
 8008322:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008324:	430b      	orrs	r3, r1
 8008326:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008328:	430b      	orrs	r3, r1
 800832a:	d120      	bne.n	800836e <_dtoa_r+0xab6>
 800832c:	2a00      	cmp	r2, #0
 800832e:	dded      	ble.n	800830c <_dtoa_r+0xa54>
 8008330:	4651      	mov	r1, sl
 8008332:	2201      	movs	r2, #1
 8008334:	4628      	mov	r0, r5
 8008336:	f000 fbf7 	bl	8008b28 <__lshift>
 800833a:	4621      	mov	r1, r4
 800833c:	4682      	mov	sl, r0
 800833e:	f000 fc5f 	bl	8008c00 <__mcmp>
 8008342:	2800      	cmp	r0, #0
 8008344:	dc03      	bgt.n	800834e <_dtoa_r+0xa96>
 8008346:	d1e1      	bne.n	800830c <_dtoa_r+0xa54>
 8008348:	f019 0f01 	tst.w	r9, #1
 800834c:	d0de      	beq.n	800830c <_dtoa_r+0xa54>
 800834e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008352:	d1d8      	bne.n	8008306 <_dtoa_r+0xa4e>
 8008354:	2339      	movs	r3, #57	; 0x39
 8008356:	9a04      	ldr	r2, [sp, #16]
 8008358:	7013      	strb	r3, [r2, #0]
 800835a:	463b      	mov	r3, r7
 800835c:	461f      	mov	r7, r3
 800835e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008362:	3b01      	subs	r3, #1
 8008364:	2a39      	cmp	r2, #57	; 0x39
 8008366:	d06b      	beq.n	8008440 <_dtoa_r+0xb88>
 8008368:	3201      	adds	r2, #1
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	e74a      	b.n	8008204 <_dtoa_r+0x94c>
 800836e:	2a00      	cmp	r2, #0
 8008370:	dd07      	ble.n	8008382 <_dtoa_r+0xaca>
 8008372:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008376:	d0ed      	beq.n	8008354 <_dtoa_r+0xa9c>
 8008378:	9a04      	ldr	r2, [sp, #16]
 800837a:	f109 0301 	add.w	r3, r9, #1
 800837e:	7013      	strb	r3, [r2, #0]
 8008380:	e740      	b.n	8008204 <_dtoa_r+0x94c>
 8008382:	9b08      	ldr	r3, [sp, #32]
 8008384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008386:	f803 9c01 	strb.w	r9, [r3, #-1]
 800838a:	4293      	cmp	r3, r2
 800838c:	d042      	beq.n	8008414 <_dtoa_r+0xb5c>
 800838e:	4651      	mov	r1, sl
 8008390:	2300      	movs	r3, #0
 8008392:	220a      	movs	r2, #10
 8008394:	4628      	mov	r0, r5
 8008396:	f000 f9d1 	bl	800873c <__multadd>
 800839a:	45b0      	cmp	r8, r6
 800839c:	4682      	mov	sl, r0
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	f04f 020a 	mov.w	r2, #10
 80083a6:	4641      	mov	r1, r8
 80083a8:	4628      	mov	r0, r5
 80083aa:	d107      	bne.n	80083bc <_dtoa_r+0xb04>
 80083ac:	f000 f9c6 	bl	800873c <__multadd>
 80083b0:	4680      	mov	r8, r0
 80083b2:	4606      	mov	r6, r0
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	3301      	adds	r3, #1
 80083b8:	9308      	str	r3, [sp, #32]
 80083ba:	e775      	b.n	80082a8 <_dtoa_r+0x9f0>
 80083bc:	f000 f9be 	bl	800873c <__multadd>
 80083c0:	4631      	mov	r1, r6
 80083c2:	4680      	mov	r8, r0
 80083c4:	2300      	movs	r3, #0
 80083c6:	220a      	movs	r2, #10
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 f9b7 	bl	800873c <__multadd>
 80083ce:	4606      	mov	r6, r0
 80083d0:	e7f0      	b.n	80083b4 <_dtoa_r+0xafc>
 80083d2:	9b08      	ldr	r3, [sp, #32]
 80083d4:	9306      	str	r3, [sp, #24]
 80083d6:	9f03      	ldr	r7, [sp, #12]
 80083d8:	4621      	mov	r1, r4
 80083da:	4650      	mov	r0, sl
 80083dc:	f7ff f9e2 	bl	80077a4 <quorem>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80083e6:	f807 9b01 	strb.w	r9, [r7], #1
 80083ea:	1afa      	subs	r2, r7, r3
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	4293      	cmp	r3, r2
 80083f0:	dd07      	ble.n	8008402 <_dtoa_r+0xb4a>
 80083f2:	4651      	mov	r1, sl
 80083f4:	2300      	movs	r3, #0
 80083f6:	220a      	movs	r2, #10
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 f99f 	bl	800873c <__multadd>
 80083fe:	4682      	mov	sl, r0
 8008400:	e7ea      	b.n	80083d8 <_dtoa_r+0xb20>
 8008402:	9b06      	ldr	r3, [sp, #24]
 8008404:	f04f 0800 	mov.w	r8, #0
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfcc      	ite	gt
 800840c:	461f      	movgt	r7, r3
 800840e:	2701      	movle	r7, #1
 8008410:	9b03      	ldr	r3, [sp, #12]
 8008412:	441f      	add	r7, r3
 8008414:	4651      	mov	r1, sl
 8008416:	2201      	movs	r2, #1
 8008418:	4628      	mov	r0, r5
 800841a:	f000 fb85 	bl	8008b28 <__lshift>
 800841e:	4621      	mov	r1, r4
 8008420:	4682      	mov	sl, r0
 8008422:	f000 fbed 	bl	8008c00 <__mcmp>
 8008426:	2800      	cmp	r0, #0
 8008428:	dc97      	bgt.n	800835a <_dtoa_r+0xaa2>
 800842a:	d102      	bne.n	8008432 <_dtoa_r+0xb7a>
 800842c:	f019 0f01 	tst.w	r9, #1
 8008430:	d193      	bne.n	800835a <_dtoa_r+0xaa2>
 8008432:	463b      	mov	r3, r7
 8008434:	461f      	mov	r7, r3
 8008436:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800843a:	2a30      	cmp	r2, #48	; 0x30
 800843c:	d0fa      	beq.n	8008434 <_dtoa_r+0xb7c>
 800843e:	e6e1      	b.n	8008204 <_dtoa_r+0x94c>
 8008440:	9a03      	ldr	r2, [sp, #12]
 8008442:	429a      	cmp	r2, r3
 8008444:	d18a      	bne.n	800835c <_dtoa_r+0xaa4>
 8008446:	2331      	movs	r3, #49	; 0x31
 8008448:	f10b 0b01 	add.w	fp, fp, #1
 800844c:	e797      	b.n	800837e <_dtoa_r+0xac6>
 800844e:	4b0a      	ldr	r3, [pc, #40]	; (8008478 <_dtoa_r+0xbc0>)
 8008450:	f7ff ba9f 	b.w	8007992 <_dtoa_r+0xda>
 8008454:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008456:	2b00      	cmp	r3, #0
 8008458:	f47f aa77 	bne.w	800794a <_dtoa_r+0x92>
 800845c:	4b07      	ldr	r3, [pc, #28]	; (800847c <_dtoa_r+0xbc4>)
 800845e:	f7ff ba98 	b.w	8007992 <_dtoa_r+0xda>
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dcb6      	bgt.n	80083d6 <_dtoa_r+0xb1e>
 8008468:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800846a:	2b02      	cmp	r3, #2
 800846c:	f73f aeb5 	bgt.w	80081da <_dtoa_r+0x922>
 8008470:	e7b1      	b.n	80083d6 <_dtoa_r+0xb1e>
 8008472:	bf00      	nop
 8008474:	0800afe3 	.word	0x0800afe3
 8008478:	0800af3e 	.word	0x0800af3e
 800847c:	0800af67 	.word	0x0800af67

08008480 <_free_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4605      	mov	r5, r0
 8008484:	2900      	cmp	r1, #0
 8008486:	d040      	beq.n	800850a <_free_r+0x8a>
 8008488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848c:	1f0c      	subs	r4, r1, #4
 800848e:	2b00      	cmp	r3, #0
 8008490:	bfb8      	it	lt
 8008492:	18e4      	addlt	r4, r4, r3
 8008494:	f000 f8e4 	bl	8008660 <__malloc_lock>
 8008498:	4a1c      	ldr	r2, [pc, #112]	; (800850c <_free_r+0x8c>)
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	b933      	cbnz	r3, 80084ac <_free_r+0x2c>
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	6014      	str	r4, [r2, #0]
 80084a2:	4628      	mov	r0, r5
 80084a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a8:	f000 b8e0 	b.w	800866c <__malloc_unlock>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d908      	bls.n	80084c2 <_free_r+0x42>
 80084b0:	6820      	ldr	r0, [r4, #0]
 80084b2:	1821      	adds	r1, r4, r0
 80084b4:	428b      	cmp	r3, r1
 80084b6:	bf01      	itttt	eq
 80084b8:	6819      	ldreq	r1, [r3, #0]
 80084ba:	685b      	ldreq	r3, [r3, #4]
 80084bc:	1809      	addeq	r1, r1, r0
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	e7ed      	b.n	800849e <_free_r+0x1e>
 80084c2:	461a      	mov	r2, r3
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	b10b      	cbz	r3, 80084cc <_free_r+0x4c>
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d9fa      	bls.n	80084c2 <_free_r+0x42>
 80084cc:	6811      	ldr	r1, [r2, #0]
 80084ce:	1850      	adds	r0, r2, r1
 80084d0:	42a0      	cmp	r0, r4
 80084d2:	d10b      	bne.n	80084ec <_free_r+0x6c>
 80084d4:	6820      	ldr	r0, [r4, #0]
 80084d6:	4401      	add	r1, r0
 80084d8:	1850      	adds	r0, r2, r1
 80084da:	4283      	cmp	r3, r0
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	d1e0      	bne.n	80084a2 <_free_r+0x22>
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	4408      	add	r0, r1
 80084e6:	6010      	str	r0, [r2, #0]
 80084e8:	6053      	str	r3, [r2, #4]
 80084ea:	e7da      	b.n	80084a2 <_free_r+0x22>
 80084ec:	d902      	bls.n	80084f4 <_free_r+0x74>
 80084ee:	230c      	movs	r3, #12
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	e7d6      	b.n	80084a2 <_free_r+0x22>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	1821      	adds	r1, r4, r0
 80084f8:	428b      	cmp	r3, r1
 80084fa:	bf01      	itttt	eq
 80084fc:	6819      	ldreq	r1, [r3, #0]
 80084fe:	685b      	ldreq	r3, [r3, #4]
 8008500:	1809      	addeq	r1, r1, r0
 8008502:	6021      	streq	r1, [r4, #0]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	6054      	str	r4, [r2, #4]
 8008508:	e7cb      	b.n	80084a2 <_free_r+0x22>
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20000714 	.word	0x20000714

08008510 <malloc>:
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <malloc+0xc>)
 8008512:	4601      	mov	r1, r0
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	f000 b823 	b.w	8008560 <_malloc_r>
 800851a:	bf00      	nop
 800851c:	20000078 	.word	0x20000078

08008520 <sbrk_aligned>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	4e0e      	ldr	r6, [pc, #56]	; (800855c <sbrk_aligned+0x3c>)
 8008524:	460c      	mov	r4, r1
 8008526:	6831      	ldr	r1, [r6, #0]
 8008528:	4605      	mov	r5, r0
 800852a:	b911      	cbnz	r1, 8008532 <sbrk_aligned+0x12>
 800852c:	f001 fe0c 	bl	800a148 <_sbrk_r>
 8008530:	6030      	str	r0, [r6, #0]
 8008532:	4621      	mov	r1, r4
 8008534:	4628      	mov	r0, r5
 8008536:	f001 fe07 	bl	800a148 <_sbrk_r>
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	d00a      	beq.n	8008554 <sbrk_aligned+0x34>
 800853e:	1cc4      	adds	r4, r0, #3
 8008540:	f024 0403 	bic.w	r4, r4, #3
 8008544:	42a0      	cmp	r0, r4
 8008546:	d007      	beq.n	8008558 <sbrk_aligned+0x38>
 8008548:	1a21      	subs	r1, r4, r0
 800854a:	4628      	mov	r0, r5
 800854c:	f001 fdfc 	bl	800a148 <_sbrk_r>
 8008550:	3001      	adds	r0, #1
 8008552:	d101      	bne.n	8008558 <sbrk_aligned+0x38>
 8008554:	f04f 34ff 	mov.w	r4, #4294967295
 8008558:	4620      	mov	r0, r4
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	20000718 	.word	0x20000718

08008560 <_malloc_r>:
 8008560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008564:	1ccd      	adds	r5, r1, #3
 8008566:	f025 0503 	bic.w	r5, r5, #3
 800856a:	3508      	adds	r5, #8
 800856c:	2d0c      	cmp	r5, #12
 800856e:	bf38      	it	cc
 8008570:	250c      	movcc	r5, #12
 8008572:	2d00      	cmp	r5, #0
 8008574:	4607      	mov	r7, r0
 8008576:	db01      	blt.n	800857c <_malloc_r+0x1c>
 8008578:	42a9      	cmp	r1, r5
 800857a:	d905      	bls.n	8008588 <_malloc_r+0x28>
 800857c:	230c      	movs	r3, #12
 800857e:	2600      	movs	r6, #0
 8008580:	603b      	str	r3, [r7, #0]
 8008582:	4630      	mov	r0, r6
 8008584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008588:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800865c <_malloc_r+0xfc>
 800858c:	f000 f868 	bl	8008660 <__malloc_lock>
 8008590:	f8d8 3000 	ldr.w	r3, [r8]
 8008594:	461c      	mov	r4, r3
 8008596:	bb5c      	cbnz	r4, 80085f0 <_malloc_r+0x90>
 8008598:	4629      	mov	r1, r5
 800859a:	4638      	mov	r0, r7
 800859c:	f7ff ffc0 	bl	8008520 <sbrk_aligned>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	4604      	mov	r4, r0
 80085a4:	d155      	bne.n	8008652 <_malloc_r+0xf2>
 80085a6:	f8d8 4000 	ldr.w	r4, [r8]
 80085aa:	4626      	mov	r6, r4
 80085ac:	2e00      	cmp	r6, #0
 80085ae:	d145      	bne.n	800863c <_malloc_r+0xdc>
 80085b0:	2c00      	cmp	r4, #0
 80085b2:	d048      	beq.n	8008646 <_malloc_r+0xe6>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	4631      	mov	r1, r6
 80085b8:	4638      	mov	r0, r7
 80085ba:	eb04 0903 	add.w	r9, r4, r3
 80085be:	f001 fdc3 	bl	800a148 <_sbrk_r>
 80085c2:	4581      	cmp	r9, r0
 80085c4:	d13f      	bne.n	8008646 <_malloc_r+0xe6>
 80085c6:	6821      	ldr	r1, [r4, #0]
 80085c8:	4638      	mov	r0, r7
 80085ca:	1a6d      	subs	r5, r5, r1
 80085cc:	4629      	mov	r1, r5
 80085ce:	f7ff ffa7 	bl	8008520 <sbrk_aligned>
 80085d2:	3001      	adds	r0, #1
 80085d4:	d037      	beq.n	8008646 <_malloc_r+0xe6>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	442b      	add	r3, r5
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	f8d8 3000 	ldr.w	r3, [r8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d038      	beq.n	8008656 <_malloc_r+0xf6>
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	42a2      	cmp	r2, r4
 80085e8:	d12b      	bne.n	8008642 <_malloc_r+0xe2>
 80085ea:	2200      	movs	r2, #0
 80085ec:	605a      	str	r2, [r3, #4]
 80085ee:	e00f      	b.n	8008610 <_malloc_r+0xb0>
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	1b52      	subs	r2, r2, r5
 80085f4:	d41f      	bmi.n	8008636 <_malloc_r+0xd6>
 80085f6:	2a0b      	cmp	r2, #11
 80085f8:	d917      	bls.n	800862a <_malloc_r+0xca>
 80085fa:	1961      	adds	r1, r4, r5
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	6025      	str	r5, [r4, #0]
 8008600:	bf18      	it	ne
 8008602:	6059      	strne	r1, [r3, #4]
 8008604:	6863      	ldr	r3, [r4, #4]
 8008606:	bf08      	it	eq
 8008608:	f8c8 1000 	streq.w	r1, [r8]
 800860c:	5162      	str	r2, [r4, r5]
 800860e:	604b      	str	r3, [r1, #4]
 8008610:	4638      	mov	r0, r7
 8008612:	f104 060b 	add.w	r6, r4, #11
 8008616:	f000 f829 	bl	800866c <__malloc_unlock>
 800861a:	f026 0607 	bic.w	r6, r6, #7
 800861e:	1d23      	adds	r3, r4, #4
 8008620:	1af2      	subs	r2, r6, r3
 8008622:	d0ae      	beq.n	8008582 <_malloc_r+0x22>
 8008624:	1b9b      	subs	r3, r3, r6
 8008626:	50a3      	str	r3, [r4, r2]
 8008628:	e7ab      	b.n	8008582 <_malloc_r+0x22>
 800862a:	42a3      	cmp	r3, r4
 800862c:	6862      	ldr	r2, [r4, #4]
 800862e:	d1dd      	bne.n	80085ec <_malloc_r+0x8c>
 8008630:	f8c8 2000 	str.w	r2, [r8]
 8008634:	e7ec      	b.n	8008610 <_malloc_r+0xb0>
 8008636:	4623      	mov	r3, r4
 8008638:	6864      	ldr	r4, [r4, #4]
 800863a:	e7ac      	b.n	8008596 <_malloc_r+0x36>
 800863c:	4634      	mov	r4, r6
 800863e:	6876      	ldr	r6, [r6, #4]
 8008640:	e7b4      	b.n	80085ac <_malloc_r+0x4c>
 8008642:	4613      	mov	r3, r2
 8008644:	e7cc      	b.n	80085e0 <_malloc_r+0x80>
 8008646:	230c      	movs	r3, #12
 8008648:	4638      	mov	r0, r7
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	f000 f80e 	bl	800866c <__malloc_unlock>
 8008650:	e797      	b.n	8008582 <_malloc_r+0x22>
 8008652:	6025      	str	r5, [r4, #0]
 8008654:	e7dc      	b.n	8008610 <_malloc_r+0xb0>
 8008656:	605b      	str	r3, [r3, #4]
 8008658:	deff      	udf	#255	; 0xff
 800865a:	bf00      	nop
 800865c:	20000714 	.word	0x20000714

08008660 <__malloc_lock>:
 8008660:	4801      	ldr	r0, [pc, #4]	; (8008668 <__malloc_lock+0x8>)
 8008662:	f7ff b88a 	b.w	800777a <__retarget_lock_acquire_recursive>
 8008666:	bf00      	nop
 8008668:	20000710 	.word	0x20000710

0800866c <__malloc_unlock>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__malloc_unlock+0x8>)
 800866e:	f7ff b885 	b.w	800777c <__retarget_lock_release_recursive>
 8008672:	bf00      	nop
 8008674:	20000710 	.word	0x20000710

08008678 <_Balloc>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	69c6      	ldr	r6, [r0, #28]
 800867c:	4604      	mov	r4, r0
 800867e:	460d      	mov	r5, r1
 8008680:	b976      	cbnz	r6, 80086a0 <_Balloc+0x28>
 8008682:	2010      	movs	r0, #16
 8008684:	f7ff ff44 	bl	8008510 <malloc>
 8008688:	4602      	mov	r2, r0
 800868a:	61e0      	str	r0, [r4, #28]
 800868c:	b920      	cbnz	r0, 8008698 <_Balloc+0x20>
 800868e:	216b      	movs	r1, #107	; 0x6b
 8008690:	4b17      	ldr	r3, [pc, #92]	; (80086f0 <_Balloc+0x78>)
 8008692:	4818      	ldr	r0, [pc, #96]	; (80086f4 <_Balloc+0x7c>)
 8008694:	f001 fd7c 	bl	800a190 <__assert_func>
 8008698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800869c:	6006      	str	r6, [r0, #0]
 800869e:	60c6      	str	r6, [r0, #12]
 80086a0:	69e6      	ldr	r6, [r4, #28]
 80086a2:	68f3      	ldr	r3, [r6, #12]
 80086a4:	b183      	cbz	r3, 80086c8 <_Balloc+0x50>
 80086a6:	69e3      	ldr	r3, [r4, #28]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086ae:	b9b8      	cbnz	r0, 80086e0 <_Balloc+0x68>
 80086b0:	2101      	movs	r1, #1
 80086b2:	fa01 f605 	lsl.w	r6, r1, r5
 80086b6:	1d72      	adds	r2, r6, #5
 80086b8:	4620      	mov	r0, r4
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	f001 fd86 	bl	800a1cc <_calloc_r>
 80086c0:	b160      	cbz	r0, 80086dc <_Balloc+0x64>
 80086c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086c6:	e00e      	b.n	80086e6 <_Balloc+0x6e>
 80086c8:	2221      	movs	r2, #33	; 0x21
 80086ca:	2104      	movs	r1, #4
 80086cc:	4620      	mov	r0, r4
 80086ce:	f001 fd7d 	bl	800a1cc <_calloc_r>
 80086d2:	69e3      	ldr	r3, [r4, #28]
 80086d4:	60f0      	str	r0, [r6, #12]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e4      	bne.n	80086a6 <_Balloc+0x2e>
 80086dc:	2000      	movs	r0, #0
 80086de:	bd70      	pop	{r4, r5, r6, pc}
 80086e0:	6802      	ldr	r2, [r0, #0]
 80086e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086e6:	2300      	movs	r3, #0
 80086e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086ec:	e7f7      	b.n	80086de <_Balloc+0x66>
 80086ee:	bf00      	nop
 80086f0:	0800af74 	.word	0x0800af74
 80086f4:	0800aff4 	.word	0x0800aff4

080086f8 <_Bfree>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	69c6      	ldr	r6, [r0, #28]
 80086fc:	4605      	mov	r5, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	b976      	cbnz	r6, 8008720 <_Bfree+0x28>
 8008702:	2010      	movs	r0, #16
 8008704:	f7ff ff04 	bl	8008510 <malloc>
 8008708:	4602      	mov	r2, r0
 800870a:	61e8      	str	r0, [r5, #28]
 800870c:	b920      	cbnz	r0, 8008718 <_Bfree+0x20>
 800870e:	218f      	movs	r1, #143	; 0x8f
 8008710:	4b08      	ldr	r3, [pc, #32]	; (8008734 <_Bfree+0x3c>)
 8008712:	4809      	ldr	r0, [pc, #36]	; (8008738 <_Bfree+0x40>)
 8008714:	f001 fd3c 	bl	800a190 <__assert_func>
 8008718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800871c:	6006      	str	r6, [r0, #0]
 800871e:	60c6      	str	r6, [r0, #12]
 8008720:	b13c      	cbz	r4, 8008732 <_Bfree+0x3a>
 8008722:	69eb      	ldr	r3, [r5, #28]
 8008724:	6862      	ldr	r2, [r4, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800872c:	6021      	str	r1, [r4, #0]
 800872e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	0800af74 	.word	0x0800af74
 8008738:	0800aff4 	.word	0x0800aff4

0800873c <__multadd>:
 800873c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008740:	4607      	mov	r7, r0
 8008742:	460c      	mov	r4, r1
 8008744:	461e      	mov	r6, r3
 8008746:	2000      	movs	r0, #0
 8008748:	690d      	ldr	r5, [r1, #16]
 800874a:	f101 0c14 	add.w	ip, r1, #20
 800874e:	f8dc 3000 	ldr.w	r3, [ip]
 8008752:	3001      	adds	r0, #1
 8008754:	b299      	uxth	r1, r3
 8008756:	fb02 6101 	mla	r1, r2, r1, r6
 800875a:	0c1e      	lsrs	r6, r3, #16
 800875c:	0c0b      	lsrs	r3, r1, #16
 800875e:	fb02 3306 	mla	r3, r2, r6, r3
 8008762:	b289      	uxth	r1, r1
 8008764:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008768:	4285      	cmp	r5, r0
 800876a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800876e:	f84c 1b04 	str.w	r1, [ip], #4
 8008772:	dcec      	bgt.n	800874e <__multadd+0x12>
 8008774:	b30e      	cbz	r6, 80087ba <__multadd+0x7e>
 8008776:	68a3      	ldr	r3, [r4, #8]
 8008778:	42ab      	cmp	r3, r5
 800877a:	dc19      	bgt.n	80087b0 <__multadd+0x74>
 800877c:	6861      	ldr	r1, [r4, #4]
 800877e:	4638      	mov	r0, r7
 8008780:	3101      	adds	r1, #1
 8008782:	f7ff ff79 	bl	8008678 <_Balloc>
 8008786:	4680      	mov	r8, r0
 8008788:	b928      	cbnz	r0, 8008796 <__multadd+0x5a>
 800878a:	4602      	mov	r2, r0
 800878c:	21ba      	movs	r1, #186	; 0xba
 800878e:	4b0c      	ldr	r3, [pc, #48]	; (80087c0 <__multadd+0x84>)
 8008790:	480c      	ldr	r0, [pc, #48]	; (80087c4 <__multadd+0x88>)
 8008792:	f001 fcfd 	bl	800a190 <__assert_func>
 8008796:	6922      	ldr	r2, [r4, #16]
 8008798:	f104 010c 	add.w	r1, r4, #12
 800879c:	3202      	adds	r2, #2
 800879e:	0092      	lsls	r2, r2, #2
 80087a0:	300c      	adds	r0, #12
 80087a2:	f001 fce1 	bl	800a168 <memcpy>
 80087a6:	4621      	mov	r1, r4
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff ffa5 	bl	80086f8 <_Bfree>
 80087ae:	4644      	mov	r4, r8
 80087b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087b4:	3501      	adds	r5, #1
 80087b6:	615e      	str	r6, [r3, #20]
 80087b8:	6125      	str	r5, [r4, #16]
 80087ba:	4620      	mov	r0, r4
 80087bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c0:	0800afe3 	.word	0x0800afe3
 80087c4:	0800aff4 	.word	0x0800aff4

080087c8 <__s2b>:
 80087c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087cc:	4615      	mov	r5, r2
 80087ce:	2209      	movs	r2, #9
 80087d0:	461f      	mov	r7, r3
 80087d2:	3308      	adds	r3, #8
 80087d4:	460c      	mov	r4, r1
 80087d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80087da:	4606      	mov	r6, r0
 80087dc:	2201      	movs	r2, #1
 80087de:	2100      	movs	r1, #0
 80087e0:	429a      	cmp	r2, r3
 80087e2:	db09      	blt.n	80087f8 <__s2b+0x30>
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7ff ff47 	bl	8008678 <_Balloc>
 80087ea:	b940      	cbnz	r0, 80087fe <__s2b+0x36>
 80087ec:	4602      	mov	r2, r0
 80087ee:	21d3      	movs	r1, #211	; 0xd3
 80087f0:	4b18      	ldr	r3, [pc, #96]	; (8008854 <__s2b+0x8c>)
 80087f2:	4819      	ldr	r0, [pc, #100]	; (8008858 <__s2b+0x90>)
 80087f4:	f001 fccc 	bl	800a190 <__assert_func>
 80087f8:	0052      	lsls	r2, r2, #1
 80087fa:	3101      	adds	r1, #1
 80087fc:	e7f0      	b.n	80087e0 <__s2b+0x18>
 80087fe:	9b08      	ldr	r3, [sp, #32]
 8008800:	2d09      	cmp	r5, #9
 8008802:	6143      	str	r3, [r0, #20]
 8008804:	f04f 0301 	mov.w	r3, #1
 8008808:	6103      	str	r3, [r0, #16]
 800880a:	dd16      	ble.n	800883a <__s2b+0x72>
 800880c:	f104 0909 	add.w	r9, r4, #9
 8008810:	46c8      	mov	r8, r9
 8008812:	442c      	add	r4, r5
 8008814:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008818:	4601      	mov	r1, r0
 800881a:	220a      	movs	r2, #10
 800881c:	4630      	mov	r0, r6
 800881e:	3b30      	subs	r3, #48	; 0x30
 8008820:	f7ff ff8c 	bl	800873c <__multadd>
 8008824:	45a0      	cmp	r8, r4
 8008826:	d1f5      	bne.n	8008814 <__s2b+0x4c>
 8008828:	f1a5 0408 	sub.w	r4, r5, #8
 800882c:	444c      	add	r4, r9
 800882e:	1b2d      	subs	r5, r5, r4
 8008830:	1963      	adds	r3, r4, r5
 8008832:	42bb      	cmp	r3, r7
 8008834:	db04      	blt.n	8008840 <__s2b+0x78>
 8008836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883a:	2509      	movs	r5, #9
 800883c:	340a      	adds	r4, #10
 800883e:	e7f6      	b.n	800882e <__s2b+0x66>
 8008840:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008844:	4601      	mov	r1, r0
 8008846:	220a      	movs	r2, #10
 8008848:	4630      	mov	r0, r6
 800884a:	3b30      	subs	r3, #48	; 0x30
 800884c:	f7ff ff76 	bl	800873c <__multadd>
 8008850:	e7ee      	b.n	8008830 <__s2b+0x68>
 8008852:	bf00      	nop
 8008854:	0800afe3 	.word	0x0800afe3
 8008858:	0800aff4 	.word	0x0800aff4

0800885c <__hi0bits>:
 800885c:	0c02      	lsrs	r2, r0, #16
 800885e:	0412      	lsls	r2, r2, #16
 8008860:	4603      	mov	r3, r0
 8008862:	b9ca      	cbnz	r2, 8008898 <__hi0bits+0x3c>
 8008864:	0403      	lsls	r3, r0, #16
 8008866:	2010      	movs	r0, #16
 8008868:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800886c:	bf04      	itt	eq
 800886e:	021b      	lsleq	r3, r3, #8
 8008870:	3008      	addeq	r0, #8
 8008872:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008876:	bf04      	itt	eq
 8008878:	011b      	lsleq	r3, r3, #4
 800887a:	3004      	addeq	r0, #4
 800887c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008880:	bf04      	itt	eq
 8008882:	009b      	lsleq	r3, r3, #2
 8008884:	3002      	addeq	r0, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	db05      	blt.n	8008896 <__hi0bits+0x3a>
 800888a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800888e:	f100 0001 	add.w	r0, r0, #1
 8008892:	bf08      	it	eq
 8008894:	2020      	moveq	r0, #32
 8008896:	4770      	bx	lr
 8008898:	2000      	movs	r0, #0
 800889a:	e7e5      	b.n	8008868 <__hi0bits+0xc>

0800889c <__lo0bits>:
 800889c:	6803      	ldr	r3, [r0, #0]
 800889e:	4602      	mov	r2, r0
 80088a0:	f013 0007 	ands.w	r0, r3, #7
 80088a4:	d00b      	beq.n	80088be <__lo0bits+0x22>
 80088a6:	07d9      	lsls	r1, r3, #31
 80088a8:	d421      	bmi.n	80088ee <__lo0bits+0x52>
 80088aa:	0798      	lsls	r0, r3, #30
 80088ac:	bf49      	itett	mi
 80088ae:	085b      	lsrmi	r3, r3, #1
 80088b0:	089b      	lsrpl	r3, r3, #2
 80088b2:	2001      	movmi	r0, #1
 80088b4:	6013      	strmi	r3, [r2, #0]
 80088b6:	bf5c      	itt	pl
 80088b8:	2002      	movpl	r0, #2
 80088ba:	6013      	strpl	r3, [r2, #0]
 80088bc:	4770      	bx	lr
 80088be:	b299      	uxth	r1, r3
 80088c0:	b909      	cbnz	r1, 80088c6 <__lo0bits+0x2a>
 80088c2:	2010      	movs	r0, #16
 80088c4:	0c1b      	lsrs	r3, r3, #16
 80088c6:	b2d9      	uxtb	r1, r3
 80088c8:	b909      	cbnz	r1, 80088ce <__lo0bits+0x32>
 80088ca:	3008      	adds	r0, #8
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	0719      	lsls	r1, r3, #28
 80088d0:	bf04      	itt	eq
 80088d2:	091b      	lsreq	r3, r3, #4
 80088d4:	3004      	addeq	r0, #4
 80088d6:	0799      	lsls	r1, r3, #30
 80088d8:	bf04      	itt	eq
 80088da:	089b      	lsreq	r3, r3, #2
 80088dc:	3002      	addeq	r0, #2
 80088de:	07d9      	lsls	r1, r3, #31
 80088e0:	d403      	bmi.n	80088ea <__lo0bits+0x4e>
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	f100 0001 	add.w	r0, r0, #1
 80088e8:	d003      	beq.n	80088f2 <__lo0bits+0x56>
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	4770      	bx	lr
 80088ee:	2000      	movs	r0, #0
 80088f0:	4770      	bx	lr
 80088f2:	2020      	movs	r0, #32
 80088f4:	4770      	bx	lr
	...

080088f8 <__i2b>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	460c      	mov	r4, r1
 80088fc:	2101      	movs	r1, #1
 80088fe:	f7ff febb 	bl	8008678 <_Balloc>
 8008902:	4602      	mov	r2, r0
 8008904:	b928      	cbnz	r0, 8008912 <__i2b+0x1a>
 8008906:	f240 1145 	movw	r1, #325	; 0x145
 800890a:	4b04      	ldr	r3, [pc, #16]	; (800891c <__i2b+0x24>)
 800890c:	4804      	ldr	r0, [pc, #16]	; (8008920 <__i2b+0x28>)
 800890e:	f001 fc3f 	bl	800a190 <__assert_func>
 8008912:	2301      	movs	r3, #1
 8008914:	6144      	str	r4, [r0, #20]
 8008916:	6103      	str	r3, [r0, #16]
 8008918:	bd10      	pop	{r4, pc}
 800891a:	bf00      	nop
 800891c:	0800afe3 	.word	0x0800afe3
 8008920:	0800aff4 	.word	0x0800aff4

08008924 <__multiply>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	4691      	mov	r9, r2
 800892a:	690a      	ldr	r2, [r1, #16]
 800892c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008930:	460c      	mov	r4, r1
 8008932:	429a      	cmp	r2, r3
 8008934:	bfbe      	ittt	lt
 8008936:	460b      	movlt	r3, r1
 8008938:	464c      	movlt	r4, r9
 800893a:	4699      	movlt	r9, r3
 800893c:	6927      	ldr	r7, [r4, #16]
 800893e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	6861      	ldr	r1, [r4, #4]
 8008946:	eb07 060a 	add.w	r6, r7, sl
 800894a:	42b3      	cmp	r3, r6
 800894c:	b085      	sub	sp, #20
 800894e:	bfb8      	it	lt
 8008950:	3101      	addlt	r1, #1
 8008952:	f7ff fe91 	bl	8008678 <_Balloc>
 8008956:	b930      	cbnz	r0, 8008966 <__multiply+0x42>
 8008958:	4602      	mov	r2, r0
 800895a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800895e:	4b43      	ldr	r3, [pc, #268]	; (8008a6c <__multiply+0x148>)
 8008960:	4843      	ldr	r0, [pc, #268]	; (8008a70 <__multiply+0x14c>)
 8008962:	f001 fc15 	bl	800a190 <__assert_func>
 8008966:	f100 0514 	add.w	r5, r0, #20
 800896a:	462b      	mov	r3, r5
 800896c:	2200      	movs	r2, #0
 800896e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008972:	4543      	cmp	r3, r8
 8008974:	d321      	bcc.n	80089ba <__multiply+0x96>
 8008976:	f104 0314 	add.w	r3, r4, #20
 800897a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800897e:	f109 0314 	add.w	r3, r9, #20
 8008982:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008986:	9202      	str	r2, [sp, #8]
 8008988:	1b3a      	subs	r2, r7, r4
 800898a:	3a15      	subs	r2, #21
 800898c:	f022 0203 	bic.w	r2, r2, #3
 8008990:	3204      	adds	r2, #4
 8008992:	f104 0115 	add.w	r1, r4, #21
 8008996:	428f      	cmp	r7, r1
 8008998:	bf38      	it	cc
 800899a:	2204      	movcc	r2, #4
 800899c:	9201      	str	r2, [sp, #4]
 800899e:	9a02      	ldr	r2, [sp, #8]
 80089a0:	9303      	str	r3, [sp, #12]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d80c      	bhi.n	80089c0 <__multiply+0x9c>
 80089a6:	2e00      	cmp	r6, #0
 80089a8:	dd03      	ble.n	80089b2 <__multiply+0x8e>
 80089aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d05a      	beq.n	8008a68 <__multiply+0x144>
 80089b2:	6106      	str	r6, [r0, #16]
 80089b4:	b005      	add	sp, #20
 80089b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ba:	f843 2b04 	str.w	r2, [r3], #4
 80089be:	e7d8      	b.n	8008972 <__multiply+0x4e>
 80089c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80089c4:	f1ba 0f00 	cmp.w	sl, #0
 80089c8:	d023      	beq.n	8008a12 <__multiply+0xee>
 80089ca:	46a9      	mov	r9, r5
 80089cc:	f04f 0c00 	mov.w	ip, #0
 80089d0:	f104 0e14 	add.w	lr, r4, #20
 80089d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089d8:	f8d9 1000 	ldr.w	r1, [r9]
 80089dc:	fa1f fb82 	uxth.w	fp, r2
 80089e0:	b289      	uxth	r1, r1
 80089e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80089e6:	4461      	add	r1, ip
 80089e8:	f8d9 c000 	ldr.w	ip, [r9]
 80089ec:	0c12      	lsrs	r2, r2, #16
 80089ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80089f2:	fb0a c202 	mla	r2, sl, r2, ip
 80089f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089fa:	b289      	uxth	r1, r1
 80089fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a00:	4577      	cmp	r7, lr
 8008a02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a06:	f849 1b04 	str.w	r1, [r9], #4
 8008a0a:	d8e3      	bhi.n	80089d4 <__multiply+0xb0>
 8008a0c:	9a01      	ldr	r2, [sp, #4]
 8008a0e:	f845 c002 	str.w	ip, [r5, r2]
 8008a12:	9a03      	ldr	r2, [sp, #12]
 8008a14:	3304      	adds	r3, #4
 8008a16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a1a:	f1b9 0f00 	cmp.w	r9, #0
 8008a1e:	d021      	beq.n	8008a64 <__multiply+0x140>
 8008a20:	46ae      	mov	lr, r5
 8008a22:	f04f 0a00 	mov.w	sl, #0
 8008a26:	6829      	ldr	r1, [r5, #0]
 8008a28:	f104 0c14 	add.w	ip, r4, #20
 8008a2c:	f8bc b000 	ldrh.w	fp, [ip]
 8008a30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a34:	b289      	uxth	r1, r1
 8008a36:	fb09 220b 	mla	r2, r9, fp, r2
 8008a3a:	4452      	add	r2, sl
 8008a3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a40:	f84e 1b04 	str.w	r1, [lr], #4
 8008a44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a4c:	f8be 1000 	ldrh.w	r1, [lr]
 8008a50:	4567      	cmp	r7, ip
 8008a52:	fb09 110a 	mla	r1, r9, sl, r1
 8008a56:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008a5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a5e:	d8e5      	bhi.n	8008a2c <__multiply+0x108>
 8008a60:	9a01      	ldr	r2, [sp, #4]
 8008a62:	50a9      	str	r1, [r5, r2]
 8008a64:	3504      	adds	r5, #4
 8008a66:	e79a      	b.n	800899e <__multiply+0x7a>
 8008a68:	3e01      	subs	r6, #1
 8008a6a:	e79c      	b.n	80089a6 <__multiply+0x82>
 8008a6c:	0800afe3 	.word	0x0800afe3
 8008a70:	0800aff4 	.word	0x0800aff4

08008a74 <__pow5mult>:
 8008a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a78:	4615      	mov	r5, r2
 8008a7a:	f012 0203 	ands.w	r2, r2, #3
 8008a7e:	4606      	mov	r6, r0
 8008a80:	460f      	mov	r7, r1
 8008a82:	d007      	beq.n	8008a94 <__pow5mult+0x20>
 8008a84:	4c25      	ldr	r4, [pc, #148]	; (8008b1c <__pow5mult+0xa8>)
 8008a86:	3a01      	subs	r2, #1
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a8e:	f7ff fe55 	bl	800873c <__multadd>
 8008a92:	4607      	mov	r7, r0
 8008a94:	10ad      	asrs	r5, r5, #2
 8008a96:	d03d      	beq.n	8008b14 <__pow5mult+0xa0>
 8008a98:	69f4      	ldr	r4, [r6, #28]
 8008a9a:	b97c      	cbnz	r4, 8008abc <__pow5mult+0x48>
 8008a9c:	2010      	movs	r0, #16
 8008a9e:	f7ff fd37 	bl	8008510 <malloc>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	61f0      	str	r0, [r6, #28]
 8008aa6:	b928      	cbnz	r0, 8008ab4 <__pow5mult+0x40>
 8008aa8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008aac:	4b1c      	ldr	r3, [pc, #112]	; (8008b20 <__pow5mult+0xac>)
 8008aae:	481d      	ldr	r0, [pc, #116]	; (8008b24 <__pow5mult+0xb0>)
 8008ab0:	f001 fb6e 	bl	800a190 <__assert_func>
 8008ab4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ab8:	6004      	str	r4, [r0, #0]
 8008aba:	60c4      	str	r4, [r0, #12]
 8008abc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008ac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ac4:	b94c      	cbnz	r4, 8008ada <__pow5mult+0x66>
 8008ac6:	f240 2171 	movw	r1, #625	; 0x271
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff ff14 	bl	80088f8 <__i2b>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ad8:	6003      	str	r3, [r0, #0]
 8008ada:	f04f 0900 	mov.w	r9, #0
 8008ade:	07eb      	lsls	r3, r5, #31
 8008ae0:	d50a      	bpl.n	8008af8 <__pow5mult+0x84>
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7ff ff1c 	bl	8008924 <__multiply>
 8008aec:	4680      	mov	r8, r0
 8008aee:	4639      	mov	r1, r7
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7ff fe01 	bl	80086f8 <_Bfree>
 8008af6:	4647      	mov	r7, r8
 8008af8:	106d      	asrs	r5, r5, #1
 8008afa:	d00b      	beq.n	8008b14 <__pow5mult+0xa0>
 8008afc:	6820      	ldr	r0, [r4, #0]
 8008afe:	b938      	cbnz	r0, 8008b10 <__pow5mult+0x9c>
 8008b00:	4622      	mov	r2, r4
 8008b02:	4621      	mov	r1, r4
 8008b04:	4630      	mov	r0, r6
 8008b06:	f7ff ff0d 	bl	8008924 <__multiply>
 8008b0a:	6020      	str	r0, [r4, #0]
 8008b0c:	f8c0 9000 	str.w	r9, [r0]
 8008b10:	4604      	mov	r4, r0
 8008b12:	e7e4      	b.n	8008ade <__pow5mult+0x6a>
 8008b14:	4638      	mov	r0, r7
 8008b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b1a:	bf00      	nop
 8008b1c:	0800b140 	.word	0x0800b140
 8008b20:	0800af74 	.word	0x0800af74
 8008b24:	0800aff4 	.word	0x0800aff4

08008b28 <__lshift>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	4607      	mov	r7, r0
 8008b30:	4691      	mov	r9, r2
 8008b32:	6923      	ldr	r3, [r4, #16]
 8008b34:	6849      	ldr	r1, [r1, #4]
 8008b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b40:	f108 0601 	add.w	r6, r8, #1
 8008b44:	42b3      	cmp	r3, r6
 8008b46:	db0b      	blt.n	8008b60 <__lshift+0x38>
 8008b48:	4638      	mov	r0, r7
 8008b4a:	f7ff fd95 	bl	8008678 <_Balloc>
 8008b4e:	4605      	mov	r5, r0
 8008b50:	b948      	cbnz	r0, 8008b66 <__lshift+0x3e>
 8008b52:	4602      	mov	r2, r0
 8008b54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008b58:	4b27      	ldr	r3, [pc, #156]	; (8008bf8 <__lshift+0xd0>)
 8008b5a:	4828      	ldr	r0, [pc, #160]	; (8008bfc <__lshift+0xd4>)
 8008b5c:	f001 fb18 	bl	800a190 <__assert_func>
 8008b60:	3101      	adds	r1, #1
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	e7ee      	b.n	8008b44 <__lshift+0x1c>
 8008b66:	2300      	movs	r3, #0
 8008b68:	f100 0114 	add.w	r1, r0, #20
 8008b6c:	f100 0210 	add.w	r2, r0, #16
 8008b70:	4618      	mov	r0, r3
 8008b72:	4553      	cmp	r3, sl
 8008b74:	db33      	blt.n	8008bde <__lshift+0xb6>
 8008b76:	6920      	ldr	r0, [r4, #16]
 8008b78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b7c:	f104 0314 	add.w	r3, r4, #20
 8008b80:	f019 091f 	ands.w	r9, r9, #31
 8008b84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b8c:	d02b      	beq.n	8008be6 <__lshift+0xbe>
 8008b8e:	468a      	mov	sl, r1
 8008b90:	2200      	movs	r2, #0
 8008b92:	f1c9 0e20 	rsb	lr, r9, #32
 8008b96:	6818      	ldr	r0, [r3, #0]
 8008b98:	fa00 f009 	lsl.w	r0, r0, r9
 8008b9c:	4310      	orrs	r0, r2
 8008b9e:	f84a 0b04 	str.w	r0, [sl], #4
 8008ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba6:	459c      	cmp	ip, r3
 8008ba8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bac:	d8f3      	bhi.n	8008b96 <__lshift+0x6e>
 8008bae:	ebac 0304 	sub.w	r3, ip, r4
 8008bb2:	3b15      	subs	r3, #21
 8008bb4:	f023 0303 	bic.w	r3, r3, #3
 8008bb8:	3304      	adds	r3, #4
 8008bba:	f104 0015 	add.w	r0, r4, #21
 8008bbe:	4584      	cmp	ip, r0
 8008bc0:	bf38      	it	cc
 8008bc2:	2304      	movcc	r3, #4
 8008bc4:	50ca      	str	r2, [r1, r3]
 8008bc6:	b10a      	cbz	r2, 8008bcc <__lshift+0xa4>
 8008bc8:	f108 0602 	add.w	r6, r8, #2
 8008bcc:	3e01      	subs	r6, #1
 8008bce:	4638      	mov	r0, r7
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	612e      	str	r6, [r5, #16]
 8008bd4:	f7ff fd90 	bl	80086f8 <_Bfree>
 8008bd8:	4628      	mov	r0, r5
 8008bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bde:	f842 0f04 	str.w	r0, [r2, #4]!
 8008be2:	3301      	adds	r3, #1
 8008be4:	e7c5      	b.n	8008b72 <__lshift+0x4a>
 8008be6:	3904      	subs	r1, #4
 8008be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bec:	459c      	cmp	ip, r3
 8008bee:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bf2:	d8f9      	bhi.n	8008be8 <__lshift+0xc0>
 8008bf4:	e7ea      	b.n	8008bcc <__lshift+0xa4>
 8008bf6:	bf00      	nop
 8008bf8:	0800afe3 	.word	0x0800afe3
 8008bfc:	0800aff4 	.word	0x0800aff4

08008c00 <__mcmp>:
 8008c00:	4603      	mov	r3, r0
 8008c02:	690a      	ldr	r2, [r1, #16]
 8008c04:	6900      	ldr	r0, [r0, #16]
 8008c06:	b530      	push	{r4, r5, lr}
 8008c08:	1a80      	subs	r0, r0, r2
 8008c0a:	d10d      	bne.n	8008c28 <__mcmp+0x28>
 8008c0c:	3314      	adds	r3, #20
 8008c0e:	3114      	adds	r1, #20
 8008c10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c20:	4295      	cmp	r5, r2
 8008c22:	d002      	beq.n	8008c2a <__mcmp+0x2a>
 8008c24:	d304      	bcc.n	8008c30 <__mcmp+0x30>
 8008c26:	2001      	movs	r0, #1
 8008c28:	bd30      	pop	{r4, r5, pc}
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	d3f4      	bcc.n	8008c18 <__mcmp+0x18>
 8008c2e:	e7fb      	b.n	8008c28 <__mcmp+0x28>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	e7f8      	b.n	8008c28 <__mcmp+0x28>
	...

08008c38 <__mdiff>:
 8008c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	460d      	mov	r5, r1
 8008c3e:	4607      	mov	r7, r0
 8008c40:	4611      	mov	r1, r2
 8008c42:	4628      	mov	r0, r5
 8008c44:	4614      	mov	r4, r2
 8008c46:	f7ff ffdb 	bl	8008c00 <__mcmp>
 8008c4a:	1e06      	subs	r6, r0, #0
 8008c4c:	d111      	bne.n	8008c72 <__mdiff+0x3a>
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff fd11 	bl	8008678 <_Balloc>
 8008c56:	4602      	mov	r2, r0
 8008c58:	b928      	cbnz	r0, 8008c66 <__mdiff+0x2e>
 8008c5a:	f240 2137 	movw	r1, #567	; 0x237
 8008c5e:	4b3a      	ldr	r3, [pc, #232]	; (8008d48 <__mdiff+0x110>)
 8008c60:	483a      	ldr	r0, [pc, #232]	; (8008d4c <__mdiff+0x114>)
 8008c62:	f001 fa95 	bl	800a190 <__assert_func>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c72:	bfa4      	itt	ge
 8008c74:	4623      	movge	r3, r4
 8008c76:	462c      	movge	r4, r5
 8008c78:	4638      	mov	r0, r7
 8008c7a:	6861      	ldr	r1, [r4, #4]
 8008c7c:	bfa6      	itte	ge
 8008c7e:	461d      	movge	r5, r3
 8008c80:	2600      	movge	r6, #0
 8008c82:	2601      	movlt	r6, #1
 8008c84:	f7ff fcf8 	bl	8008678 <_Balloc>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	b918      	cbnz	r0, 8008c94 <__mdiff+0x5c>
 8008c8c:	f240 2145 	movw	r1, #581	; 0x245
 8008c90:	4b2d      	ldr	r3, [pc, #180]	; (8008d48 <__mdiff+0x110>)
 8008c92:	e7e5      	b.n	8008c60 <__mdiff+0x28>
 8008c94:	f102 0814 	add.w	r8, r2, #20
 8008c98:	46c2      	mov	sl, r8
 8008c9a:	f04f 0c00 	mov.w	ip, #0
 8008c9e:	6927      	ldr	r7, [r4, #16]
 8008ca0:	60c6      	str	r6, [r0, #12]
 8008ca2:	692e      	ldr	r6, [r5, #16]
 8008ca4:	f104 0014 	add.w	r0, r4, #20
 8008ca8:	f105 0914 	add.w	r9, r5, #20
 8008cac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008cb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cb4:	3410      	adds	r4, #16
 8008cb6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008cba:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cbe:	fa1f f18b 	uxth.w	r1, fp
 8008cc2:	4461      	add	r1, ip
 8008cc4:	fa1f fc83 	uxth.w	ip, r3
 8008cc8:	0c1b      	lsrs	r3, r3, #16
 8008cca:	eba1 010c 	sub.w	r1, r1, ip
 8008cce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cd2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008cd6:	b289      	uxth	r1, r1
 8008cd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cdc:	454e      	cmp	r6, r9
 8008cde:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008ce2:	f84a 1b04 	str.w	r1, [sl], #4
 8008ce6:	d8e6      	bhi.n	8008cb6 <__mdiff+0x7e>
 8008ce8:	1b73      	subs	r3, r6, r5
 8008cea:	3b15      	subs	r3, #21
 8008cec:	f023 0303 	bic.w	r3, r3, #3
 8008cf0:	3515      	adds	r5, #21
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	42ae      	cmp	r6, r5
 8008cf6:	bf38      	it	cc
 8008cf8:	2304      	movcc	r3, #4
 8008cfa:	4418      	add	r0, r3
 8008cfc:	4443      	add	r3, r8
 8008cfe:	461e      	mov	r6, r3
 8008d00:	4605      	mov	r5, r0
 8008d02:	4575      	cmp	r5, lr
 8008d04:	d30e      	bcc.n	8008d24 <__mdiff+0xec>
 8008d06:	f10e 0103 	add.w	r1, lr, #3
 8008d0a:	1a09      	subs	r1, r1, r0
 8008d0c:	f021 0103 	bic.w	r1, r1, #3
 8008d10:	3803      	subs	r0, #3
 8008d12:	4586      	cmp	lr, r0
 8008d14:	bf38      	it	cc
 8008d16:	2100      	movcc	r1, #0
 8008d18:	440b      	add	r3, r1
 8008d1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d1e:	b189      	cbz	r1, 8008d44 <__mdiff+0x10c>
 8008d20:	6117      	str	r7, [r2, #16]
 8008d22:	e7a3      	b.n	8008c6c <__mdiff+0x34>
 8008d24:	f855 8b04 	ldr.w	r8, [r5], #4
 8008d28:	fa1f f188 	uxth.w	r1, r8
 8008d2c:	4461      	add	r1, ip
 8008d2e:	140c      	asrs	r4, r1, #16
 8008d30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d34:	b289      	uxth	r1, r1
 8008d36:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d3a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008d3e:	f846 1b04 	str.w	r1, [r6], #4
 8008d42:	e7de      	b.n	8008d02 <__mdiff+0xca>
 8008d44:	3f01      	subs	r7, #1
 8008d46:	e7e8      	b.n	8008d1a <__mdiff+0xe2>
 8008d48:	0800afe3 	.word	0x0800afe3
 8008d4c:	0800aff4 	.word	0x0800aff4

08008d50 <__ulp>:
 8008d50:	4b0e      	ldr	r3, [pc, #56]	; (8008d8c <__ulp+0x3c>)
 8008d52:	400b      	ands	r3, r1
 8008d54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	dc08      	bgt.n	8008d6e <__ulp+0x1e>
 8008d5c:	425b      	negs	r3, r3
 8008d5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008d62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d66:	da04      	bge.n	8008d72 <__ulp+0x22>
 8008d68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d6c:	4113      	asrs	r3, r2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	e008      	b.n	8008d84 <__ulp+0x34>
 8008d72:	f1a2 0314 	sub.w	r3, r2, #20
 8008d76:	2b1e      	cmp	r3, #30
 8008d78:	bfd6      	itet	le
 8008d7a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008d7e:	2201      	movgt	r2, #1
 8008d80:	40da      	lsrle	r2, r3
 8008d82:	2300      	movs	r3, #0
 8008d84:	4619      	mov	r1, r3
 8008d86:	4610      	mov	r0, r2
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	7ff00000 	.word	0x7ff00000

08008d90 <__b2d>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	6905      	ldr	r5, [r0, #16]
 8008d94:	f100 0714 	add.w	r7, r0, #20
 8008d98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008d9c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008da0:	1f2e      	subs	r6, r5, #4
 8008da2:	4620      	mov	r0, r4
 8008da4:	f7ff fd5a 	bl	800885c <__hi0bits>
 8008da8:	f1c0 0220 	rsb	r2, r0, #32
 8008dac:	280a      	cmp	r0, #10
 8008dae:	4603      	mov	r3, r0
 8008db0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008e1c <__b2d+0x8c>
 8008db4:	600a      	str	r2, [r1, #0]
 8008db6:	dc12      	bgt.n	8008dde <__b2d+0x4e>
 8008db8:	f1c0 0e0b 	rsb	lr, r0, #11
 8008dbc:	fa24 f20e 	lsr.w	r2, r4, lr
 8008dc0:	42b7      	cmp	r7, r6
 8008dc2:	ea42 010c 	orr.w	r1, r2, ip
 8008dc6:	bf2c      	ite	cs
 8008dc8:	2200      	movcs	r2, #0
 8008dca:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008dce:	3315      	adds	r3, #21
 8008dd0:	fa04 f303 	lsl.w	r3, r4, r3
 8008dd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dde:	42b7      	cmp	r7, r6
 8008de0:	bf2e      	itee	cs
 8008de2:	2200      	movcs	r2, #0
 8008de4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008de8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008dec:	3b0b      	subs	r3, #11
 8008dee:	d012      	beq.n	8008e16 <__b2d+0x86>
 8008df0:	f1c3 0520 	rsb	r5, r3, #32
 8008df4:	fa22 f105 	lsr.w	r1, r2, r5
 8008df8:	409c      	lsls	r4, r3
 8008dfa:	430c      	orrs	r4, r1
 8008dfc:	42be      	cmp	r6, r7
 8008dfe:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8008e02:	bf94      	ite	ls
 8008e04:	2400      	movls	r4, #0
 8008e06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008e0a:	409a      	lsls	r2, r3
 8008e0c:	40ec      	lsrs	r4, r5
 8008e0e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008e12:	4322      	orrs	r2, r4
 8008e14:	e7e1      	b.n	8008dda <__b2d+0x4a>
 8008e16:	ea44 010c 	orr.w	r1, r4, ip
 8008e1a:	e7de      	b.n	8008dda <__b2d+0x4a>
 8008e1c:	3ff00000 	.word	0x3ff00000

08008e20 <__d2b>:
 8008e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e22:	2101      	movs	r1, #1
 8008e24:	4617      	mov	r7, r2
 8008e26:	461c      	mov	r4, r3
 8008e28:	9e08      	ldr	r6, [sp, #32]
 8008e2a:	f7ff fc25 	bl	8008678 <_Balloc>
 8008e2e:	4605      	mov	r5, r0
 8008e30:	b930      	cbnz	r0, 8008e40 <__d2b+0x20>
 8008e32:	4602      	mov	r2, r0
 8008e34:	f240 310f 	movw	r1, #783	; 0x30f
 8008e38:	4b22      	ldr	r3, [pc, #136]	; (8008ec4 <__d2b+0xa4>)
 8008e3a:	4823      	ldr	r0, [pc, #140]	; (8008ec8 <__d2b+0xa8>)
 8008e3c:	f001 f9a8 	bl	800a190 <__assert_func>
 8008e40:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008e44:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008e48:	bb24      	cbnz	r4, 8008e94 <__d2b+0x74>
 8008e4a:	2f00      	cmp	r7, #0
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	d026      	beq.n	8008e9e <__d2b+0x7e>
 8008e50:	4668      	mov	r0, sp
 8008e52:	9700      	str	r7, [sp, #0]
 8008e54:	f7ff fd22 	bl	800889c <__lo0bits>
 8008e58:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e5c:	b1e8      	cbz	r0, 8008e9a <__d2b+0x7a>
 8008e5e:	f1c0 0320 	rsb	r3, r0, #32
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	430b      	orrs	r3, r1
 8008e68:	40c2      	lsrs	r2, r0
 8008e6a:	616b      	str	r3, [r5, #20]
 8008e6c:	9201      	str	r2, [sp, #4]
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	bf14      	ite	ne
 8008e74:	2102      	movne	r1, #2
 8008e76:	2101      	moveq	r1, #1
 8008e78:	61ab      	str	r3, [r5, #24]
 8008e7a:	6129      	str	r1, [r5, #16]
 8008e7c:	b1bc      	cbz	r4, 8008eae <__d2b+0x8e>
 8008e7e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008e82:	4404      	add	r4, r0
 8008e84:	6034      	str	r4, [r6, #0]
 8008e86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8c:	6018      	str	r0, [r3, #0]
 8008e8e:	4628      	mov	r0, r5
 8008e90:	b003      	add	sp, #12
 8008e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e98:	e7d7      	b.n	8008e4a <__d2b+0x2a>
 8008e9a:	6169      	str	r1, [r5, #20]
 8008e9c:	e7e7      	b.n	8008e6e <__d2b+0x4e>
 8008e9e:	a801      	add	r0, sp, #4
 8008ea0:	f7ff fcfc 	bl	800889c <__lo0bits>
 8008ea4:	9b01      	ldr	r3, [sp, #4]
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	616b      	str	r3, [r5, #20]
 8008eaa:	3020      	adds	r0, #32
 8008eac:	e7e5      	b.n	8008e7a <__d2b+0x5a>
 8008eae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008eb2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008eb6:	6030      	str	r0, [r6, #0]
 8008eb8:	6918      	ldr	r0, [r3, #16]
 8008eba:	f7ff fccf 	bl	800885c <__hi0bits>
 8008ebe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008ec2:	e7e2      	b.n	8008e8a <__d2b+0x6a>
 8008ec4:	0800afe3 	.word	0x0800afe3
 8008ec8:	0800aff4 	.word	0x0800aff4

08008ecc <__ratio>:
 8008ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed0:	4688      	mov	r8, r1
 8008ed2:	4669      	mov	r1, sp
 8008ed4:	4681      	mov	r9, r0
 8008ed6:	f7ff ff5b 	bl	8008d90 <__b2d>
 8008eda:	460f      	mov	r7, r1
 8008edc:	4604      	mov	r4, r0
 8008ede:	460d      	mov	r5, r1
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	a901      	add	r1, sp, #4
 8008ee4:	f7ff ff54 	bl	8008d90 <__b2d>
 8008ee8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008eec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ef0:	468b      	mov	fp, r1
 8008ef2:	eba3 0c02 	sub.w	ip, r3, r2
 8008ef6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bfd5      	itete	le
 8008f04:	460a      	movle	r2, r1
 8008f06:	462a      	movgt	r2, r5
 8008f08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f0c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f10:	bfd8      	it	le
 8008f12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f16:	465b      	mov	r3, fp
 8008f18:	4602      	mov	r2, r0
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f7f7 fc71 	bl	8000804 <__aeabi_ddiv>
 8008f22:	b003      	add	sp, #12
 8008f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f28 <__copybits>:
 8008f28:	3901      	subs	r1, #1
 8008f2a:	b570      	push	{r4, r5, r6, lr}
 8008f2c:	1149      	asrs	r1, r1, #5
 8008f2e:	6914      	ldr	r4, [r2, #16]
 8008f30:	3101      	adds	r1, #1
 8008f32:	f102 0314 	add.w	r3, r2, #20
 8008f36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f3e:	1f05      	subs	r5, r0, #4
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	d30c      	bcc.n	8008f5e <__copybits+0x36>
 8008f44:	1aa3      	subs	r3, r4, r2
 8008f46:	3b11      	subs	r3, #17
 8008f48:	f023 0303 	bic.w	r3, r3, #3
 8008f4c:	3211      	adds	r2, #17
 8008f4e:	42a2      	cmp	r2, r4
 8008f50:	bf88      	it	hi
 8008f52:	2300      	movhi	r3, #0
 8008f54:	4418      	add	r0, r3
 8008f56:	2300      	movs	r3, #0
 8008f58:	4288      	cmp	r0, r1
 8008f5a:	d305      	bcc.n	8008f68 <__copybits+0x40>
 8008f5c:	bd70      	pop	{r4, r5, r6, pc}
 8008f5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f62:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f66:	e7eb      	b.n	8008f40 <__copybits+0x18>
 8008f68:	f840 3b04 	str.w	r3, [r0], #4
 8008f6c:	e7f4      	b.n	8008f58 <__copybits+0x30>

08008f6e <__any_on>:
 8008f6e:	f100 0214 	add.w	r2, r0, #20
 8008f72:	6900      	ldr	r0, [r0, #16]
 8008f74:	114b      	asrs	r3, r1, #5
 8008f76:	4298      	cmp	r0, r3
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	db11      	blt.n	8008fa0 <__any_on+0x32>
 8008f7c:	dd0a      	ble.n	8008f94 <__any_on+0x26>
 8008f7e:	f011 011f 	ands.w	r1, r1, #31
 8008f82:	d007      	beq.n	8008f94 <__any_on+0x26>
 8008f84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f88:	fa24 f001 	lsr.w	r0, r4, r1
 8008f8c:	fa00 f101 	lsl.w	r1, r0, r1
 8008f90:	428c      	cmp	r4, r1
 8008f92:	d10b      	bne.n	8008fac <__any_on+0x3e>
 8008f94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d803      	bhi.n	8008fa4 <__any_on+0x36>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	bd10      	pop	{r4, pc}
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	e7f7      	b.n	8008f94 <__any_on+0x26>
 8008fa4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fa8:	2900      	cmp	r1, #0
 8008faa:	d0f5      	beq.n	8008f98 <__any_on+0x2a>
 8008fac:	2001      	movs	r0, #1
 8008fae:	e7f6      	b.n	8008f9e <__any_on+0x30>

08008fb0 <sulp>:
 8008fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	4690      	mov	r8, r2
 8008fb8:	f7ff feca 	bl	8008d50 <__ulp>
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	460d      	mov	r5, r1
 8008fc0:	f1b8 0f00 	cmp.w	r8, #0
 8008fc4:	d011      	beq.n	8008fea <sulp+0x3a>
 8008fc6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008fca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	dd0b      	ble.n	8008fea <sulp+0x3a>
 8008fd2:	2400      	movs	r4, #0
 8008fd4:	051b      	lsls	r3, r3, #20
 8008fd6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008fda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008fde:	4622      	mov	r2, r4
 8008fe0:	462b      	mov	r3, r5
 8008fe2:	f7f7 fae5 	bl	80005b0 <__aeabi_dmul>
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	460d      	mov	r5, r1
 8008fea:	4620      	mov	r0, r4
 8008fec:	4629      	mov	r1, r5
 8008fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff2:	0000      	movs	r0, r0
 8008ff4:	0000      	movs	r0, r0
	...

08008ff8 <_strtod_l>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	b09f      	sub	sp, #124	; 0x7c
 8008ffe:	9217      	str	r2, [sp, #92]	; 0x5c
 8009000:	2200      	movs	r2, #0
 8009002:	4604      	mov	r4, r0
 8009004:	921a      	str	r2, [sp, #104]	; 0x68
 8009006:	460d      	mov	r5, r1
 8009008:	f04f 0800 	mov.w	r8, #0
 800900c:	f04f 0900 	mov.w	r9, #0
 8009010:	460a      	mov	r2, r1
 8009012:	9219      	str	r2, [sp, #100]	; 0x64
 8009014:	7811      	ldrb	r1, [r2, #0]
 8009016:	292b      	cmp	r1, #43	; 0x2b
 8009018:	d04a      	beq.n	80090b0 <_strtod_l+0xb8>
 800901a:	d838      	bhi.n	800908e <_strtod_l+0x96>
 800901c:	290d      	cmp	r1, #13
 800901e:	d832      	bhi.n	8009086 <_strtod_l+0x8e>
 8009020:	2908      	cmp	r1, #8
 8009022:	d832      	bhi.n	800908a <_strtod_l+0x92>
 8009024:	2900      	cmp	r1, #0
 8009026:	d03b      	beq.n	80090a0 <_strtod_l+0xa8>
 8009028:	2200      	movs	r2, #0
 800902a:	920e      	str	r2, [sp, #56]	; 0x38
 800902c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800902e:	7832      	ldrb	r2, [r6, #0]
 8009030:	2a30      	cmp	r2, #48	; 0x30
 8009032:	f040 80b2 	bne.w	800919a <_strtod_l+0x1a2>
 8009036:	7872      	ldrb	r2, [r6, #1]
 8009038:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800903c:	2a58      	cmp	r2, #88	; 0x58
 800903e:	d16e      	bne.n	800911e <_strtod_l+0x126>
 8009040:	9302      	str	r3, [sp, #8]
 8009042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009044:	4620      	mov	r0, r4
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	ab1a      	add	r3, sp, #104	; 0x68
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	4a8c      	ldr	r2, [pc, #560]	; (8009280 <_strtod_l+0x288>)
 800904e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009050:	a919      	add	r1, sp, #100	; 0x64
 8009052:	f001 f937 	bl	800a2c4 <__gethex>
 8009056:	f010 070f 	ands.w	r7, r0, #15
 800905a:	4605      	mov	r5, r0
 800905c:	d005      	beq.n	800906a <_strtod_l+0x72>
 800905e:	2f06      	cmp	r7, #6
 8009060:	d128      	bne.n	80090b4 <_strtod_l+0xbc>
 8009062:	2300      	movs	r3, #0
 8009064:	3601      	adds	r6, #1
 8009066:	9619      	str	r6, [sp, #100]	; 0x64
 8009068:	930e      	str	r3, [sp, #56]	; 0x38
 800906a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800906c:	2b00      	cmp	r3, #0
 800906e:	f040 85a0 	bne.w	8009bb2 <_strtod_l+0xbba>
 8009072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009074:	b1cb      	cbz	r3, 80090aa <_strtod_l+0xb2>
 8009076:	4642      	mov	r2, r8
 8009078:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800907c:	4610      	mov	r0, r2
 800907e:	4619      	mov	r1, r3
 8009080:	b01f      	add	sp, #124	; 0x7c
 8009082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009086:	2920      	cmp	r1, #32
 8009088:	d1ce      	bne.n	8009028 <_strtod_l+0x30>
 800908a:	3201      	adds	r2, #1
 800908c:	e7c1      	b.n	8009012 <_strtod_l+0x1a>
 800908e:	292d      	cmp	r1, #45	; 0x2d
 8009090:	d1ca      	bne.n	8009028 <_strtod_l+0x30>
 8009092:	2101      	movs	r1, #1
 8009094:	910e      	str	r1, [sp, #56]	; 0x38
 8009096:	1c51      	adds	r1, r2, #1
 8009098:	9119      	str	r1, [sp, #100]	; 0x64
 800909a:	7852      	ldrb	r2, [r2, #1]
 800909c:	2a00      	cmp	r2, #0
 800909e:	d1c5      	bne.n	800902c <_strtod_l+0x34>
 80090a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090a2:	9519      	str	r5, [sp, #100]	; 0x64
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f040 8582 	bne.w	8009bae <_strtod_l+0xbb6>
 80090aa:	4642      	mov	r2, r8
 80090ac:	464b      	mov	r3, r9
 80090ae:	e7e5      	b.n	800907c <_strtod_l+0x84>
 80090b0:	2100      	movs	r1, #0
 80090b2:	e7ef      	b.n	8009094 <_strtod_l+0x9c>
 80090b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090b6:	b13a      	cbz	r2, 80090c8 <_strtod_l+0xd0>
 80090b8:	2135      	movs	r1, #53	; 0x35
 80090ba:	a81c      	add	r0, sp, #112	; 0x70
 80090bc:	f7ff ff34 	bl	8008f28 <__copybits>
 80090c0:	4620      	mov	r0, r4
 80090c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090c4:	f7ff fb18 	bl	80086f8 <_Bfree>
 80090c8:	3f01      	subs	r7, #1
 80090ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80090cc:	2f04      	cmp	r7, #4
 80090ce:	d806      	bhi.n	80090de <_strtod_l+0xe6>
 80090d0:	e8df f007 	tbb	[pc, r7]
 80090d4:	201d0314 	.word	0x201d0314
 80090d8:	14          	.byte	0x14
 80090d9:	00          	.byte	0x00
 80090da:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80090de:	05e9      	lsls	r1, r5, #23
 80090e0:	bf48      	it	mi
 80090e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80090e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090ea:	0d1b      	lsrs	r3, r3, #20
 80090ec:	051b      	lsls	r3, r3, #20
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1bb      	bne.n	800906a <_strtod_l+0x72>
 80090f2:	f7fe fb17 	bl	8007724 <__errno>
 80090f6:	2322      	movs	r3, #34	; 0x22
 80090f8:	6003      	str	r3, [r0, #0]
 80090fa:	e7b6      	b.n	800906a <_strtod_l+0x72>
 80090fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009100:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009104:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009108:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800910c:	e7e7      	b.n	80090de <_strtod_l+0xe6>
 800910e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009284 <_strtod_l+0x28c>
 8009112:	e7e4      	b.n	80090de <_strtod_l+0xe6>
 8009114:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009118:	f04f 38ff 	mov.w	r8, #4294967295
 800911c:	e7df      	b.n	80090de <_strtod_l+0xe6>
 800911e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	9219      	str	r2, [sp, #100]	; 0x64
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	2b30      	cmp	r3, #48	; 0x30
 8009128:	d0f9      	beq.n	800911e <_strtod_l+0x126>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d09d      	beq.n	800906a <_strtod_l+0x72>
 800912e:	2301      	movs	r3, #1
 8009130:	f04f 0a00 	mov.w	sl, #0
 8009134:	220a      	movs	r2, #10
 8009136:	46d3      	mov	fp, sl
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800913c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009140:	930b      	str	r3, [sp, #44]	; 0x2c
 8009142:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009144:	7806      	ldrb	r6, [r0, #0]
 8009146:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800914a:	b2d9      	uxtb	r1, r3
 800914c:	2909      	cmp	r1, #9
 800914e:	d926      	bls.n	800919e <_strtod_l+0x1a6>
 8009150:	2201      	movs	r2, #1
 8009152:	494d      	ldr	r1, [pc, #308]	; (8009288 <_strtod_l+0x290>)
 8009154:	f000 ffe6 	bl	800a124 <strncmp>
 8009158:	2800      	cmp	r0, #0
 800915a:	d030      	beq.n	80091be <_strtod_l+0x1c6>
 800915c:	2000      	movs	r0, #0
 800915e:	4632      	mov	r2, r6
 8009160:	4603      	mov	r3, r0
 8009162:	465e      	mov	r6, fp
 8009164:	9008      	str	r0, [sp, #32]
 8009166:	2a65      	cmp	r2, #101	; 0x65
 8009168:	d001      	beq.n	800916e <_strtod_l+0x176>
 800916a:	2a45      	cmp	r2, #69	; 0x45
 800916c:	d113      	bne.n	8009196 <_strtod_l+0x19e>
 800916e:	b91e      	cbnz	r6, 8009178 <_strtod_l+0x180>
 8009170:	9a05      	ldr	r2, [sp, #20]
 8009172:	4302      	orrs	r2, r0
 8009174:	d094      	beq.n	80090a0 <_strtod_l+0xa8>
 8009176:	2600      	movs	r6, #0
 8009178:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800917a:	1c6a      	adds	r2, r5, #1
 800917c:	9219      	str	r2, [sp, #100]	; 0x64
 800917e:	786a      	ldrb	r2, [r5, #1]
 8009180:	2a2b      	cmp	r2, #43	; 0x2b
 8009182:	d074      	beq.n	800926e <_strtod_l+0x276>
 8009184:	2a2d      	cmp	r2, #45	; 0x2d
 8009186:	d078      	beq.n	800927a <_strtod_l+0x282>
 8009188:	f04f 0c00 	mov.w	ip, #0
 800918c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009190:	2909      	cmp	r1, #9
 8009192:	d97f      	bls.n	8009294 <_strtod_l+0x29c>
 8009194:	9519      	str	r5, [sp, #100]	; 0x64
 8009196:	2700      	movs	r7, #0
 8009198:	e09e      	b.n	80092d8 <_strtod_l+0x2e0>
 800919a:	2300      	movs	r3, #0
 800919c:	e7c8      	b.n	8009130 <_strtod_l+0x138>
 800919e:	f1bb 0f08 	cmp.w	fp, #8
 80091a2:	bfd8      	it	le
 80091a4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80091a6:	f100 0001 	add.w	r0, r0, #1
 80091aa:	bfd6      	itet	le
 80091ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80091b0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80091b4:	930a      	strle	r3, [sp, #40]	; 0x28
 80091b6:	f10b 0b01 	add.w	fp, fp, #1
 80091ba:	9019      	str	r0, [sp, #100]	; 0x64
 80091bc:	e7c1      	b.n	8009142 <_strtod_l+0x14a>
 80091be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	9219      	str	r2, [sp, #100]	; 0x64
 80091c4:	785a      	ldrb	r2, [r3, #1]
 80091c6:	f1bb 0f00 	cmp.w	fp, #0
 80091ca:	d037      	beq.n	800923c <_strtod_l+0x244>
 80091cc:	465e      	mov	r6, fp
 80091ce:	9008      	str	r0, [sp, #32]
 80091d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80091d4:	2b09      	cmp	r3, #9
 80091d6:	d912      	bls.n	80091fe <_strtod_l+0x206>
 80091d8:	2301      	movs	r3, #1
 80091da:	e7c4      	b.n	8009166 <_strtod_l+0x16e>
 80091dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091de:	3001      	adds	r0, #1
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	9219      	str	r2, [sp, #100]	; 0x64
 80091e4:	785a      	ldrb	r2, [r3, #1]
 80091e6:	2a30      	cmp	r2, #48	; 0x30
 80091e8:	d0f8      	beq.n	80091dc <_strtod_l+0x1e4>
 80091ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80091ee:	2b08      	cmp	r3, #8
 80091f0:	f200 84e4 	bhi.w	8009bbc <_strtod_l+0xbc4>
 80091f4:	9008      	str	r0, [sp, #32]
 80091f6:	2000      	movs	r0, #0
 80091f8:	4606      	mov	r6, r0
 80091fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80091fe:	3a30      	subs	r2, #48	; 0x30
 8009200:	f100 0301 	add.w	r3, r0, #1
 8009204:	d014      	beq.n	8009230 <_strtod_l+0x238>
 8009206:	9908      	ldr	r1, [sp, #32]
 8009208:	eb00 0c06 	add.w	ip, r0, r6
 800920c:	4419      	add	r1, r3
 800920e:	9108      	str	r1, [sp, #32]
 8009210:	4633      	mov	r3, r6
 8009212:	210a      	movs	r1, #10
 8009214:	4563      	cmp	r3, ip
 8009216:	d113      	bne.n	8009240 <_strtod_l+0x248>
 8009218:	1833      	adds	r3, r6, r0
 800921a:	2b08      	cmp	r3, #8
 800921c:	f106 0601 	add.w	r6, r6, #1
 8009220:	4406      	add	r6, r0
 8009222:	dc1a      	bgt.n	800925a <_strtod_l+0x262>
 8009224:	230a      	movs	r3, #10
 8009226:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009228:	fb03 2301 	mla	r3, r3, r1, r2
 800922c:	930a      	str	r3, [sp, #40]	; 0x28
 800922e:	2300      	movs	r3, #0
 8009230:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009232:	4618      	mov	r0, r3
 8009234:	1c51      	adds	r1, r2, #1
 8009236:	9119      	str	r1, [sp, #100]	; 0x64
 8009238:	7852      	ldrb	r2, [r2, #1]
 800923a:	e7c9      	b.n	80091d0 <_strtod_l+0x1d8>
 800923c:	4658      	mov	r0, fp
 800923e:	e7d2      	b.n	80091e6 <_strtod_l+0x1ee>
 8009240:	2b08      	cmp	r3, #8
 8009242:	f103 0301 	add.w	r3, r3, #1
 8009246:	dc03      	bgt.n	8009250 <_strtod_l+0x258>
 8009248:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800924a:	434f      	muls	r7, r1
 800924c:	970a      	str	r7, [sp, #40]	; 0x28
 800924e:	e7e1      	b.n	8009214 <_strtod_l+0x21c>
 8009250:	2b10      	cmp	r3, #16
 8009252:	bfd8      	it	le
 8009254:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009258:	e7dc      	b.n	8009214 <_strtod_l+0x21c>
 800925a:	2e10      	cmp	r6, #16
 800925c:	bfdc      	itt	le
 800925e:	230a      	movle	r3, #10
 8009260:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009264:	e7e3      	b.n	800922e <_strtod_l+0x236>
 8009266:	2300      	movs	r3, #0
 8009268:	9308      	str	r3, [sp, #32]
 800926a:	2301      	movs	r3, #1
 800926c:	e780      	b.n	8009170 <_strtod_l+0x178>
 800926e:	f04f 0c00 	mov.w	ip, #0
 8009272:	1caa      	adds	r2, r5, #2
 8009274:	9219      	str	r2, [sp, #100]	; 0x64
 8009276:	78aa      	ldrb	r2, [r5, #2]
 8009278:	e788      	b.n	800918c <_strtod_l+0x194>
 800927a:	f04f 0c01 	mov.w	ip, #1
 800927e:	e7f8      	b.n	8009272 <_strtod_l+0x27a>
 8009280:	0800b150 	.word	0x0800b150
 8009284:	7ff00000 	.word	0x7ff00000
 8009288:	0800b14c 	.word	0x0800b14c
 800928c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800928e:	1c51      	adds	r1, r2, #1
 8009290:	9119      	str	r1, [sp, #100]	; 0x64
 8009292:	7852      	ldrb	r2, [r2, #1]
 8009294:	2a30      	cmp	r2, #48	; 0x30
 8009296:	d0f9      	beq.n	800928c <_strtod_l+0x294>
 8009298:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800929c:	2908      	cmp	r1, #8
 800929e:	f63f af7a 	bhi.w	8009196 <_strtod_l+0x19e>
 80092a2:	3a30      	subs	r2, #48	; 0x30
 80092a4:	9209      	str	r2, [sp, #36]	; 0x24
 80092a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80092a8:	920c      	str	r2, [sp, #48]	; 0x30
 80092aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80092ac:	1c57      	adds	r7, r2, #1
 80092ae:	9719      	str	r7, [sp, #100]	; 0x64
 80092b0:	7852      	ldrb	r2, [r2, #1]
 80092b2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80092b6:	f1be 0f09 	cmp.w	lr, #9
 80092ba:	d938      	bls.n	800932e <_strtod_l+0x336>
 80092bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092be:	1a7f      	subs	r7, r7, r1
 80092c0:	2f08      	cmp	r7, #8
 80092c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80092c6:	dc03      	bgt.n	80092d0 <_strtod_l+0x2d8>
 80092c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ca:	428f      	cmp	r7, r1
 80092cc:	bfa8      	it	ge
 80092ce:	460f      	movge	r7, r1
 80092d0:	f1bc 0f00 	cmp.w	ip, #0
 80092d4:	d000      	beq.n	80092d8 <_strtod_l+0x2e0>
 80092d6:	427f      	negs	r7, r7
 80092d8:	2e00      	cmp	r6, #0
 80092da:	d14f      	bne.n	800937c <_strtod_l+0x384>
 80092dc:	9905      	ldr	r1, [sp, #20]
 80092de:	4301      	orrs	r1, r0
 80092e0:	f47f aec3 	bne.w	800906a <_strtod_l+0x72>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f47f aedb 	bne.w	80090a0 <_strtod_l+0xa8>
 80092ea:	2a69      	cmp	r2, #105	; 0x69
 80092ec:	d029      	beq.n	8009342 <_strtod_l+0x34a>
 80092ee:	dc26      	bgt.n	800933e <_strtod_l+0x346>
 80092f0:	2a49      	cmp	r2, #73	; 0x49
 80092f2:	d026      	beq.n	8009342 <_strtod_l+0x34a>
 80092f4:	2a4e      	cmp	r2, #78	; 0x4e
 80092f6:	f47f aed3 	bne.w	80090a0 <_strtod_l+0xa8>
 80092fa:	499a      	ldr	r1, [pc, #616]	; (8009564 <_strtod_l+0x56c>)
 80092fc:	a819      	add	r0, sp, #100	; 0x64
 80092fe:	f001 fa23 	bl	800a748 <__match>
 8009302:	2800      	cmp	r0, #0
 8009304:	f43f aecc 	beq.w	80090a0 <_strtod_l+0xa8>
 8009308:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b28      	cmp	r3, #40	; 0x28
 800930e:	d12f      	bne.n	8009370 <_strtod_l+0x378>
 8009310:	4995      	ldr	r1, [pc, #596]	; (8009568 <_strtod_l+0x570>)
 8009312:	aa1c      	add	r2, sp, #112	; 0x70
 8009314:	a819      	add	r0, sp, #100	; 0x64
 8009316:	f001 fa2b 	bl	800a770 <__hexnan>
 800931a:	2805      	cmp	r0, #5
 800931c:	d128      	bne.n	8009370 <_strtod_l+0x378>
 800931e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009320:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009324:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009328:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800932c:	e69d      	b.n	800906a <_strtod_l+0x72>
 800932e:	210a      	movs	r1, #10
 8009330:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009332:	fb01 2107 	mla	r1, r1, r7, r2
 8009336:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800933a:	9209      	str	r2, [sp, #36]	; 0x24
 800933c:	e7b5      	b.n	80092aa <_strtod_l+0x2b2>
 800933e:	2a6e      	cmp	r2, #110	; 0x6e
 8009340:	e7d9      	b.n	80092f6 <_strtod_l+0x2fe>
 8009342:	498a      	ldr	r1, [pc, #552]	; (800956c <_strtod_l+0x574>)
 8009344:	a819      	add	r0, sp, #100	; 0x64
 8009346:	f001 f9ff 	bl	800a748 <__match>
 800934a:	2800      	cmp	r0, #0
 800934c:	f43f aea8 	beq.w	80090a0 <_strtod_l+0xa8>
 8009350:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009352:	4987      	ldr	r1, [pc, #540]	; (8009570 <_strtod_l+0x578>)
 8009354:	3b01      	subs	r3, #1
 8009356:	a819      	add	r0, sp, #100	; 0x64
 8009358:	9319      	str	r3, [sp, #100]	; 0x64
 800935a:	f001 f9f5 	bl	800a748 <__match>
 800935e:	b910      	cbnz	r0, 8009366 <_strtod_l+0x36e>
 8009360:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009362:	3301      	adds	r3, #1
 8009364:	9319      	str	r3, [sp, #100]	; 0x64
 8009366:	f04f 0800 	mov.w	r8, #0
 800936a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009574 <_strtod_l+0x57c>
 800936e:	e67c      	b.n	800906a <_strtod_l+0x72>
 8009370:	4881      	ldr	r0, [pc, #516]	; (8009578 <_strtod_l+0x580>)
 8009372:	f000 ff07 	bl	800a184 <nan>
 8009376:	4680      	mov	r8, r0
 8009378:	4689      	mov	r9, r1
 800937a:	e676      	b.n	800906a <_strtod_l+0x72>
 800937c:	9b08      	ldr	r3, [sp, #32]
 800937e:	f1bb 0f00 	cmp.w	fp, #0
 8009382:	bf08      	it	eq
 8009384:	46b3      	moveq	fp, r6
 8009386:	1afb      	subs	r3, r7, r3
 8009388:	2e10      	cmp	r6, #16
 800938a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800938c:	4635      	mov	r5, r6
 800938e:	9309      	str	r3, [sp, #36]	; 0x24
 8009390:	bfa8      	it	ge
 8009392:	2510      	movge	r5, #16
 8009394:	f7f7 f892 	bl	80004bc <__aeabi_ui2d>
 8009398:	2e09      	cmp	r6, #9
 800939a:	4680      	mov	r8, r0
 800939c:	4689      	mov	r9, r1
 800939e:	dd13      	ble.n	80093c8 <_strtod_l+0x3d0>
 80093a0:	4b76      	ldr	r3, [pc, #472]	; (800957c <_strtod_l+0x584>)
 80093a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80093a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80093aa:	f7f7 f901 	bl	80005b0 <__aeabi_dmul>
 80093ae:	4680      	mov	r8, r0
 80093b0:	4650      	mov	r0, sl
 80093b2:	4689      	mov	r9, r1
 80093b4:	f7f7 f882 	bl	80004bc <__aeabi_ui2d>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4640      	mov	r0, r8
 80093be:	4649      	mov	r1, r9
 80093c0:	f7f6 ff40 	bl	8000244 <__adddf3>
 80093c4:	4680      	mov	r8, r0
 80093c6:	4689      	mov	r9, r1
 80093c8:	2e0f      	cmp	r6, #15
 80093ca:	dc36      	bgt.n	800943a <_strtod_l+0x442>
 80093cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f43f ae4b 	beq.w	800906a <_strtod_l+0x72>
 80093d4:	dd22      	ble.n	800941c <_strtod_l+0x424>
 80093d6:	2b16      	cmp	r3, #22
 80093d8:	dc09      	bgt.n	80093ee <_strtod_l+0x3f6>
 80093da:	4968      	ldr	r1, [pc, #416]	; (800957c <_strtod_l+0x584>)
 80093dc:	4642      	mov	r2, r8
 80093de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093e2:	464b      	mov	r3, r9
 80093e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e8:	f7f7 f8e2 	bl	80005b0 <__aeabi_dmul>
 80093ec:	e7c3      	b.n	8009376 <_strtod_l+0x37e>
 80093ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093f0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80093f4:	4293      	cmp	r3, r2
 80093f6:	db20      	blt.n	800943a <_strtod_l+0x442>
 80093f8:	4c60      	ldr	r4, [pc, #384]	; (800957c <_strtod_l+0x584>)
 80093fa:	f1c6 060f 	rsb	r6, r6, #15
 80093fe:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009402:	4642      	mov	r2, r8
 8009404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009408:	464b      	mov	r3, r9
 800940a:	f7f7 f8d1 	bl	80005b0 <__aeabi_dmul>
 800940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009410:	1b9e      	subs	r6, r3, r6
 8009412:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009416:	e9d4 2300 	ldrd	r2, r3, [r4]
 800941a:	e7e5      	b.n	80093e8 <_strtod_l+0x3f0>
 800941c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941e:	3316      	adds	r3, #22
 8009420:	db0b      	blt.n	800943a <_strtod_l+0x442>
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	4640      	mov	r0, r8
 8009426:	1bdf      	subs	r7, r3, r7
 8009428:	4b54      	ldr	r3, [pc, #336]	; (800957c <_strtod_l+0x584>)
 800942a:	4649      	mov	r1, r9
 800942c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009434:	f7f7 f9e6 	bl	8000804 <__aeabi_ddiv>
 8009438:	e79d      	b.n	8009376 <_strtod_l+0x37e>
 800943a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943c:	1b75      	subs	r5, r6, r5
 800943e:	441d      	add	r5, r3
 8009440:	2d00      	cmp	r5, #0
 8009442:	dd70      	ble.n	8009526 <_strtod_l+0x52e>
 8009444:	f015 030f 	ands.w	r3, r5, #15
 8009448:	d00a      	beq.n	8009460 <_strtod_l+0x468>
 800944a:	494c      	ldr	r1, [pc, #304]	; (800957c <_strtod_l+0x584>)
 800944c:	4642      	mov	r2, r8
 800944e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009452:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009456:	464b      	mov	r3, r9
 8009458:	f7f7 f8aa 	bl	80005b0 <__aeabi_dmul>
 800945c:	4680      	mov	r8, r0
 800945e:	4689      	mov	r9, r1
 8009460:	f035 050f 	bics.w	r5, r5, #15
 8009464:	d04d      	beq.n	8009502 <_strtod_l+0x50a>
 8009466:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800946a:	dd22      	ble.n	80094b2 <_strtod_l+0x4ba>
 800946c:	2600      	movs	r6, #0
 800946e:	46b3      	mov	fp, r6
 8009470:	960b      	str	r6, [sp, #44]	; 0x2c
 8009472:	9608      	str	r6, [sp, #32]
 8009474:	2322      	movs	r3, #34	; 0x22
 8009476:	f04f 0800 	mov.w	r8, #0
 800947a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009574 <_strtod_l+0x57c>
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009482:	2b00      	cmp	r3, #0
 8009484:	f43f adf1 	beq.w	800906a <_strtod_l+0x72>
 8009488:	4620      	mov	r0, r4
 800948a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800948c:	f7ff f934 	bl	80086f8 <_Bfree>
 8009490:	4620      	mov	r0, r4
 8009492:	9908      	ldr	r1, [sp, #32]
 8009494:	f7ff f930 	bl	80086f8 <_Bfree>
 8009498:	4659      	mov	r1, fp
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff f92c 	bl	80086f8 <_Bfree>
 80094a0:	4620      	mov	r0, r4
 80094a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094a4:	f7ff f928 	bl	80086f8 <_Bfree>
 80094a8:	4631      	mov	r1, r6
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7ff f924 	bl	80086f8 <_Bfree>
 80094b0:	e5db      	b.n	800906a <_strtod_l+0x72>
 80094b2:	4b33      	ldr	r3, [pc, #204]	; (8009580 <_strtod_l+0x588>)
 80094b4:	4640      	mov	r0, r8
 80094b6:	9305      	str	r3, [sp, #20]
 80094b8:	2300      	movs	r3, #0
 80094ba:	4649      	mov	r1, r9
 80094bc:	469a      	mov	sl, r3
 80094be:	112d      	asrs	r5, r5, #4
 80094c0:	2d01      	cmp	r5, #1
 80094c2:	dc21      	bgt.n	8009508 <_strtod_l+0x510>
 80094c4:	b10b      	cbz	r3, 80094ca <_strtod_l+0x4d2>
 80094c6:	4680      	mov	r8, r0
 80094c8:	4689      	mov	r9, r1
 80094ca:	492d      	ldr	r1, [pc, #180]	; (8009580 <_strtod_l+0x588>)
 80094cc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80094d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80094d4:	4642      	mov	r2, r8
 80094d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094da:	464b      	mov	r3, r9
 80094dc:	f7f7 f868 	bl	80005b0 <__aeabi_dmul>
 80094e0:	4b24      	ldr	r3, [pc, #144]	; (8009574 <_strtod_l+0x57c>)
 80094e2:	460a      	mov	r2, r1
 80094e4:	400b      	ands	r3, r1
 80094e6:	4927      	ldr	r1, [pc, #156]	; (8009584 <_strtod_l+0x58c>)
 80094e8:	4680      	mov	r8, r0
 80094ea:	428b      	cmp	r3, r1
 80094ec:	d8be      	bhi.n	800946c <_strtod_l+0x474>
 80094ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80094f2:	428b      	cmp	r3, r1
 80094f4:	bf86      	itte	hi
 80094f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80094fa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009588 <_strtod_l+0x590>
 80094fe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009502:	2300      	movs	r3, #0
 8009504:	9305      	str	r3, [sp, #20]
 8009506:	e07b      	b.n	8009600 <_strtod_l+0x608>
 8009508:	07ea      	lsls	r2, r5, #31
 800950a:	d505      	bpl.n	8009518 <_strtod_l+0x520>
 800950c:	9b05      	ldr	r3, [sp, #20]
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f7 f84d 	bl	80005b0 <__aeabi_dmul>
 8009516:	2301      	movs	r3, #1
 8009518:	9a05      	ldr	r2, [sp, #20]
 800951a:	f10a 0a01 	add.w	sl, sl, #1
 800951e:	3208      	adds	r2, #8
 8009520:	106d      	asrs	r5, r5, #1
 8009522:	9205      	str	r2, [sp, #20]
 8009524:	e7cc      	b.n	80094c0 <_strtod_l+0x4c8>
 8009526:	d0ec      	beq.n	8009502 <_strtod_l+0x50a>
 8009528:	426d      	negs	r5, r5
 800952a:	f015 020f 	ands.w	r2, r5, #15
 800952e:	d00a      	beq.n	8009546 <_strtod_l+0x54e>
 8009530:	4b12      	ldr	r3, [pc, #72]	; (800957c <_strtod_l+0x584>)
 8009532:	4640      	mov	r0, r8
 8009534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009538:	4649      	mov	r1, r9
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f961 	bl	8000804 <__aeabi_ddiv>
 8009542:	4680      	mov	r8, r0
 8009544:	4689      	mov	r9, r1
 8009546:	112d      	asrs	r5, r5, #4
 8009548:	d0db      	beq.n	8009502 <_strtod_l+0x50a>
 800954a:	2d1f      	cmp	r5, #31
 800954c:	dd1e      	ble.n	800958c <_strtod_l+0x594>
 800954e:	2600      	movs	r6, #0
 8009550:	46b3      	mov	fp, r6
 8009552:	960b      	str	r6, [sp, #44]	; 0x2c
 8009554:	9608      	str	r6, [sp, #32]
 8009556:	2322      	movs	r3, #34	; 0x22
 8009558:	f04f 0800 	mov.w	r8, #0
 800955c:	f04f 0900 	mov.w	r9, #0
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	e78d      	b.n	8009480 <_strtod_l+0x488>
 8009564:	0800af3b 	.word	0x0800af3b
 8009568:	0800b164 	.word	0x0800b164
 800956c:	0800af33 	.word	0x0800af33
 8009570:	0800af6a 	.word	0x0800af6a
 8009574:	7ff00000 	.word	0x7ff00000
 8009578:	0800b2f5 	.word	0x0800b2f5
 800957c:	0800b078 	.word	0x0800b078
 8009580:	0800b050 	.word	0x0800b050
 8009584:	7ca00000 	.word	0x7ca00000
 8009588:	7fefffff 	.word	0x7fefffff
 800958c:	f015 0310 	ands.w	r3, r5, #16
 8009590:	bf18      	it	ne
 8009592:	236a      	movne	r3, #106	; 0x6a
 8009594:	4640      	mov	r0, r8
 8009596:	9305      	str	r3, [sp, #20]
 8009598:	4649      	mov	r1, r9
 800959a:	2300      	movs	r3, #0
 800959c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009868 <_strtod_l+0x870>
 80095a0:	07ea      	lsls	r2, r5, #31
 80095a2:	d504      	bpl.n	80095ae <_strtod_l+0x5b6>
 80095a4:	e9da 2300 	ldrd	r2, r3, [sl]
 80095a8:	f7f7 f802 	bl	80005b0 <__aeabi_dmul>
 80095ac:	2301      	movs	r3, #1
 80095ae:	106d      	asrs	r5, r5, #1
 80095b0:	f10a 0a08 	add.w	sl, sl, #8
 80095b4:	d1f4      	bne.n	80095a0 <_strtod_l+0x5a8>
 80095b6:	b10b      	cbz	r3, 80095bc <_strtod_l+0x5c4>
 80095b8:	4680      	mov	r8, r0
 80095ba:	4689      	mov	r9, r1
 80095bc:	9b05      	ldr	r3, [sp, #20]
 80095be:	b1bb      	cbz	r3, 80095f0 <_strtod_l+0x5f8>
 80095c0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80095c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	4649      	mov	r1, r9
 80095cc:	dd10      	ble.n	80095f0 <_strtod_l+0x5f8>
 80095ce:	2b1f      	cmp	r3, #31
 80095d0:	f340 8128 	ble.w	8009824 <_strtod_l+0x82c>
 80095d4:	2b34      	cmp	r3, #52	; 0x34
 80095d6:	bfd8      	it	le
 80095d8:	f04f 33ff 	movle.w	r3, #4294967295
 80095dc:	f04f 0800 	mov.w	r8, #0
 80095e0:	bfcf      	iteee	gt
 80095e2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80095e6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80095ea:	4093      	lslle	r3, r2
 80095ec:	ea03 0901 	andle.w	r9, r3, r1
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	4640      	mov	r0, r8
 80095f6:	4649      	mov	r1, r9
 80095f8:	f7f7 fa42 	bl	8000a80 <__aeabi_dcmpeq>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d1a6      	bne.n	800954e <_strtod_l+0x556>
 8009600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009602:	465a      	mov	r2, fp
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4620      	mov	r0, r4
 8009608:	4633      	mov	r3, r6
 800960a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800960c:	f7ff f8dc 	bl	80087c8 <__s2b>
 8009610:	900b      	str	r0, [sp, #44]	; 0x2c
 8009612:	2800      	cmp	r0, #0
 8009614:	f43f af2a 	beq.w	800946c <_strtod_l+0x474>
 8009618:	2600      	movs	r6, #0
 800961a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800961c:	9b08      	ldr	r3, [sp, #32]
 800961e:	2a00      	cmp	r2, #0
 8009620:	eba3 0307 	sub.w	r3, r3, r7
 8009624:	bfa8      	it	ge
 8009626:	2300      	movge	r3, #0
 8009628:	46b3      	mov	fp, r6
 800962a:	9312      	str	r3, [sp, #72]	; 0x48
 800962c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009630:	9316      	str	r3, [sp, #88]	; 0x58
 8009632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009634:	4620      	mov	r0, r4
 8009636:	6859      	ldr	r1, [r3, #4]
 8009638:	f7ff f81e 	bl	8008678 <_Balloc>
 800963c:	9008      	str	r0, [sp, #32]
 800963e:	2800      	cmp	r0, #0
 8009640:	f43f af18 	beq.w	8009474 <_strtod_l+0x47c>
 8009644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009646:	300c      	adds	r0, #12
 8009648:	691a      	ldr	r2, [r3, #16]
 800964a:	f103 010c 	add.w	r1, r3, #12
 800964e:	3202      	adds	r2, #2
 8009650:	0092      	lsls	r2, r2, #2
 8009652:	f000 fd89 	bl	800a168 <memcpy>
 8009656:	ab1c      	add	r3, sp, #112	; 0x70
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	ab1b      	add	r3, sp, #108	; 0x6c
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	4642      	mov	r2, r8
 8009660:	464b      	mov	r3, r9
 8009662:	4620      	mov	r0, r4
 8009664:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009668:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800966c:	f7ff fbd8 	bl	8008e20 <__d2b>
 8009670:	901a      	str	r0, [sp, #104]	; 0x68
 8009672:	2800      	cmp	r0, #0
 8009674:	f43f aefe 	beq.w	8009474 <_strtod_l+0x47c>
 8009678:	2101      	movs	r1, #1
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff f93c 	bl	80088f8 <__i2b>
 8009680:	4683      	mov	fp, r0
 8009682:	2800      	cmp	r0, #0
 8009684:	f43f aef6 	beq.w	8009474 <_strtod_l+0x47c>
 8009688:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800968a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800968c:	2f00      	cmp	r7, #0
 800968e:	bfab      	itete	ge
 8009690:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009692:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009694:	eb07 0a03 	addge.w	sl, r7, r3
 8009698:	1bdd      	sublt	r5, r3, r7
 800969a:	9b05      	ldr	r3, [sp, #20]
 800969c:	bfa8      	it	ge
 800969e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80096a0:	eba7 0703 	sub.w	r7, r7, r3
 80096a4:	4417      	add	r7, r2
 80096a6:	4b71      	ldr	r3, [pc, #452]	; (800986c <_strtod_l+0x874>)
 80096a8:	f107 37ff 	add.w	r7, r7, #4294967295
 80096ac:	bfb8      	it	lt
 80096ae:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80096b2:	429f      	cmp	r7, r3
 80096b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80096b8:	f280 80c7 	bge.w	800984a <_strtod_l+0x852>
 80096bc:	1bdb      	subs	r3, r3, r7
 80096be:	2b1f      	cmp	r3, #31
 80096c0:	f04f 0101 	mov.w	r1, #1
 80096c4:	eba2 0203 	sub.w	r2, r2, r3
 80096c8:	f300 80b3 	bgt.w	8009832 <_strtod_l+0x83a>
 80096cc:	fa01 f303 	lsl.w	r3, r1, r3
 80096d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80096d2:	2300      	movs	r3, #0
 80096d4:	9310      	str	r3, [sp, #64]	; 0x40
 80096d6:	eb0a 0702 	add.w	r7, sl, r2
 80096da:	9b05      	ldr	r3, [sp, #20]
 80096dc:	45ba      	cmp	sl, r7
 80096de:	4415      	add	r5, r2
 80096e0:	441d      	add	r5, r3
 80096e2:	4653      	mov	r3, sl
 80096e4:	bfa8      	it	ge
 80096e6:	463b      	movge	r3, r7
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	bfa8      	it	ge
 80096ec:	462b      	movge	r3, r5
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bfc2      	ittt	gt
 80096f2:	1aff      	subgt	r7, r7, r3
 80096f4:	1aed      	subgt	r5, r5, r3
 80096f6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80096fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	dd17      	ble.n	8009730 <_strtod_l+0x738>
 8009700:	4659      	mov	r1, fp
 8009702:	461a      	mov	r2, r3
 8009704:	4620      	mov	r0, r4
 8009706:	f7ff f9b5 	bl	8008a74 <__pow5mult>
 800970a:	4683      	mov	fp, r0
 800970c:	2800      	cmp	r0, #0
 800970e:	f43f aeb1 	beq.w	8009474 <_strtod_l+0x47c>
 8009712:	4601      	mov	r1, r0
 8009714:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009716:	4620      	mov	r0, r4
 8009718:	f7ff f904 	bl	8008924 <__multiply>
 800971c:	900a      	str	r0, [sp, #40]	; 0x28
 800971e:	2800      	cmp	r0, #0
 8009720:	f43f aea8 	beq.w	8009474 <_strtod_l+0x47c>
 8009724:	4620      	mov	r0, r4
 8009726:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009728:	f7fe ffe6 	bl	80086f8 <_Bfree>
 800972c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972e:	931a      	str	r3, [sp, #104]	; 0x68
 8009730:	2f00      	cmp	r7, #0
 8009732:	f300 808f 	bgt.w	8009854 <_strtod_l+0x85c>
 8009736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009738:	2b00      	cmp	r3, #0
 800973a:	dd08      	ble.n	800974e <_strtod_l+0x756>
 800973c:	4620      	mov	r0, r4
 800973e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009740:	9908      	ldr	r1, [sp, #32]
 8009742:	f7ff f997 	bl	8008a74 <__pow5mult>
 8009746:	9008      	str	r0, [sp, #32]
 8009748:	2800      	cmp	r0, #0
 800974a:	f43f ae93 	beq.w	8009474 <_strtod_l+0x47c>
 800974e:	2d00      	cmp	r5, #0
 8009750:	dd08      	ble.n	8009764 <_strtod_l+0x76c>
 8009752:	462a      	mov	r2, r5
 8009754:	4620      	mov	r0, r4
 8009756:	9908      	ldr	r1, [sp, #32]
 8009758:	f7ff f9e6 	bl	8008b28 <__lshift>
 800975c:	9008      	str	r0, [sp, #32]
 800975e:	2800      	cmp	r0, #0
 8009760:	f43f ae88 	beq.w	8009474 <_strtod_l+0x47c>
 8009764:	f1ba 0f00 	cmp.w	sl, #0
 8009768:	dd08      	ble.n	800977c <_strtod_l+0x784>
 800976a:	4659      	mov	r1, fp
 800976c:	4652      	mov	r2, sl
 800976e:	4620      	mov	r0, r4
 8009770:	f7ff f9da 	bl	8008b28 <__lshift>
 8009774:	4683      	mov	fp, r0
 8009776:	2800      	cmp	r0, #0
 8009778:	f43f ae7c 	beq.w	8009474 <_strtod_l+0x47c>
 800977c:	4620      	mov	r0, r4
 800977e:	9a08      	ldr	r2, [sp, #32]
 8009780:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009782:	f7ff fa59 	bl	8008c38 <__mdiff>
 8009786:	4606      	mov	r6, r0
 8009788:	2800      	cmp	r0, #0
 800978a:	f43f ae73 	beq.w	8009474 <_strtod_l+0x47c>
 800978e:	2500      	movs	r5, #0
 8009790:	68c3      	ldr	r3, [r0, #12]
 8009792:	4659      	mov	r1, fp
 8009794:	60c5      	str	r5, [r0, #12]
 8009796:	930a      	str	r3, [sp, #40]	; 0x28
 8009798:	f7ff fa32 	bl	8008c00 <__mcmp>
 800979c:	42a8      	cmp	r0, r5
 800979e:	da6b      	bge.n	8009878 <_strtod_l+0x880>
 80097a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a2:	ea53 0308 	orrs.w	r3, r3, r8
 80097a6:	f040 808f 	bne.w	80098c8 <_strtod_l+0x8d0>
 80097aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f040 808a 	bne.w	80098c8 <_strtod_l+0x8d0>
 80097b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097b8:	0d1b      	lsrs	r3, r3, #20
 80097ba:	051b      	lsls	r3, r3, #20
 80097bc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80097c0:	f240 8082 	bls.w	80098c8 <_strtod_l+0x8d0>
 80097c4:	6973      	ldr	r3, [r6, #20]
 80097c6:	b913      	cbnz	r3, 80097ce <_strtod_l+0x7d6>
 80097c8:	6933      	ldr	r3, [r6, #16]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	dd7c      	ble.n	80098c8 <_strtod_l+0x8d0>
 80097ce:	4631      	mov	r1, r6
 80097d0:	2201      	movs	r2, #1
 80097d2:	4620      	mov	r0, r4
 80097d4:	f7ff f9a8 	bl	8008b28 <__lshift>
 80097d8:	4659      	mov	r1, fp
 80097da:	4606      	mov	r6, r0
 80097dc:	f7ff fa10 	bl	8008c00 <__mcmp>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	dd71      	ble.n	80098c8 <_strtod_l+0x8d0>
 80097e4:	9905      	ldr	r1, [sp, #20]
 80097e6:	464b      	mov	r3, r9
 80097e8:	4a21      	ldr	r2, [pc, #132]	; (8009870 <_strtod_l+0x878>)
 80097ea:	2900      	cmp	r1, #0
 80097ec:	f000 808d 	beq.w	800990a <_strtod_l+0x912>
 80097f0:	ea02 0109 	and.w	r1, r2, r9
 80097f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80097f8:	f300 8087 	bgt.w	800990a <_strtod_l+0x912>
 80097fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009800:	f77f aea9 	ble.w	8009556 <_strtod_l+0x55e>
 8009804:	4640      	mov	r0, r8
 8009806:	4649      	mov	r1, r9
 8009808:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <_strtod_l+0x87c>)
 800980a:	2200      	movs	r2, #0
 800980c:	f7f6 fed0 	bl	80005b0 <__aeabi_dmul>
 8009810:	4b17      	ldr	r3, [pc, #92]	; (8009870 <_strtod_l+0x878>)
 8009812:	4680      	mov	r8, r0
 8009814:	400b      	ands	r3, r1
 8009816:	4689      	mov	r9, r1
 8009818:	2b00      	cmp	r3, #0
 800981a:	f47f ae35 	bne.w	8009488 <_strtod_l+0x490>
 800981e:	2322      	movs	r3, #34	; 0x22
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	e631      	b.n	8009488 <_strtod_l+0x490>
 8009824:	f04f 32ff 	mov.w	r2, #4294967295
 8009828:	fa02 f303 	lsl.w	r3, r2, r3
 800982c:	ea03 0808 	and.w	r8, r3, r8
 8009830:	e6de      	b.n	80095f0 <_strtod_l+0x5f8>
 8009832:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009836:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800983a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800983e:	37e2      	adds	r7, #226	; 0xe2
 8009840:	fa01 f307 	lsl.w	r3, r1, r7
 8009844:	9310      	str	r3, [sp, #64]	; 0x40
 8009846:	9113      	str	r1, [sp, #76]	; 0x4c
 8009848:	e745      	b.n	80096d6 <_strtod_l+0x6de>
 800984a:	2300      	movs	r3, #0
 800984c:	9310      	str	r3, [sp, #64]	; 0x40
 800984e:	2301      	movs	r3, #1
 8009850:	9313      	str	r3, [sp, #76]	; 0x4c
 8009852:	e740      	b.n	80096d6 <_strtod_l+0x6de>
 8009854:	463a      	mov	r2, r7
 8009856:	4620      	mov	r0, r4
 8009858:	991a      	ldr	r1, [sp, #104]	; 0x68
 800985a:	f7ff f965 	bl	8008b28 <__lshift>
 800985e:	901a      	str	r0, [sp, #104]	; 0x68
 8009860:	2800      	cmp	r0, #0
 8009862:	f47f af68 	bne.w	8009736 <_strtod_l+0x73e>
 8009866:	e605      	b.n	8009474 <_strtod_l+0x47c>
 8009868:	0800b178 	.word	0x0800b178
 800986c:	fffffc02 	.word	0xfffffc02
 8009870:	7ff00000 	.word	0x7ff00000
 8009874:	39500000 	.word	0x39500000
 8009878:	46ca      	mov	sl, r9
 800987a:	d165      	bne.n	8009948 <_strtod_l+0x950>
 800987c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800987e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009882:	b352      	cbz	r2, 80098da <_strtod_l+0x8e2>
 8009884:	4a9e      	ldr	r2, [pc, #632]	; (8009b00 <_strtod_l+0xb08>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d12a      	bne.n	80098e0 <_strtod_l+0x8e8>
 800988a:	9b05      	ldr	r3, [sp, #20]
 800988c:	4641      	mov	r1, r8
 800988e:	b1fb      	cbz	r3, 80098d0 <_strtod_l+0x8d8>
 8009890:	4b9c      	ldr	r3, [pc, #624]	; (8009b04 <_strtod_l+0xb0c>)
 8009892:	f04f 32ff 	mov.w	r2, #4294967295
 8009896:	ea09 0303 	and.w	r3, r9, r3
 800989a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800989e:	d81a      	bhi.n	80098d6 <_strtod_l+0x8de>
 80098a0:	0d1b      	lsrs	r3, r3, #20
 80098a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098a6:	fa02 f303 	lsl.w	r3, r2, r3
 80098aa:	4299      	cmp	r1, r3
 80098ac:	d118      	bne.n	80098e0 <_strtod_l+0x8e8>
 80098ae:	4b96      	ldr	r3, [pc, #600]	; (8009b08 <_strtod_l+0xb10>)
 80098b0:	459a      	cmp	sl, r3
 80098b2:	d102      	bne.n	80098ba <_strtod_l+0x8c2>
 80098b4:	3101      	adds	r1, #1
 80098b6:	f43f addd 	beq.w	8009474 <_strtod_l+0x47c>
 80098ba:	f04f 0800 	mov.w	r8, #0
 80098be:	4b91      	ldr	r3, [pc, #580]	; (8009b04 <_strtod_l+0xb0c>)
 80098c0:	ea0a 0303 	and.w	r3, sl, r3
 80098c4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80098c8:	9b05      	ldr	r3, [sp, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d19a      	bne.n	8009804 <_strtod_l+0x80c>
 80098ce:	e5db      	b.n	8009488 <_strtod_l+0x490>
 80098d0:	f04f 33ff 	mov.w	r3, #4294967295
 80098d4:	e7e9      	b.n	80098aa <_strtod_l+0x8b2>
 80098d6:	4613      	mov	r3, r2
 80098d8:	e7e7      	b.n	80098aa <_strtod_l+0x8b2>
 80098da:	ea53 0308 	orrs.w	r3, r3, r8
 80098de:	d081      	beq.n	80097e4 <_strtod_l+0x7ec>
 80098e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098e2:	b1e3      	cbz	r3, 800991e <_strtod_l+0x926>
 80098e4:	ea13 0f0a 	tst.w	r3, sl
 80098e8:	d0ee      	beq.n	80098c8 <_strtod_l+0x8d0>
 80098ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ec:	4640      	mov	r0, r8
 80098ee:	4649      	mov	r1, r9
 80098f0:	9a05      	ldr	r2, [sp, #20]
 80098f2:	b1c3      	cbz	r3, 8009926 <_strtod_l+0x92e>
 80098f4:	f7ff fb5c 	bl	8008fb0 <sulp>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80098fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009900:	f7f6 fca0 	bl	8000244 <__adddf3>
 8009904:	4680      	mov	r8, r0
 8009906:	4689      	mov	r9, r1
 8009908:	e7de      	b.n	80098c8 <_strtod_l+0x8d0>
 800990a:	4013      	ands	r3, r2
 800990c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009910:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009914:	f04f 38ff 	mov.w	r8, #4294967295
 8009918:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800991c:	e7d4      	b.n	80098c8 <_strtod_l+0x8d0>
 800991e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009920:	ea13 0f08 	tst.w	r3, r8
 8009924:	e7e0      	b.n	80098e8 <_strtod_l+0x8f0>
 8009926:	f7ff fb43 	bl	8008fb0 <sulp>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009930:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009932:	f7f6 fc85 	bl	8000240 <__aeabi_dsub>
 8009936:	2200      	movs	r2, #0
 8009938:	2300      	movs	r3, #0
 800993a:	4680      	mov	r8, r0
 800993c:	4689      	mov	r9, r1
 800993e:	f7f7 f89f 	bl	8000a80 <__aeabi_dcmpeq>
 8009942:	2800      	cmp	r0, #0
 8009944:	d0c0      	beq.n	80098c8 <_strtod_l+0x8d0>
 8009946:	e606      	b.n	8009556 <_strtod_l+0x55e>
 8009948:	4659      	mov	r1, fp
 800994a:	4630      	mov	r0, r6
 800994c:	f7ff fabe 	bl	8008ecc <__ratio>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009958:	2200      	movs	r2, #0
 800995a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800995e:	f7f7 f8a3 	bl	8000aa8 <__aeabi_dcmple>
 8009962:	2800      	cmp	r0, #0
 8009964:	d06f      	beq.n	8009a46 <_strtod_l+0xa4e>
 8009966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009968:	2b00      	cmp	r3, #0
 800996a:	d17c      	bne.n	8009a66 <_strtod_l+0xa6e>
 800996c:	f1b8 0f00 	cmp.w	r8, #0
 8009970:	d159      	bne.n	8009a26 <_strtod_l+0xa2e>
 8009972:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009976:	2b00      	cmp	r3, #0
 8009978:	d17b      	bne.n	8009a72 <_strtod_l+0xa7a>
 800997a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800997e:	2200      	movs	r2, #0
 8009980:	4b62      	ldr	r3, [pc, #392]	; (8009b0c <_strtod_l+0xb14>)
 8009982:	f7f7 f887 	bl	8000a94 <__aeabi_dcmplt>
 8009986:	2800      	cmp	r0, #0
 8009988:	d15a      	bne.n	8009a40 <_strtod_l+0xa48>
 800998a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800998e:	2200      	movs	r2, #0
 8009990:	4b5f      	ldr	r3, [pc, #380]	; (8009b10 <_strtod_l+0xb18>)
 8009992:	f7f6 fe0d 	bl	80005b0 <__aeabi_dmul>
 8009996:	4605      	mov	r5, r0
 8009998:	460f      	mov	r7, r1
 800999a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800999e:	9506      	str	r5, [sp, #24]
 80099a0:	9307      	str	r3, [sp, #28]
 80099a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80099aa:	4b56      	ldr	r3, [pc, #344]	; (8009b04 <_strtod_l+0xb0c>)
 80099ac:	4a55      	ldr	r2, [pc, #340]	; (8009b04 <_strtod_l+0xb0c>)
 80099ae:	ea0a 0303 	and.w	r3, sl, r3
 80099b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80099b4:	4b57      	ldr	r3, [pc, #348]	; (8009b14 <_strtod_l+0xb1c>)
 80099b6:	ea0a 0202 	and.w	r2, sl, r2
 80099ba:	429a      	cmp	r2, r3
 80099bc:	f040 80b0 	bne.w	8009b20 <_strtod_l+0xb28>
 80099c0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80099c4:	4640      	mov	r0, r8
 80099c6:	4649      	mov	r1, r9
 80099c8:	f7ff f9c2 	bl	8008d50 <__ulp>
 80099cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099d0:	f7f6 fdee 	bl	80005b0 <__aeabi_dmul>
 80099d4:	4642      	mov	r2, r8
 80099d6:	464b      	mov	r3, r9
 80099d8:	f7f6 fc34 	bl	8000244 <__adddf3>
 80099dc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009b04 <_strtod_l+0xb0c>
 80099e0:	4a4d      	ldr	r2, [pc, #308]	; (8009b18 <_strtod_l+0xb20>)
 80099e2:	ea01 0a0a 	and.w	sl, r1, sl
 80099e6:	4592      	cmp	sl, r2
 80099e8:	4680      	mov	r8, r0
 80099ea:	d948      	bls.n	8009a7e <_strtod_l+0xa86>
 80099ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099ee:	4b46      	ldr	r3, [pc, #280]	; (8009b08 <_strtod_l+0xb10>)
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d103      	bne.n	80099fc <_strtod_l+0xa04>
 80099f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099f6:	3301      	adds	r3, #1
 80099f8:	f43f ad3c 	beq.w	8009474 <_strtod_l+0x47c>
 80099fc:	f04f 38ff 	mov.w	r8, #4294967295
 8009a00:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009b08 <_strtod_l+0xb10>
 8009a04:	4620      	mov	r0, r4
 8009a06:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a08:	f7fe fe76 	bl	80086f8 <_Bfree>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	9908      	ldr	r1, [sp, #32]
 8009a10:	f7fe fe72 	bl	80086f8 <_Bfree>
 8009a14:	4659      	mov	r1, fp
 8009a16:	4620      	mov	r0, r4
 8009a18:	f7fe fe6e 	bl	80086f8 <_Bfree>
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7fe fe6a 	bl	80086f8 <_Bfree>
 8009a24:	e605      	b.n	8009632 <_strtod_l+0x63a>
 8009a26:	f1b8 0f01 	cmp.w	r8, #1
 8009a2a:	d103      	bne.n	8009a34 <_strtod_l+0xa3c>
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	f43f ad91 	beq.w	8009556 <_strtod_l+0x55e>
 8009a34:	2200      	movs	r2, #0
 8009a36:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <_strtod_l+0xb24>)
 8009a38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009a3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a3e:	e016      	b.n	8009a6e <_strtod_l+0xa76>
 8009a40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009a42:	4f33      	ldr	r7, [pc, #204]	; (8009b10 <_strtod_l+0xb18>)
 8009a44:	e7a9      	b.n	800999a <_strtod_l+0x9a2>
 8009a46:	4b32      	ldr	r3, [pc, #200]	; (8009b10 <_strtod_l+0xb18>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a4e:	f7f6 fdaf 	bl	80005b0 <__aeabi_dmul>
 8009a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a54:	4605      	mov	r5, r0
 8009a56:	460f      	mov	r7, r1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d09e      	beq.n	800999a <_strtod_l+0x9a2>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a64:	e79d      	b.n	80099a2 <_strtod_l+0x9aa>
 8009a66:	2200      	movs	r2, #0
 8009a68:	4b28      	ldr	r3, [pc, #160]	; (8009b0c <_strtod_l+0xb14>)
 8009a6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a6e:	4f27      	ldr	r7, [pc, #156]	; (8009b0c <_strtod_l+0xb14>)
 8009a70:	e797      	b.n	80099a2 <_strtod_l+0x9aa>
 8009a72:	2200      	movs	r2, #0
 8009a74:	4b29      	ldr	r3, [pc, #164]	; (8009b1c <_strtod_l+0xb24>)
 8009a76:	4645      	mov	r5, r8
 8009a78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a7c:	e7f7      	b.n	8009a6e <_strtod_l+0xa76>
 8009a7e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009a82:	9b05      	ldr	r3, [sp, #20]
 8009a84:	46ca      	mov	sl, r9
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1bc      	bne.n	8009a04 <_strtod_l+0xa0c>
 8009a8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a90:	0d1b      	lsrs	r3, r3, #20
 8009a92:	051b      	lsls	r3, r3, #20
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d1b5      	bne.n	8009a04 <_strtod_l+0xa0c>
 8009a98:	4628      	mov	r0, r5
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f7 fbc4 	bl	8001228 <__aeabi_d2lz>
 8009aa0:	f7f6 fd58 	bl	8000554 <__aeabi_l2d>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	4639      	mov	r1, r7
 8009aac:	f7f6 fbc8 	bl	8000240 <__aeabi_dsub>
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009ab8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009abe:	ea4a 0a08 	orr.w	sl, sl, r8
 8009ac2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009ac6:	d06c      	beq.n	8009ba2 <_strtod_l+0xbaa>
 8009ac8:	a309      	add	r3, pc, #36	; (adr r3, 8009af0 <_strtod_l+0xaf8>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7f6 ffe1 	bl	8000a94 <__aeabi_dcmplt>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	f47f acd8 	bne.w	8009488 <_strtod_l+0x490>
 8009ad8:	a307      	add	r3, pc, #28	; (adr r3, 8009af8 <_strtod_l+0xb00>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ae2:	f7f6 fff5 	bl	8000ad0 <__aeabi_dcmpgt>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d08c      	beq.n	8009a04 <_strtod_l+0xa0c>
 8009aea:	e4cd      	b.n	8009488 <_strtod_l+0x490>
 8009aec:	f3af 8000 	nop.w
 8009af0:	94a03595 	.word	0x94a03595
 8009af4:	3fdfffff 	.word	0x3fdfffff
 8009af8:	35afe535 	.word	0x35afe535
 8009afc:	3fe00000 	.word	0x3fe00000
 8009b00:	000fffff 	.word	0x000fffff
 8009b04:	7ff00000 	.word	0x7ff00000
 8009b08:	7fefffff 	.word	0x7fefffff
 8009b0c:	3ff00000 	.word	0x3ff00000
 8009b10:	3fe00000 	.word	0x3fe00000
 8009b14:	7fe00000 	.word	0x7fe00000
 8009b18:	7c9fffff 	.word	0x7c9fffff
 8009b1c:	bff00000 	.word	0xbff00000
 8009b20:	9b05      	ldr	r3, [sp, #20]
 8009b22:	b333      	cbz	r3, 8009b72 <_strtod_l+0xb7a>
 8009b24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b2a:	d822      	bhi.n	8009b72 <_strtod_l+0xb7a>
 8009b2c:	a328      	add	r3, pc, #160	; (adr r3, 8009bd0 <_strtod_l+0xbd8>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	4628      	mov	r0, r5
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 ffb7 	bl	8000aa8 <__aeabi_dcmple>
 8009b3a:	b1a0      	cbz	r0, 8009b66 <_strtod_l+0xb6e>
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f7f7 f80e 	bl	8000b60 <__aeabi_d2uiz>
 8009b44:	2801      	cmp	r0, #1
 8009b46:	bf38      	it	cc
 8009b48:	2001      	movcc	r0, #1
 8009b4a:	f7f6 fcb7 	bl	80004bc <__aeabi_ui2d>
 8009b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b50:	4605      	mov	r5, r0
 8009b52:	460f      	mov	r7, r1
 8009b54:	bb03      	cbnz	r3, 8009b98 <_strtod_l+0xba0>
 8009b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b5a:	9014      	str	r0, [sp, #80]	; 0x50
 8009b5c:	9315      	str	r3, [sp, #84]	; 0x54
 8009b5e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b62:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b6a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	9311      	str	r3, [sp, #68]	; 0x44
 8009b72:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009b74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b76:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009b7a:	f7ff f8e9 	bl	8008d50 <__ulp>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4640      	mov	r0, r8
 8009b84:	4649      	mov	r1, r9
 8009b86:	f7f6 fd13 	bl	80005b0 <__aeabi_dmul>
 8009b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b8e:	f7f6 fb59 	bl	8000244 <__adddf3>
 8009b92:	4680      	mov	r8, r0
 8009b94:	4689      	mov	r9, r1
 8009b96:	e774      	b.n	8009a82 <_strtod_l+0xa8a>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009ba0:	e7dd      	b.n	8009b5e <_strtod_l+0xb66>
 8009ba2:	a30d      	add	r3, pc, #52	; (adr r3, 8009bd8 <_strtod_l+0xbe0>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f7f6 ff74 	bl	8000a94 <__aeabi_dcmplt>
 8009bac:	e79b      	b.n	8009ae6 <_strtod_l+0xaee>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8009bb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	f7ff ba5b 	b.w	8009072 <_strtod_l+0x7a>
 8009bbc:	2a65      	cmp	r2, #101	; 0x65
 8009bbe:	f43f ab52 	beq.w	8009266 <_strtod_l+0x26e>
 8009bc2:	2a45      	cmp	r2, #69	; 0x45
 8009bc4:	f43f ab4f 	beq.w	8009266 <_strtod_l+0x26e>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f7ff bb87 	b.w	80092dc <_strtod_l+0x2e4>
 8009bce:	bf00      	nop
 8009bd0:	ffc00000 	.word	0xffc00000
 8009bd4:	41dfffff 	.word	0x41dfffff
 8009bd8:	94a03595 	.word	0x94a03595
 8009bdc:	3fcfffff 	.word	0x3fcfffff

08009be0 <_strtod_r>:
 8009be0:	4b01      	ldr	r3, [pc, #4]	; (8009be8 <_strtod_r+0x8>)
 8009be2:	f7ff ba09 	b.w	8008ff8 <_strtod_l>
 8009be6:	bf00      	nop
 8009be8:	2000007c 	.word	0x2000007c

08009bec <_strtol_l.constprop.0>:
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf2:	4686      	mov	lr, r0
 8009bf4:	4690      	mov	r8, r2
 8009bf6:	d001      	beq.n	8009bfc <_strtol_l.constprop.0+0x10>
 8009bf8:	2b24      	cmp	r3, #36	; 0x24
 8009bfa:	d906      	bls.n	8009c0a <_strtol_l.constprop.0+0x1e>
 8009bfc:	f7fd fd92 	bl	8007724 <__errno>
 8009c00:	2316      	movs	r3, #22
 8009c02:	6003      	str	r3, [r0, #0]
 8009c04:	2000      	movs	r0, #0
 8009c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c0a:	460d      	mov	r5, r1
 8009c0c:	4835      	ldr	r0, [pc, #212]	; (8009ce4 <_strtol_l.constprop.0+0xf8>)
 8009c0e:	462a      	mov	r2, r5
 8009c10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c14:	5d06      	ldrb	r6, [r0, r4]
 8009c16:	f016 0608 	ands.w	r6, r6, #8
 8009c1a:	d1f8      	bne.n	8009c0e <_strtol_l.constprop.0+0x22>
 8009c1c:	2c2d      	cmp	r4, #45	; 0x2d
 8009c1e:	d12e      	bne.n	8009c7e <_strtol_l.constprop.0+0x92>
 8009c20:	2601      	movs	r6, #1
 8009c22:	782c      	ldrb	r4, [r5, #0]
 8009c24:	1c95      	adds	r5, r2, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d057      	beq.n	8009cda <_strtol_l.constprop.0+0xee>
 8009c2a:	2b10      	cmp	r3, #16
 8009c2c:	d109      	bne.n	8009c42 <_strtol_l.constprop.0+0x56>
 8009c2e:	2c30      	cmp	r4, #48	; 0x30
 8009c30:	d107      	bne.n	8009c42 <_strtol_l.constprop.0+0x56>
 8009c32:	782a      	ldrb	r2, [r5, #0]
 8009c34:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009c38:	2a58      	cmp	r2, #88	; 0x58
 8009c3a:	d149      	bne.n	8009cd0 <_strtol_l.constprop.0+0xe4>
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	786c      	ldrb	r4, [r5, #1]
 8009c40:	3502      	adds	r5, #2
 8009c42:	2200      	movs	r2, #0
 8009c44:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009c48:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c4c:	fbbc f9f3 	udiv	r9, ip, r3
 8009c50:	4610      	mov	r0, r2
 8009c52:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c56:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009c5a:	2f09      	cmp	r7, #9
 8009c5c:	d814      	bhi.n	8009c88 <_strtol_l.constprop.0+0x9c>
 8009c5e:	463c      	mov	r4, r7
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	dd20      	ble.n	8009ca6 <_strtol_l.constprop.0+0xba>
 8009c64:	1c57      	adds	r7, r2, #1
 8009c66:	d007      	beq.n	8009c78 <_strtol_l.constprop.0+0x8c>
 8009c68:	4581      	cmp	r9, r0
 8009c6a:	d319      	bcc.n	8009ca0 <_strtol_l.constprop.0+0xb4>
 8009c6c:	d101      	bne.n	8009c72 <_strtol_l.constprop.0+0x86>
 8009c6e:	45a2      	cmp	sl, r4
 8009c70:	db16      	blt.n	8009ca0 <_strtol_l.constprop.0+0xb4>
 8009c72:	2201      	movs	r2, #1
 8009c74:	fb00 4003 	mla	r0, r0, r3, r4
 8009c78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c7c:	e7eb      	b.n	8009c56 <_strtol_l.constprop.0+0x6a>
 8009c7e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c80:	bf04      	itt	eq
 8009c82:	782c      	ldrbeq	r4, [r5, #0]
 8009c84:	1c95      	addeq	r5, r2, #2
 8009c86:	e7ce      	b.n	8009c26 <_strtol_l.constprop.0+0x3a>
 8009c88:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009c8c:	2f19      	cmp	r7, #25
 8009c8e:	d801      	bhi.n	8009c94 <_strtol_l.constprop.0+0xa8>
 8009c90:	3c37      	subs	r4, #55	; 0x37
 8009c92:	e7e5      	b.n	8009c60 <_strtol_l.constprop.0+0x74>
 8009c94:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009c98:	2f19      	cmp	r7, #25
 8009c9a:	d804      	bhi.n	8009ca6 <_strtol_l.constprop.0+0xba>
 8009c9c:	3c57      	subs	r4, #87	; 0x57
 8009c9e:	e7df      	b.n	8009c60 <_strtol_l.constprop.0+0x74>
 8009ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca4:	e7e8      	b.n	8009c78 <_strtol_l.constprop.0+0x8c>
 8009ca6:	1c53      	adds	r3, r2, #1
 8009ca8:	d108      	bne.n	8009cbc <_strtol_l.constprop.0+0xd0>
 8009caa:	2322      	movs	r3, #34	; 0x22
 8009cac:	4660      	mov	r0, ip
 8009cae:	f8ce 3000 	str.w	r3, [lr]
 8009cb2:	f1b8 0f00 	cmp.w	r8, #0
 8009cb6:	d0a6      	beq.n	8009c06 <_strtol_l.constprop.0+0x1a>
 8009cb8:	1e69      	subs	r1, r5, #1
 8009cba:	e006      	b.n	8009cca <_strtol_l.constprop.0+0xde>
 8009cbc:	b106      	cbz	r6, 8009cc0 <_strtol_l.constprop.0+0xd4>
 8009cbe:	4240      	negs	r0, r0
 8009cc0:	f1b8 0f00 	cmp.w	r8, #0
 8009cc4:	d09f      	beq.n	8009c06 <_strtol_l.constprop.0+0x1a>
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	d1f6      	bne.n	8009cb8 <_strtol_l.constprop.0+0xcc>
 8009cca:	f8c8 1000 	str.w	r1, [r8]
 8009cce:	e79a      	b.n	8009c06 <_strtol_l.constprop.0+0x1a>
 8009cd0:	2430      	movs	r4, #48	; 0x30
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1b5      	bne.n	8009c42 <_strtol_l.constprop.0+0x56>
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	e7b3      	b.n	8009c42 <_strtol_l.constprop.0+0x56>
 8009cda:	2c30      	cmp	r4, #48	; 0x30
 8009cdc:	d0a9      	beq.n	8009c32 <_strtol_l.constprop.0+0x46>
 8009cde:	230a      	movs	r3, #10
 8009ce0:	e7af      	b.n	8009c42 <_strtol_l.constprop.0+0x56>
 8009ce2:	bf00      	nop
 8009ce4:	0800b1a1 	.word	0x0800b1a1

08009ce8 <_strtol_r>:
 8009ce8:	f7ff bf80 	b.w	8009bec <_strtol_l.constprop.0>

08009cec <__ssputs_r>:
 8009cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf0:	461f      	mov	r7, r3
 8009cf2:	688e      	ldr	r6, [r1, #8]
 8009cf4:	4682      	mov	sl, r0
 8009cf6:	42be      	cmp	r6, r7
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	4690      	mov	r8, r2
 8009cfc:	680b      	ldr	r3, [r1, #0]
 8009cfe:	d82c      	bhi.n	8009d5a <__ssputs_r+0x6e>
 8009d00:	898a      	ldrh	r2, [r1, #12]
 8009d02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d06:	d026      	beq.n	8009d56 <__ssputs_r+0x6a>
 8009d08:	6965      	ldr	r5, [r4, #20]
 8009d0a:	6909      	ldr	r1, [r1, #16]
 8009d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d10:	eba3 0901 	sub.w	r9, r3, r1
 8009d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d18:	1c7b      	adds	r3, r7, #1
 8009d1a:	444b      	add	r3, r9
 8009d1c:	106d      	asrs	r5, r5, #1
 8009d1e:	429d      	cmp	r5, r3
 8009d20:	bf38      	it	cc
 8009d22:	461d      	movcc	r5, r3
 8009d24:	0553      	lsls	r3, r2, #21
 8009d26:	d527      	bpl.n	8009d78 <__ssputs_r+0x8c>
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7fe fc19 	bl	8008560 <_malloc_r>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	b360      	cbz	r0, 8009d8c <__ssputs_r+0xa0>
 8009d32:	464a      	mov	r2, r9
 8009d34:	6921      	ldr	r1, [r4, #16]
 8009d36:	f000 fa17 	bl	800a168 <memcpy>
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	6126      	str	r6, [r4, #16]
 8009d48:	444e      	add	r6, r9
 8009d4a:	6026      	str	r6, [r4, #0]
 8009d4c:	463e      	mov	r6, r7
 8009d4e:	6165      	str	r5, [r4, #20]
 8009d50:	eba5 0509 	sub.w	r5, r5, r9
 8009d54:	60a5      	str	r5, [r4, #8]
 8009d56:	42be      	cmp	r6, r7
 8009d58:	d900      	bls.n	8009d5c <__ssputs_r+0x70>
 8009d5a:	463e      	mov	r6, r7
 8009d5c:	4632      	mov	r2, r6
 8009d5e:	4641      	mov	r1, r8
 8009d60:	6820      	ldr	r0, [r4, #0]
 8009d62:	f000 f9c5 	bl	800a0f0 <memmove>
 8009d66:	2000      	movs	r0, #0
 8009d68:	68a3      	ldr	r3, [r4, #8]
 8009d6a:	1b9b      	subs	r3, r3, r6
 8009d6c:	60a3      	str	r3, [r4, #8]
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	4433      	add	r3, r6
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d78:	462a      	mov	r2, r5
 8009d7a:	f000 fda6 	bl	800a8ca <_realloc_r>
 8009d7e:	4606      	mov	r6, r0
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d1e0      	bne.n	8009d46 <__ssputs_r+0x5a>
 8009d84:	4650      	mov	r0, sl
 8009d86:	6921      	ldr	r1, [r4, #16]
 8009d88:	f7fe fb7a 	bl	8008480 <_free_r>
 8009d8c:	230c      	movs	r3, #12
 8009d8e:	f8ca 3000 	str.w	r3, [sl]
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	e7e9      	b.n	8009d74 <__ssputs_r+0x88>

08009da0 <_svfiprintf_r>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	4698      	mov	r8, r3
 8009da6:	898b      	ldrh	r3, [r1, #12]
 8009da8:	4607      	mov	r7, r0
 8009daa:	061b      	lsls	r3, r3, #24
 8009dac:	460d      	mov	r5, r1
 8009dae:	4614      	mov	r4, r2
 8009db0:	b09d      	sub	sp, #116	; 0x74
 8009db2:	d50e      	bpl.n	8009dd2 <_svfiprintf_r+0x32>
 8009db4:	690b      	ldr	r3, [r1, #16]
 8009db6:	b963      	cbnz	r3, 8009dd2 <_svfiprintf_r+0x32>
 8009db8:	2140      	movs	r1, #64	; 0x40
 8009dba:	f7fe fbd1 	bl	8008560 <_malloc_r>
 8009dbe:	6028      	str	r0, [r5, #0]
 8009dc0:	6128      	str	r0, [r5, #16]
 8009dc2:	b920      	cbnz	r0, 8009dce <_svfiprintf_r+0x2e>
 8009dc4:	230c      	movs	r3, #12
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e0d0      	b.n	8009f70 <_svfiprintf_r+0x1d0>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	616b      	str	r3, [r5, #20]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd6:	2320      	movs	r3, #32
 8009dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ddc:	2330      	movs	r3, #48	; 0x30
 8009dde:	f04f 0901 	mov.w	r9, #1
 8009de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009de6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009f88 <_svfiprintf_r+0x1e8>
 8009dea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dee:	4623      	mov	r3, r4
 8009df0:	469a      	mov	sl, r3
 8009df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df6:	b10a      	cbz	r2, 8009dfc <_svfiprintf_r+0x5c>
 8009df8:	2a25      	cmp	r2, #37	; 0x25
 8009dfa:	d1f9      	bne.n	8009df0 <_svfiprintf_r+0x50>
 8009dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8009e00:	d00b      	beq.n	8009e1a <_svfiprintf_r+0x7a>
 8009e02:	465b      	mov	r3, fp
 8009e04:	4622      	mov	r2, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff ff6f 	bl	8009cec <__ssputs_r>
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f000 80a9 	beq.w	8009f66 <_svfiprintf_r+0x1c6>
 8009e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e16:	445a      	add	r2, fp
 8009e18:	9209      	str	r2, [sp, #36]	; 0x24
 8009e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 80a1 	beq.w	8009f66 <_svfiprintf_r+0x1c6>
 8009e24:	2300      	movs	r3, #0
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e2e:	f10a 0a01 	add.w	sl, sl, #1
 8009e32:	9304      	str	r3, [sp, #16]
 8009e34:	9307      	str	r3, [sp, #28]
 8009e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e3c:	4654      	mov	r4, sl
 8009e3e:	2205      	movs	r2, #5
 8009e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e44:	4850      	ldr	r0, [pc, #320]	; (8009f88 <_svfiprintf_r+0x1e8>)
 8009e46:	f7fd fc9a 	bl	800777e <memchr>
 8009e4a:	9a04      	ldr	r2, [sp, #16]
 8009e4c:	b9d8      	cbnz	r0, 8009e86 <_svfiprintf_r+0xe6>
 8009e4e:	06d0      	lsls	r0, r2, #27
 8009e50:	bf44      	itt	mi
 8009e52:	2320      	movmi	r3, #32
 8009e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e58:	0711      	lsls	r1, r2, #28
 8009e5a:	bf44      	itt	mi
 8009e5c:	232b      	movmi	r3, #43	; 0x2b
 8009e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e62:	f89a 3000 	ldrb.w	r3, [sl]
 8009e66:	2b2a      	cmp	r3, #42	; 0x2a
 8009e68:	d015      	beq.n	8009e96 <_svfiprintf_r+0xf6>
 8009e6a:	4654      	mov	r4, sl
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	f04f 0c0a 	mov.w	ip, #10
 8009e72:	9a07      	ldr	r2, [sp, #28]
 8009e74:	4621      	mov	r1, r4
 8009e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e7a:	3b30      	subs	r3, #48	; 0x30
 8009e7c:	2b09      	cmp	r3, #9
 8009e7e:	d94d      	bls.n	8009f1c <_svfiprintf_r+0x17c>
 8009e80:	b1b0      	cbz	r0, 8009eb0 <_svfiprintf_r+0x110>
 8009e82:	9207      	str	r2, [sp, #28]
 8009e84:	e014      	b.n	8009eb0 <_svfiprintf_r+0x110>
 8009e86:	eba0 0308 	sub.w	r3, r0, r8
 8009e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	46a2      	mov	sl, r4
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	e7d2      	b.n	8009e3c <_svfiprintf_r+0x9c>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	1d19      	adds	r1, r3, #4
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	9103      	str	r1, [sp, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfbb      	ittet	lt
 8009ea2:	425b      	neglt	r3, r3
 8009ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea8:	9307      	strge	r3, [sp, #28]
 8009eaa:	9307      	strlt	r3, [sp, #28]
 8009eac:	bfb8      	it	lt
 8009eae:	9204      	strlt	r2, [sp, #16]
 8009eb0:	7823      	ldrb	r3, [r4, #0]
 8009eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8009eb4:	d10c      	bne.n	8009ed0 <_svfiprintf_r+0x130>
 8009eb6:	7863      	ldrb	r3, [r4, #1]
 8009eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eba:	d134      	bne.n	8009f26 <_svfiprintf_r+0x186>
 8009ebc:	9b03      	ldr	r3, [sp, #12]
 8009ebe:	3402      	adds	r4, #2
 8009ec0:	1d1a      	adds	r2, r3, #4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	9203      	str	r2, [sp, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfb8      	it	lt
 8009eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ece:	9305      	str	r3, [sp, #20]
 8009ed0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009f8c <_svfiprintf_r+0x1ec>
 8009ed4:	2203      	movs	r2, #3
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	7821      	ldrb	r1, [r4, #0]
 8009eda:	f7fd fc50 	bl	800777e <memchr>
 8009ede:	b138      	cbz	r0, 8009ef0 <_svfiprintf_r+0x150>
 8009ee0:	2240      	movs	r2, #64	; 0x40
 8009ee2:	9b04      	ldr	r3, [sp, #16]
 8009ee4:	eba0 000a 	sub.w	r0, r0, sl
 8009ee8:	4082      	lsls	r2, r0
 8009eea:	4313      	orrs	r3, r2
 8009eec:	3401      	adds	r4, #1
 8009eee:	9304      	str	r3, [sp, #16]
 8009ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef4:	2206      	movs	r2, #6
 8009ef6:	4826      	ldr	r0, [pc, #152]	; (8009f90 <_svfiprintf_r+0x1f0>)
 8009ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009efc:	f7fd fc3f 	bl	800777e <memchr>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d038      	beq.n	8009f76 <_svfiprintf_r+0x1d6>
 8009f04:	4b23      	ldr	r3, [pc, #140]	; (8009f94 <_svfiprintf_r+0x1f4>)
 8009f06:	bb1b      	cbnz	r3, 8009f50 <_svfiprintf_r+0x1b0>
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	3307      	adds	r3, #7
 8009f0c:	f023 0307 	bic.w	r3, r3, #7
 8009f10:	3308      	adds	r3, #8
 8009f12:	9303      	str	r3, [sp, #12]
 8009f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f16:	4433      	add	r3, r6
 8009f18:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1a:	e768      	b.n	8009dee <_svfiprintf_r+0x4e>
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	2001      	movs	r0, #1
 8009f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f24:	e7a6      	b.n	8009e74 <_svfiprintf_r+0xd4>
 8009f26:	2300      	movs	r3, #0
 8009f28:	f04f 0c0a 	mov.w	ip, #10
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	3401      	adds	r4, #1
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	4620      	mov	r0, r4
 8009f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f38:	3a30      	subs	r2, #48	; 0x30
 8009f3a:	2a09      	cmp	r2, #9
 8009f3c:	d903      	bls.n	8009f46 <_svfiprintf_r+0x1a6>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0c6      	beq.n	8009ed0 <_svfiprintf_r+0x130>
 8009f42:	9105      	str	r1, [sp, #20]
 8009f44:	e7c4      	b.n	8009ed0 <_svfiprintf_r+0x130>
 8009f46:	4604      	mov	r4, r0
 8009f48:	2301      	movs	r3, #1
 8009f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f4e:	e7f0      	b.n	8009f32 <_svfiprintf_r+0x192>
 8009f50:	ab03      	add	r3, sp, #12
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	462a      	mov	r2, r5
 8009f56:	4638      	mov	r0, r7
 8009f58:	4b0f      	ldr	r3, [pc, #60]	; (8009f98 <_svfiprintf_r+0x1f8>)
 8009f5a:	a904      	add	r1, sp, #16
 8009f5c:	f7fc fc7a 	bl	8006854 <_printf_float>
 8009f60:	1c42      	adds	r2, r0, #1
 8009f62:	4606      	mov	r6, r0
 8009f64:	d1d6      	bne.n	8009f14 <_svfiprintf_r+0x174>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	065b      	lsls	r3, r3, #25
 8009f6a:	f53f af2d 	bmi.w	8009dc8 <_svfiprintf_r+0x28>
 8009f6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f70:	b01d      	add	sp, #116	; 0x74
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	ab03      	add	r3, sp, #12
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	462a      	mov	r2, r5
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <_svfiprintf_r+0x1f8>)
 8009f80:	a904      	add	r1, sp, #16
 8009f82:	f7fc ff07 	bl	8006d94 <_printf_i>
 8009f86:	e7eb      	b.n	8009f60 <_svfiprintf_r+0x1c0>
 8009f88:	0800b2a1 	.word	0x0800b2a1
 8009f8c:	0800b2a7 	.word	0x0800b2a7
 8009f90:	0800b2ab 	.word	0x0800b2ab
 8009f94:	08006855 	.word	0x08006855
 8009f98:	08009ced 	.word	0x08009ced

08009f9c <__sflush_r>:
 8009f9c:	898a      	ldrh	r2, [r1, #12]
 8009f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	0710      	lsls	r0, r2, #28
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	d457      	bmi.n	800a058 <__sflush_r+0xbc>
 8009fa8:	684b      	ldr	r3, [r1, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	dc04      	bgt.n	8009fb8 <__sflush_r+0x1c>
 8009fae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dc01      	bgt.n	8009fb8 <__sflush_r+0x1c>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	d0fa      	beq.n	8009fb4 <__sflush_r+0x18>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fc4:	682f      	ldr	r7, [r5, #0]
 8009fc6:	6a21      	ldr	r1, [r4, #32]
 8009fc8:	602b      	str	r3, [r5, #0]
 8009fca:	d032      	beq.n	800a032 <__sflush_r+0x96>
 8009fcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	075a      	lsls	r2, r3, #29
 8009fd2:	d505      	bpl.n	8009fe0 <__sflush_r+0x44>
 8009fd4:	6863      	ldr	r3, [r4, #4]
 8009fd6:	1ac0      	subs	r0, r0, r3
 8009fd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fda:	b10b      	cbz	r3, 8009fe0 <__sflush_r+0x44>
 8009fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fde:	1ac0      	subs	r0, r0, r3
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	6a21      	ldr	r1, [r4, #32]
 8009fea:	47b0      	blx	r6
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	d106      	bne.n	800a000 <__sflush_r+0x64>
 8009ff2:	6829      	ldr	r1, [r5, #0]
 8009ff4:	291d      	cmp	r1, #29
 8009ff6:	d82b      	bhi.n	800a050 <__sflush_r+0xb4>
 8009ff8:	4a28      	ldr	r2, [pc, #160]	; (800a09c <__sflush_r+0x100>)
 8009ffa:	410a      	asrs	r2, r1
 8009ffc:	07d6      	lsls	r6, r2, #31
 8009ffe:	d427      	bmi.n	800a050 <__sflush_r+0xb4>
 800a000:	2200      	movs	r2, #0
 800a002:	6062      	str	r2, [r4, #4]
 800a004:	6922      	ldr	r2, [r4, #16]
 800a006:	04d9      	lsls	r1, r3, #19
 800a008:	6022      	str	r2, [r4, #0]
 800a00a:	d504      	bpl.n	800a016 <__sflush_r+0x7a>
 800a00c:	1c42      	adds	r2, r0, #1
 800a00e:	d101      	bne.n	800a014 <__sflush_r+0x78>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	b903      	cbnz	r3, 800a016 <__sflush_r+0x7a>
 800a014:	6560      	str	r0, [r4, #84]	; 0x54
 800a016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a018:	602f      	str	r7, [r5, #0]
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d0ca      	beq.n	8009fb4 <__sflush_r+0x18>
 800a01e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a022:	4299      	cmp	r1, r3
 800a024:	d002      	beq.n	800a02c <__sflush_r+0x90>
 800a026:	4628      	mov	r0, r5
 800a028:	f7fe fa2a 	bl	8008480 <_free_r>
 800a02c:	2000      	movs	r0, #0
 800a02e:	6360      	str	r0, [r4, #52]	; 0x34
 800a030:	e7c1      	b.n	8009fb6 <__sflush_r+0x1a>
 800a032:	2301      	movs	r3, #1
 800a034:	4628      	mov	r0, r5
 800a036:	47b0      	blx	r6
 800a038:	1c41      	adds	r1, r0, #1
 800a03a:	d1c8      	bne.n	8009fce <__sflush_r+0x32>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0c5      	beq.n	8009fce <__sflush_r+0x32>
 800a042:	2b1d      	cmp	r3, #29
 800a044:	d001      	beq.n	800a04a <__sflush_r+0xae>
 800a046:	2b16      	cmp	r3, #22
 800a048:	d101      	bne.n	800a04e <__sflush_r+0xb2>
 800a04a:	602f      	str	r7, [r5, #0]
 800a04c:	e7b2      	b.n	8009fb4 <__sflush_r+0x18>
 800a04e:	89a3      	ldrh	r3, [r4, #12]
 800a050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a054:	81a3      	strh	r3, [r4, #12]
 800a056:	e7ae      	b.n	8009fb6 <__sflush_r+0x1a>
 800a058:	690f      	ldr	r7, [r1, #16]
 800a05a:	2f00      	cmp	r7, #0
 800a05c:	d0aa      	beq.n	8009fb4 <__sflush_r+0x18>
 800a05e:	0793      	lsls	r3, r2, #30
 800a060:	bf18      	it	ne
 800a062:	2300      	movne	r3, #0
 800a064:	680e      	ldr	r6, [r1, #0]
 800a066:	bf08      	it	eq
 800a068:	694b      	ldreq	r3, [r1, #20]
 800a06a:	1bf6      	subs	r6, r6, r7
 800a06c:	600f      	str	r7, [r1, #0]
 800a06e:	608b      	str	r3, [r1, #8]
 800a070:	2e00      	cmp	r6, #0
 800a072:	dd9f      	ble.n	8009fb4 <__sflush_r+0x18>
 800a074:	4633      	mov	r3, r6
 800a076:	463a      	mov	r2, r7
 800a078:	4628      	mov	r0, r5
 800a07a:	6a21      	ldr	r1, [r4, #32]
 800a07c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a080:	47e0      	blx	ip
 800a082:	2800      	cmp	r0, #0
 800a084:	dc06      	bgt.n	800a094 <__sflush_r+0xf8>
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	e790      	b.n	8009fb6 <__sflush_r+0x1a>
 800a094:	4407      	add	r7, r0
 800a096:	1a36      	subs	r6, r6, r0
 800a098:	e7ea      	b.n	800a070 <__sflush_r+0xd4>
 800a09a:	bf00      	nop
 800a09c:	dfbffffe 	.word	0xdfbffffe

0800a0a0 <_fflush_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	690b      	ldr	r3, [r1, #16]
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	b913      	cbnz	r3, 800a0b0 <_fflush_r+0x10>
 800a0aa:	2500      	movs	r5, #0
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	bd38      	pop	{r3, r4, r5, pc}
 800a0b0:	b118      	cbz	r0, 800a0ba <_fflush_r+0x1a>
 800a0b2:	6a03      	ldr	r3, [r0, #32]
 800a0b4:	b90b      	cbnz	r3, 800a0ba <_fflush_r+0x1a>
 800a0b6:	f7fd fa29 	bl	800750c <__sinit>
 800a0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0f3      	beq.n	800a0aa <_fflush_r+0xa>
 800a0c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0c4:	07d0      	lsls	r0, r2, #31
 800a0c6:	d404      	bmi.n	800a0d2 <_fflush_r+0x32>
 800a0c8:	0599      	lsls	r1, r3, #22
 800a0ca:	d402      	bmi.n	800a0d2 <_fflush_r+0x32>
 800a0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ce:	f7fd fb54 	bl	800777a <__retarget_lock_acquire_recursive>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f7ff ff61 	bl	8009f9c <__sflush_r>
 800a0da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0dc:	4605      	mov	r5, r0
 800a0de:	07da      	lsls	r2, r3, #31
 800a0e0:	d4e4      	bmi.n	800a0ac <_fflush_r+0xc>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	059b      	lsls	r3, r3, #22
 800a0e6:	d4e1      	bmi.n	800a0ac <_fflush_r+0xc>
 800a0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ea:	f7fd fb47 	bl	800777c <__retarget_lock_release_recursive>
 800a0ee:	e7dd      	b.n	800a0ac <_fflush_r+0xc>

0800a0f0 <memmove>:
 800a0f0:	4288      	cmp	r0, r1
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	eb01 0402 	add.w	r4, r1, r2
 800a0f8:	d902      	bls.n	800a100 <memmove+0x10>
 800a0fa:	4284      	cmp	r4, r0
 800a0fc:	4623      	mov	r3, r4
 800a0fe:	d807      	bhi.n	800a110 <memmove+0x20>
 800a100:	1e43      	subs	r3, r0, #1
 800a102:	42a1      	cmp	r1, r4
 800a104:	d008      	beq.n	800a118 <memmove+0x28>
 800a106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a10a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a10e:	e7f8      	b.n	800a102 <memmove+0x12>
 800a110:	4601      	mov	r1, r0
 800a112:	4402      	add	r2, r0
 800a114:	428a      	cmp	r2, r1
 800a116:	d100      	bne.n	800a11a <memmove+0x2a>
 800a118:	bd10      	pop	{r4, pc}
 800a11a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a11e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a122:	e7f7      	b.n	800a114 <memmove+0x24>

0800a124 <strncmp>:
 800a124:	b510      	push	{r4, lr}
 800a126:	b16a      	cbz	r2, 800a144 <strncmp+0x20>
 800a128:	3901      	subs	r1, #1
 800a12a:	1884      	adds	r4, r0, r2
 800a12c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a130:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a134:	429a      	cmp	r2, r3
 800a136:	d103      	bne.n	800a140 <strncmp+0x1c>
 800a138:	42a0      	cmp	r0, r4
 800a13a:	d001      	beq.n	800a140 <strncmp+0x1c>
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d1f5      	bne.n	800a12c <strncmp+0x8>
 800a140:	1ad0      	subs	r0, r2, r3
 800a142:	bd10      	pop	{r4, pc}
 800a144:	4610      	mov	r0, r2
 800a146:	e7fc      	b.n	800a142 <strncmp+0x1e>

0800a148 <_sbrk_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	2300      	movs	r3, #0
 800a14c:	4d05      	ldr	r5, [pc, #20]	; (800a164 <_sbrk_r+0x1c>)
 800a14e:	4604      	mov	r4, r0
 800a150:	4608      	mov	r0, r1
 800a152:	602b      	str	r3, [r5, #0]
 800a154:	f7f8 f854 	bl	8002200 <_sbrk>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d102      	bne.n	800a162 <_sbrk_r+0x1a>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	b103      	cbz	r3, 800a162 <_sbrk_r+0x1a>
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	2000070c 	.word	0x2000070c

0800a168 <memcpy>:
 800a168:	440a      	add	r2, r1
 800a16a:	4291      	cmp	r1, r2
 800a16c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a170:	d100      	bne.n	800a174 <memcpy+0xc>
 800a172:	4770      	bx	lr
 800a174:	b510      	push	{r4, lr}
 800a176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a17a:	4291      	cmp	r1, r2
 800a17c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a180:	d1f9      	bne.n	800a176 <memcpy+0xe>
 800a182:	bd10      	pop	{r4, pc}

0800a184 <nan>:
 800a184:	2000      	movs	r0, #0
 800a186:	4901      	ldr	r1, [pc, #4]	; (800a18c <nan+0x8>)
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	7ff80000 	.word	0x7ff80000

0800a190 <__assert_func>:
 800a190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a192:	4614      	mov	r4, r2
 800a194:	461a      	mov	r2, r3
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <__assert_func+0x2c>)
 800a198:	4605      	mov	r5, r0
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68d8      	ldr	r0, [r3, #12]
 800a19e:	b14c      	cbz	r4, 800a1b4 <__assert_func+0x24>
 800a1a0:	4b07      	ldr	r3, [pc, #28]	; (800a1c0 <__assert_func+0x30>)
 800a1a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1a6:	9100      	str	r1, [sp, #0]
 800a1a8:	462b      	mov	r3, r5
 800a1aa:	4906      	ldr	r1, [pc, #24]	; (800a1c4 <__assert_func+0x34>)
 800a1ac:	f000 fbca 	bl	800a944 <fiprintf>
 800a1b0:	f000 fbda 	bl	800a968 <abort>
 800a1b4:	4b04      	ldr	r3, [pc, #16]	; (800a1c8 <__assert_func+0x38>)
 800a1b6:	461c      	mov	r4, r3
 800a1b8:	e7f3      	b.n	800a1a2 <__assert_func+0x12>
 800a1ba:	bf00      	nop
 800a1bc:	20000078 	.word	0x20000078
 800a1c0:	0800b2ba 	.word	0x0800b2ba
 800a1c4:	0800b2c7 	.word	0x0800b2c7
 800a1c8:	0800b2f5 	.word	0x0800b2f5

0800a1cc <_calloc_r>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	fba1 5402 	umull	r5, r4, r1, r2
 800a1d2:	b934      	cbnz	r4, 800a1e2 <_calloc_r+0x16>
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	f7fe f9c3 	bl	8008560 <_malloc_r>
 800a1da:	4606      	mov	r6, r0
 800a1dc:	b928      	cbnz	r0, 800a1ea <_calloc_r+0x1e>
 800a1de:	4630      	mov	r0, r6
 800a1e0:	bd70      	pop	{r4, r5, r6, pc}
 800a1e2:	220c      	movs	r2, #12
 800a1e4:	2600      	movs	r6, #0
 800a1e6:	6002      	str	r2, [r0, #0]
 800a1e8:	e7f9      	b.n	800a1de <_calloc_r+0x12>
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f7fd fa47 	bl	8007680 <memset>
 800a1f2:	e7f4      	b.n	800a1de <_calloc_r+0x12>

0800a1f4 <rshift>:
 800a1f4:	6903      	ldr	r3, [r0, #16]
 800a1f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1fe:	f100 0414 	add.w	r4, r0, #20
 800a202:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a206:	dd46      	ble.n	800a296 <rshift+0xa2>
 800a208:	f011 011f 	ands.w	r1, r1, #31
 800a20c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a210:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a214:	d10c      	bne.n	800a230 <rshift+0x3c>
 800a216:	4629      	mov	r1, r5
 800a218:	f100 0710 	add.w	r7, r0, #16
 800a21c:	42b1      	cmp	r1, r6
 800a21e:	d335      	bcc.n	800a28c <rshift+0x98>
 800a220:	1a9b      	subs	r3, r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	1eea      	subs	r2, r5, #3
 800a226:	4296      	cmp	r6, r2
 800a228:	bf38      	it	cc
 800a22a:	2300      	movcc	r3, #0
 800a22c:	4423      	add	r3, r4
 800a22e:	e015      	b.n	800a25c <rshift+0x68>
 800a230:	46a1      	mov	r9, r4
 800a232:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a236:	f1c1 0820 	rsb	r8, r1, #32
 800a23a:	40cf      	lsrs	r7, r1
 800a23c:	f105 0e04 	add.w	lr, r5, #4
 800a240:	4576      	cmp	r6, lr
 800a242:	46f4      	mov	ip, lr
 800a244:	d816      	bhi.n	800a274 <rshift+0x80>
 800a246:	1a9a      	subs	r2, r3, r2
 800a248:	0092      	lsls	r2, r2, #2
 800a24a:	3a04      	subs	r2, #4
 800a24c:	3501      	adds	r5, #1
 800a24e:	42ae      	cmp	r6, r5
 800a250:	bf38      	it	cc
 800a252:	2200      	movcc	r2, #0
 800a254:	18a3      	adds	r3, r4, r2
 800a256:	50a7      	str	r7, [r4, r2]
 800a258:	b107      	cbz	r7, 800a25c <rshift+0x68>
 800a25a:	3304      	adds	r3, #4
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	eba3 0204 	sub.w	r2, r3, r4
 800a262:	bf08      	it	eq
 800a264:	2300      	moveq	r3, #0
 800a266:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a26a:	6102      	str	r2, [r0, #16]
 800a26c:	bf08      	it	eq
 800a26e:	6143      	streq	r3, [r0, #20]
 800a270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a274:	f8dc c000 	ldr.w	ip, [ip]
 800a278:	fa0c fc08 	lsl.w	ip, ip, r8
 800a27c:	ea4c 0707 	orr.w	r7, ip, r7
 800a280:	f849 7b04 	str.w	r7, [r9], #4
 800a284:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a288:	40cf      	lsrs	r7, r1
 800a28a:	e7d9      	b.n	800a240 <rshift+0x4c>
 800a28c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a290:	f847 cf04 	str.w	ip, [r7, #4]!
 800a294:	e7c2      	b.n	800a21c <rshift+0x28>
 800a296:	4623      	mov	r3, r4
 800a298:	e7e0      	b.n	800a25c <rshift+0x68>

0800a29a <__hexdig_fun>:
 800a29a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a29e:	2b09      	cmp	r3, #9
 800a2a0:	d802      	bhi.n	800a2a8 <__hexdig_fun+0xe>
 800a2a2:	3820      	subs	r0, #32
 800a2a4:	b2c0      	uxtb	r0, r0
 800a2a6:	4770      	bx	lr
 800a2a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a2ac:	2b05      	cmp	r3, #5
 800a2ae:	d801      	bhi.n	800a2b4 <__hexdig_fun+0x1a>
 800a2b0:	3847      	subs	r0, #71	; 0x47
 800a2b2:	e7f7      	b.n	800a2a4 <__hexdig_fun+0xa>
 800a2b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a2b8:	2b05      	cmp	r3, #5
 800a2ba:	d801      	bhi.n	800a2c0 <__hexdig_fun+0x26>
 800a2bc:	3827      	subs	r0, #39	; 0x27
 800a2be:	e7f1      	b.n	800a2a4 <__hexdig_fun+0xa>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	4770      	bx	lr

0800a2c4 <__gethex>:
 800a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	4681      	mov	r9, r0
 800a2ca:	468a      	mov	sl, r1
 800a2cc:	4617      	mov	r7, r2
 800a2ce:	680a      	ldr	r2, [r1, #0]
 800a2d0:	b085      	sub	sp, #20
 800a2d2:	f102 0b02 	add.w	fp, r2, #2
 800a2d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a2da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	32fe      	adds	r2, #254	; 0xfe
 800a2e2:	eb02 030b 	add.w	r3, r2, fp
 800a2e6:	46d8      	mov	r8, fp
 800a2e8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	2830      	cmp	r0, #48	; 0x30
 800a2f0:	d0f7      	beq.n	800a2e2 <__gethex+0x1e>
 800a2f2:	f7ff ffd2 	bl	800a29a <__hexdig_fun>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d138      	bne.n	800a36e <__gethex+0xaa>
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	4640      	mov	r0, r8
 800a300:	49a7      	ldr	r1, [pc, #668]	; (800a5a0 <__gethex+0x2dc>)
 800a302:	f7ff ff0f 	bl	800a124 <strncmp>
 800a306:	4606      	mov	r6, r0
 800a308:	2800      	cmp	r0, #0
 800a30a:	d169      	bne.n	800a3e0 <__gethex+0x11c>
 800a30c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a310:	465d      	mov	r5, fp
 800a312:	f7ff ffc2 	bl	800a29a <__hexdig_fun>
 800a316:	2800      	cmp	r0, #0
 800a318:	d064      	beq.n	800a3e4 <__gethex+0x120>
 800a31a:	465a      	mov	r2, fp
 800a31c:	7810      	ldrb	r0, [r2, #0]
 800a31e:	4690      	mov	r8, r2
 800a320:	2830      	cmp	r0, #48	; 0x30
 800a322:	f102 0201 	add.w	r2, r2, #1
 800a326:	d0f9      	beq.n	800a31c <__gethex+0x58>
 800a328:	f7ff ffb7 	bl	800a29a <__hexdig_fun>
 800a32c:	2301      	movs	r3, #1
 800a32e:	fab0 f480 	clz	r4, r0
 800a332:	465e      	mov	r6, fp
 800a334:	0964      	lsrs	r4, r4, #5
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	4642      	mov	r2, r8
 800a33a:	4615      	mov	r5, r2
 800a33c:	7828      	ldrb	r0, [r5, #0]
 800a33e:	3201      	adds	r2, #1
 800a340:	f7ff ffab 	bl	800a29a <__hexdig_fun>
 800a344:	2800      	cmp	r0, #0
 800a346:	d1f8      	bne.n	800a33a <__gethex+0x76>
 800a348:	2201      	movs	r2, #1
 800a34a:	4628      	mov	r0, r5
 800a34c:	4994      	ldr	r1, [pc, #592]	; (800a5a0 <__gethex+0x2dc>)
 800a34e:	f7ff fee9 	bl	800a124 <strncmp>
 800a352:	b978      	cbnz	r0, 800a374 <__gethex+0xb0>
 800a354:	b946      	cbnz	r6, 800a368 <__gethex+0xa4>
 800a356:	1c6e      	adds	r6, r5, #1
 800a358:	4632      	mov	r2, r6
 800a35a:	4615      	mov	r5, r2
 800a35c:	7828      	ldrb	r0, [r5, #0]
 800a35e:	3201      	adds	r2, #1
 800a360:	f7ff ff9b 	bl	800a29a <__hexdig_fun>
 800a364:	2800      	cmp	r0, #0
 800a366:	d1f8      	bne.n	800a35a <__gethex+0x96>
 800a368:	1b73      	subs	r3, r6, r5
 800a36a:	009e      	lsls	r6, r3, #2
 800a36c:	e004      	b.n	800a378 <__gethex+0xb4>
 800a36e:	2400      	movs	r4, #0
 800a370:	4626      	mov	r6, r4
 800a372:	e7e1      	b.n	800a338 <__gethex+0x74>
 800a374:	2e00      	cmp	r6, #0
 800a376:	d1f7      	bne.n	800a368 <__gethex+0xa4>
 800a378:	782b      	ldrb	r3, [r5, #0]
 800a37a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a37e:	2b50      	cmp	r3, #80	; 0x50
 800a380:	d13d      	bne.n	800a3fe <__gethex+0x13a>
 800a382:	786b      	ldrb	r3, [r5, #1]
 800a384:	2b2b      	cmp	r3, #43	; 0x2b
 800a386:	d02f      	beq.n	800a3e8 <__gethex+0x124>
 800a388:	2b2d      	cmp	r3, #45	; 0x2d
 800a38a:	d031      	beq.n	800a3f0 <__gethex+0x12c>
 800a38c:	f04f 0b00 	mov.w	fp, #0
 800a390:	1c69      	adds	r1, r5, #1
 800a392:	7808      	ldrb	r0, [r1, #0]
 800a394:	f7ff ff81 	bl	800a29a <__hexdig_fun>
 800a398:	1e42      	subs	r2, r0, #1
 800a39a:	b2d2      	uxtb	r2, r2
 800a39c:	2a18      	cmp	r2, #24
 800a39e:	d82e      	bhi.n	800a3fe <__gethex+0x13a>
 800a3a0:	f1a0 0210 	sub.w	r2, r0, #16
 800a3a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3a8:	f7ff ff77 	bl	800a29a <__hexdig_fun>
 800a3ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800a3b0:	fa5f fc8c 	uxtb.w	ip, ip
 800a3b4:	f1bc 0f18 	cmp.w	ip, #24
 800a3b8:	d91d      	bls.n	800a3f6 <__gethex+0x132>
 800a3ba:	f1bb 0f00 	cmp.w	fp, #0
 800a3be:	d000      	beq.n	800a3c2 <__gethex+0xfe>
 800a3c0:	4252      	negs	r2, r2
 800a3c2:	4416      	add	r6, r2
 800a3c4:	f8ca 1000 	str.w	r1, [sl]
 800a3c8:	b1dc      	cbz	r4, 800a402 <__gethex+0x13e>
 800a3ca:	9b01      	ldr	r3, [sp, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	bf14      	ite	ne
 800a3d0:	f04f 0800 	movne.w	r8, #0
 800a3d4:	f04f 0806 	moveq.w	r8, #6
 800a3d8:	4640      	mov	r0, r8
 800a3da:	b005      	add	sp, #20
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	4645      	mov	r5, r8
 800a3e2:	4626      	mov	r6, r4
 800a3e4:	2401      	movs	r4, #1
 800a3e6:	e7c7      	b.n	800a378 <__gethex+0xb4>
 800a3e8:	f04f 0b00 	mov.w	fp, #0
 800a3ec:	1ca9      	adds	r1, r5, #2
 800a3ee:	e7d0      	b.n	800a392 <__gethex+0xce>
 800a3f0:	f04f 0b01 	mov.w	fp, #1
 800a3f4:	e7fa      	b.n	800a3ec <__gethex+0x128>
 800a3f6:	230a      	movs	r3, #10
 800a3f8:	fb03 0002 	mla	r0, r3, r2, r0
 800a3fc:	e7d0      	b.n	800a3a0 <__gethex+0xdc>
 800a3fe:	4629      	mov	r1, r5
 800a400:	e7e0      	b.n	800a3c4 <__gethex+0x100>
 800a402:	4621      	mov	r1, r4
 800a404:	eba5 0308 	sub.w	r3, r5, r8
 800a408:	3b01      	subs	r3, #1
 800a40a:	2b07      	cmp	r3, #7
 800a40c:	dc0a      	bgt.n	800a424 <__gethex+0x160>
 800a40e:	4648      	mov	r0, r9
 800a410:	f7fe f932 	bl	8008678 <_Balloc>
 800a414:	4604      	mov	r4, r0
 800a416:	b940      	cbnz	r0, 800a42a <__gethex+0x166>
 800a418:	4602      	mov	r2, r0
 800a41a:	21e4      	movs	r1, #228	; 0xe4
 800a41c:	4b61      	ldr	r3, [pc, #388]	; (800a5a4 <__gethex+0x2e0>)
 800a41e:	4862      	ldr	r0, [pc, #392]	; (800a5a8 <__gethex+0x2e4>)
 800a420:	f7ff feb6 	bl	800a190 <__assert_func>
 800a424:	3101      	adds	r1, #1
 800a426:	105b      	asrs	r3, r3, #1
 800a428:	e7ef      	b.n	800a40a <__gethex+0x146>
 800a42a:	2300      	movs	r3, #0
 800a42c:	469b      	mov	fp, r3
 800a42e:	f100 0a14 	add.w	sl, r0, #20
 800a432:	f8cd a004 	str.w	sl, [sp, #4]
 800a436:	45a8      	cmp	r8, r5
 800a438:	d344      	bcc.n	800a4c4 <__gethex+0x200>
 800a43a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a43e:	4658      	mov	r0, fp
 800a440:	f848 bb04 	str.w	fp, [r8], #4
 800a444:	eba8 080a 	sub.w	r8, r8, sl
 800a448:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a44c:	6122      	str	r2, [r4, #16]
 800a44e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a452:	f7fe fa03 	bl	800885c <__hi0bits>
 800a456:	683d      	ldr	r5, [r7, #0]
 800a458:	eba8 0800 	sub.w	r8, r8, r0
 800a45c:	45a8      	cmp	r8, r5
 800a45e:	dd59      	ble.n	800a514 <__gethex+0x250>
 800a460:	eba8 0805 	sub.w	r8, r8, r5
 800a464:	4641      	mov	r1, r8
 800a466:	4620      	mov	r0, r4
 800a468:	f7fe fd81 	bl	8008f6e <__any_on>
 800a46c:	4683      	mov	fp, r0
 800a46e:	b1b8      	cbz	r0, 800a4a0 <__gethex+0x1dc>
 800a470:	f04f 0b01 	mov.w	fp, #1
 800a474:	f108 33ff 	add.w	r3, r8, #4294967295
 800a478:	1159      	asrs	r1, r3, #5
 800a47a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a47e:	f003 021f 	and.w	r2, r3, #31
 800a482:	fa0b f202 	lsl.w	r2, fp, r2
 800a486:	420a      	tst	r2, r1
 800a488:	d00a      	beq.n	800a4a0 <__gethex+0x1dc>
 800a48a:	455b      	cmp	r3, fp
 800a48c:	dd06      	ble.n	800a49c <__gethex+0x1d8>
 800a48e:	4620      	mov	r0, r4
 800a490:	f1a8 0102 	sub.w	r1, r8, #2
 800a494:	f7fe fd6b 	bl	8008f6e <__any_on>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d138      	bne.n	800a50e <__gethex+0x24a>
 800a49c:	f04f 0b02 	mov.w	fp, #2
 800a4a0:	4641      	mov	r1, r8
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f7ff fea6 	bl	800a1f4 <rshift>
 800a4a8:	4446      	add	r6, r8
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	42b3      	cmp	r3, r6
 800a4ae:	da41      	bge.n	800a534 <__gethex+0x270>
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4648      	mov	r0, r9
 800a4b4:	f7fe f920 	bl	80086f8 <_Bfree>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4bc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	e789      	b.n	800a3d8 <__gethex+0x114>
 800a4c4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a4c8:	2a2e      	cmp	r2, #46	; 0x2e
 800a4ca:	d014      	beq.n	800a4f6 <__gethex+0x232>
 800a4cc:	2b20      	cmp	r3, #32
 800a4ce:	d106      	bne.n	800a4de <__gethex+0x21a>
 800a4d0:	9b01      	ldr	r3, [sp, #4]
 800a4d2:	f843 bb04 	str.w	fp, [r3], #4
 800a4d6:	f04f 0b00 	mov.w	fp, #0
 800a4da:	9301      	str	r3, [sp, #4]
 800a4dc:	465b      	mov	r3, fp
 800a4de:	7828      	ldrb	r0, [r5, #0]
 800a4e0:	9303      	str	r3, [sp, #12]
 800a4e2:	f7ff feda 	bl	800a29a <__hexdig_fun>
 800a4e6:	9b03      	ldr	r3, [sp, #12]
 800a4e8:	f000 000f 	and.w	r0, r0, #15
 800a4ec:	4098      	lsls	r0, r3
 800a4ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	e79f      	b.n	800a436 <__gethex+0x172>
 800a4f6:	45a8      	cmp	r8, r5
 800a4f8:	d8e8      	bhi.n	800a4cc <__gethex+0x208>
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	4928      	ldr	r1, [pc, #160]	; (800a5a0 <__gethex+0x2dc>)
 800a500:	9303      	str	r3, [sp, #12]
 800a502:	f7ff fe0f 	bl	800a124 <strncmp>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	2800      	cmp	r0, #0
 800a50a:	d1df      	bne.n	800a4cc <__gethex+0x208>
 800a50c:	e793      	b.n	800a436 <__gethex+0x172>
 800a50e:	f04f 0b03 	mov.w	fp, #3
 800a512:	e7c5      	b.n	800a4a0 <__gethex+0x1dc>
 800a514:	da0b      	bge.n	800a52e <__gethex+0x26a>
 800a516:	eba5 0808 	sub.w	r8, r5, r8
 800a51a:	4621      	mov	r1, r4
 800a51c:	4642      	mov	r2, r8
 800a51e:	4648      	mov	r0, r9
 800a520:	f7fe fb02 	bl	8008b28 <__lshift>
 800a524:	4604      	mov	r4, r0
 800a526:	eba6 0608 	sub.w	r6, r6, r8
 800a52a:	f100 0a14 	add.w	sl, r0, #20
 800a52e:	f04f 0b00 	mov.w	fp, #0
 800a532:	e7ba      	b.n	800a4aa <__gethex+0x1e6>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	42b3      	cmp	r3, r6
 800a538:	dd74      	ble.n	800a624 <__gethex+0x360>
 800a53a:	1b9e      	subs	r6, r3, r6
 800a53c:	42b5      	cmp	r5, r6
 800a53e:	dc35      	bgt.n	800a5ac <__gethex+0x2e8>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d023      	beq.n	800a58e <__gethex+0x2ca>
 800a546:	2b03      	cmp	r3, #3
 800a548:	d025      	beq.n	800a596 <__gethex+0x2d2>
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d115      	bne.n	800a57a <__gethex+0x2b6>
 800a54e:	42b5      	cmp	r5, r6
 800a550:	d113      	bne.n	800a57a <__gethex+0x2b6>
 800a552:	2d01      	cmp	r5, #1
 800a554:	d10b      	bne.n	800a56e <__gethex+0x2aa>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	9a02      	ldr	r2, [sp, #8]
 800a55a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	2301      	movs	r3, #1
 800a562:	6123      	str	r3, [r4, #16]
 800a564:	f8ca 3000 	str.w	r3, [sl]
 800a568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a56a:	601c      	str	r4, [r3, #0]
 800a56c:	e734      	b.n	800a3d8 <__gethex+0x114>
 800a56e:	4620      	mov	r0, r4
 800a570:	1e69      	subs	r1, r5, #1
 800a572:	f7fe fcfc 	bl	8008f6e <__any_on>
 800a576:	2800      	cmp	r0, #0
 800a578:	d1ed      	bne.n	800a556 <__gethex+0x292>
 800a57a:	4621      	mov	r1, r4
 800a57c:	4648      	mov	r0, r9
 800a57e:	f7fe f8bb 	bl	80086f8 <_Bfree>
 800a582:	2300      	movs	r3, #0
 800a584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a586:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	e724      	b.n	800a3d8 <__gethex+0x114>
 800a58e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1f2      	bne.n	800a57a <__gethex+0x2b6>
 800a594:	e7df      	b.n	800a556 <__gethex+0x292>
 800a596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1dc      	bne.n	800a556 <__gethex+0x292>
 800a59c:	e7ed      	b.n	800a57a <__gethex+0x2b6>
 800a59e:	bf00      	nop
 800a5a0:	0800b14c 	.word	0x0800b14c
 800a5a4:	0800afe3 	.word	0x0800afe3
 800a5a8:	0800b2f6 	.word	0x0800b2f6
 800a5ac:	f106 38ff 	add.w	r8, r6, #4294967295
 800a5b0:	f1bb 0f00 	cmp.w	fp, #0
 800a5b4:	d133      	bne.n	800a61e <__gethex+0x35a>
 800a5b6:	f1b8 0f00 	cmp.w	r8, #0
 800a5ba:	d004      	beq.n	800a5c6 <__gethex+0x302>
 800a5bc:	4641      	mov	r1, r8
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7fe fcd5 	bl	8008f6e <__any_on>
 800a5c4:	4683      	mov	fp, r0
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a5cc:	f008 081f 	and.w	r8, r8, #31
 800a5d0:	fa03 f308 	lsl.w	r3, r3, r8
 800a5d4:	f04f 0802 	mov.w	r8, #2
 800a5d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4213      	tst	r3, r2
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	bf18      	it	ne
 800a5e4:	f04b 0b02 	orrne.w	fp, fp, #2
 800a5e8:	1bad      	subs	r5, r5, r6
 800a5ea:	f7ff fe03 	bl	800a1f4 <rshift>
 800a5ee:	687e      	ldr	r6, [r7, #4]
 800a5f0:	f1bb 0f00 	cmp.w	fp, #0
 800a5f4:	d04a      	beq.n	800a68c <__gethex+0x3c8>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d016      	beq.n	800a62a <__gethex+0x366>
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d018      	beq.n	800a632 <__gethex+0x36e>
 800a600:	2b01      	cmp	r3, #1
 800a602:	d109      	bne.n	800a618 <__gethex+0x354>
 800a604:	f01b 0f02 	tst.w	fp, #2
 800a608:	d006      	beq.n	800a618 <__gethex+0x354>
 800a60a:	f8da 3000 	ldr.w	r3, [sl]
 800a60e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a612:	f01b 0f01 	tst.w	fp, #1
 800a616:	d10f      	bne.n	800a638 <__gethex+0x374>
 800a618:	f048 0810 	orr.w	r8, r8, #16
 800a61c:	e036      	b.n	800a68c <__gethex+0x3c8>
 800a61e:	f04f 0b01 	mov.w	fp, #1
 800a622:	e7d0      	b.n	800a5c6 <__gethex+0x302>
 800a624:	f04f 0801 	mov.w	r8, #1
 800a628:	e7e2      	b.n	800a5f0 <__gethex+0x32c>
 800a62a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a62c:	f1c3 0301 	rsb	r3, r3, #1
 800a630:	930f      	str	r3, [sp, #60]	; 0x3c
 800a632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a634:	2b00      	cmp	r3, #0
 800a636:	d0ef      	beq.n	800a618 <__gethex+0x354>
 800a638:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a63c:	f104 0214 	add.w	r2, r4, #20
 800a640:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	2300      	movs	r3, #0
 800a648:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a64c:	4694      	mov	ip, r2
 800a64e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a652:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a656:	d01e      	beq.n	800a696 <__gethex+0x3d2>
 800a658:	3101      	adds	r1, #1
 800a65a:	f8cc 1000 	str.w	r1, [ip]
 800a65e:	f1b8 0f02 	cmp.w	r8, #2
 800a662:	f104 0214 	add.w	r2, r4, #20
 800a666:	d13d      	bne.n	800a6e4 <__gethex+0x420>
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	42ab      	cmp	r3, r5
 800a66e:	d10b      	bne.n	800a688 <__gethex+0x3c4>
 800a670:	2301      	movs	r3, #1
 800a672:	1169      	asrs	r1, r5, #5
 800a674:	f005 051f 	and.w	r5, r5, #31
 800a678:	fa03 f505 	lsl.w	r5, r3, r5
 800a67c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a680:	421d      	tst	r5, r3
 800a682:	bf18      	it	ne
 800a684:	f04f 0801 	movne.w	r8, #1
 800a688:	f048 0820 	orr.w	r8, r8, #32
 800a68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a68e:	601c      	str	r4, [r3, #0]
 800a690:	9b02      	ldr	r3, [sp, #8]
 800a692:	601e      	str	r6, [r3, #0]
 800a694:	e6a0      	b.n	800a3d8 <__gethex+0x114>
 800a696:	4290      	cmp	r0, r2
 800a698:	f842 3c04 	str.w	r3, [r2, #-4]
 800a69c:	d8d6      	bhi.n	800a64c <__gethex+0x388>
 800a69e:	68a2      	ldr	r2, [r4, #8]
 800a6a0:	4593      	cmp	fp, r2
 800a6a2:	db17      	blt.n	800a6d4 <__gethex+0x410>
 800a6a4:	6861      	ldr	r1, [r4, #4]
 800a6a6:	4648      	mov	r0, r9
 800a6a8:	3101      	adds	r1, #1
 800a6aa:	f7fd ffe5 	bl	8008678 <_Balloc>
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	b918      	cbnz	r0, 800a6ba <__gethex+0x3f6>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	2184      	movs	r1, #132	; 0x84
 800a6b6:	4b1a      	ldr	r3, [pc, #104]	; (800a720 <__gethex+0x45c>)
 800a6b8:	e6b1      	b.n	800a41e <__gethex+0x15a>
 800a6ba:	6922      	ldr	r2, [r4, #16]
 800a6bc:	f104 010c 	add.w	r1, r4, #12
 800a6c0:	3202      	adds	r2, #2
 800a6c2:	0092      	lsls	r2, r2, #2
 800a6c4:	300c      	adds	r0, #12
 800a6c6:	f7ff fd4f 	bl	800a168 <memcpy>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4648      	mov	r0, r9
 800a6ce:	f7fe f813 	bl	80086f8 <_Bfree>
 800a6d2:	4654      	mov	r4, sl
 800a6d4:	6922      	ldr	r2, [r4, #16]
 800a6d6:	1c51      	adds	r1, r2, #1
 800a6d8:	6121      	str	r1, [r4, #16]
 800a6da:	2101      	movs	r1, #1
 800a6dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a6e0:	6151      	str	r1, [r2, #20]
 800a6e2:	e7bc      	b.n	800a65e <__gethex+0x39a>
 800a6e4:	6921      	ldr	r1, [r4, #16]
 800a6e6:	4559      	cmp	r1, fp
 800a6e8:	dd0b      	ble.n	800a702 <__gethex+0x43e>
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff fd81 	bl	800a1f4 <rshift>
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	3601      	adds	r6, #1
 800a6f6:	42b3      	cmp	r3, r6
 800a6f8:	f6ff aeda 	blt.w	800a4b0 <__gethex+0x1ec>
 800a6fc:	f04f 0801 	mov.w	r8, #1
 800a700:	e7c2      	b.n	800a688 <__gethex+0x3c4>
 800a702:	f015 051f 	ands.w	r5, r5, #31
 800a706:	d0f9      	beq.n	800a6fc <__gethex+0x438>
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	f1c5 0520 	rsb	r5, r5, #32
 800a70e:	441a      	add	r2, r3
 800a710:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a714:	f7fe f8a2 	bl	800885c <__hi0bits>
 800a718:	42a8      	cmp	r0, r5
 800a71a:	dbe6      	blt.n	800a6ea <__gethex+0x426>
 800a71c:	e7ee      	b.n	800a6fc <__gethex+0x438>
 800a71e:	bf00      	nop
 800a720:	0800afe3 	.word	0x0800afe3

0800a724 <L_shift>:
 800a724:	f1c2 0208 	rsb	r2, r2, #8
 800a728:	0092      	lsls	r2, r2, #2
 800a72a:	b570      	push	{r4, r5, r6, lr}
 800a72c:	f1c2 0620 	rsb	r6, r2, #32
 800a730:	6843      	ldr	r3, [r0, #4]
 800a732:	6804      	ldr	r4, [r0, #0]
 800a734:	fa03 f506 	lsl.w	r5, r3, r6
 800a738:	432c      	orrs	r4, r5
 800a73a:	40d3      	lsrs	r3, r2
 800a73c:	6004      	str	r4, [r0, #0]
 800a73e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a742:	4288      	cmp	r0, r1
 800a744:	d3f4      	bcc.n	800a730 <L_shift+0xc>
 800a746:	bd70      	pop	{r4, r5, r6, pc}

0800a748 <__match>:
 800a748:	b530      	push	{r4, r5, lr}
 800a74a:	6803      	ldr	r3, [r0, #0]
 800a74c:	3301      	adds	r3, #1
 800a74e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a752:	b914      	cbnz	r4, 800a75a <__match+0x12>
 800a754:	6003      	str	r3, [r0, #0]
 800a756:	2001      	movs	r0, #1
 800a758:	bd30      	pop	{r4, r5, pc}
 800a75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a762:	2d19      	cmp	r5, #25
 800a764:	bf98      	it	ls
 800a766:	3220      	addls	r2, #32
 800a768:	42a2      	cmp	r2, r4
 800a76a:	d0f0      	beq.n	800a74e <__match+0x6>
 800a76c:	2000      	movs	r0, #0
 800a76e:	e7f3      	b.n	800a758 <__match+0x10>

0800a770 <__hexnan>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	2500      	movs	r5, #0
 800a776:	680b      	ldr	r3, [r1, #0]
 800a778:	4682      	mov	sl, r0
 800a77a:	115e      	asrs	r6, r3, #5
 800a77c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a780:	f013 031f 	ands.w	r3, r3, #31
 800a784:	bf18      	it	ne
 800a786:	3604      	addne	r6, #4
 800a788:	1f37      	subs	r7, r6, #4
 800a78a:	4690      	mov	r8, r2
 800a78c:	46b9      	mov	r9, r7
 800a78e:	463c      	mov	r4, r7
 800a790:	46ab      	mov	fp, r5
 800a792:	b087      	sub	sp, #28
 800a794:	6801      	ldr	r1, [r0, #0]
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	f846 5c04 	str.w	r5, [r6, #-4]
 800a79c:	9502      	str	r5, [sp, #8]
 800a79e:	784a      	ldrb	r2, [r1, #1]
 800a7a0:	1c4b      	adds	r3, r1, #1
 800a7a2:	9303      	str	r3, [sp, #12]
 800a7a4:	b342      	cbz	r2, 800a7f8 <__hexnan+0x88>
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	9105      	str	r1, [sp, #20]
 800a7aa:	9204      	str	r2, [sp, #16]
 800a7ac:	f7ff fd75 	bl	800a29a <__hexdig_fun>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d14f      	bne.n	800a854 <__hexnan+0xe4>
 800a7b4:	9a04      	ldr	r2, [sp, #16]
 800a7b6:	9905      	ldr	r1, [sp, #20]
 800a7b8:	2a20      	cmp	r2, #32
 800a7ba:	d818      	bhi.n	800a7ee <__hexnan+0x7e>
 800a7bc:	9b02      	ldr	r3, [sp, #8]
 800a7be:	459b      	cmp	fp, r3
 800a7c0:	dd13      	ble.n	800a7ea <__hexnan+0x7a>
 800a7c2:	454c      	cmp	r4, r9
 800a7c4:	d206      	bcs.n	800a7d4 <__hexnan+0x64>
 800a7c6:	2d07      	cmp	r5, #7
 800a7c8:	dc04      	bgt.n	800a7d4 <__hexnan+0x64>
 800a7ca:	462a      	mov	r2, r5
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7ff ffa8 	bl	800a724 <L_shift>
 800a7d4:	4544      	cmp	r4, r8
 800a7d6:	d950      	bls.n	800a87a <__hexnan+0x10a>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f1a4 0904 	sub.w	r9, r4, #4
 800a7de:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7e2:	461d      	mov	r5, r3
 800a7e4:	464c      	mov	r4, r9
 800a7e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a7ea:	9903      	ldr	r1, [sp, #12]
 800a7ec:	e7d7      	b.n	800a79e <__hexnan+0x2e>
 800a7ee:	2a29      	cmp	r2, #41	; 0x29
 800a7f0:	d155      	bne.n	800a89e <__hexnan+0x12e>
 800a7f2:	3102      	adds	r1, #2
 800a7f4:	f8ca 1000 	str.w	r1, [sl]
 800a7f8:	f1bb 0f00 	cmp.w	fp, #0
 800a7fc:	d04f      	beq.n	800a89e <__hexnan+0x12e>
 800a7fe:	454c      	cmp	r4, r9
 800a800:	d206      	bcs.n	800a810 <__hexnan+0xa0>
 800a802:	2d07      	cmp	r5, #7
 800a804:	dc04      	bgt.n	800a810 <__hexnan+0xa0>
 800a806:	462a      	mov	r2, r5
 800a808:	4649      	mov	r1, r9
 800a80a:	4620      	mov	r0, r4
 800a80c:	f7ff ff8a 	bl	800a724 <L_shift>
 800a810:	4544      	cmp	r4, r8
 800a812:	d934      	bls.n	800a87e <__hexnan+0x10e>
 800a814:	4623      	mov	r3, r4
 800a816:	f1a8 0204 	sub.w	r2, r8, #4
 800a81a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a81e:	429f      	cmp	r7, r3
 800a820:	f842 1f04 	str.w	r1, [r2, #4]!
 800a824:	d2f9      	bcs.n	800a81a <__hexnan+0xaa>
 800a826:	1b3b      	subs	r3, r7, r4
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	3304      	adds	r3, #4
 800a82e:	3e03      	subs	r6, #3
 800a830:	3401      	adds	r4, #1
 800a832:	42a6      	cmp	r6, r4
 800a834:	bf38      	it	cc
 800a836:	2304      	movcc	r3, #4
 800a838:	2200      	movs	r2, #0
 800a83a:	4443      	add	r3, r8
 800a83c:	f843 2b04 	str.w	r2, [r3], #4
 800a840:	429f      	cmp	r7, r3
 800a842:	d2fb      	bcs.n	800a83c <__hexnan+0xcc>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	b91b      	cbnz	r3, 800a850 <__hexnan+0xe0>
 800a848:	4547      	cmp	r7, r8
 800a84a:	d126      	bne.n	800a89a <__hexnan+0x12a>
 800a84c:	2301      	movs	r3, #1
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	2005      	movs	r0, #5
 800a852:	e025      	b.n	800a8a0 <__hexnan+0x130>
 800a854:	3501      	adds	r5, #1
 800a856:	2d08      	cmp	r5, #8
 800a858:	f10b 0b01 	add.w	fp, fp, #1
 800a85c:	dd06      	ble.n	800a86c <__hexnan+0xfc>
 800a85e:	4544      	cmp	r4, r8
 800a860:	d9c3      	bls.n	800a7ea <__hexnan+0x7a>
 800a862:	2300      	movs	r3, #0
 800a864:	2501      	movs	r5, #1
 800a866:	f844 3c04 	str.w	r3, [r4, #-4]
 800a86a:	3c04      	subs	r4, #4
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	f000 000f 	and.w	r0, r0, #15
 800a872:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a876:	6020      	str	r0, [r4, #0]
 800a878:	e7b7      	b.n	800a7ea <__hexnan+0x7a>
 800a87a:	2508      	movs	r5, #8
 800a87c:	e7b5      	b.n	800a7ea <__hexnan+0x7a>
 800a87e:	9b01      	ldr	r3, [sp, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0df      	beq.n	800a844 <__hexnan+0xd4>
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	f1c3 0320 	rsb	r3, r3, #32
 800a88c:	40da      	lsrs	r2, r3
 800a88e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a892:	4013      	ands	r3, r2
 800a894:	f846 3c04 	str.w	r3, [r6, #-4]
 800a898:	e7d4      	b.n	800a844 <__hexnan+0xd4>
 800a89a:	3f04      	subs	r7, #4
 800a89c:	e7d2      	b.n	800a844 <__hexnan+0xd4>
 800a89e:	2004      	movs	r0, #4
 800a8a0:	b007      	add	sp, #28
 800a8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8a6 <__ascii_mbtowc>:
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	b901      	cbnz	r1, 800a8ac <__ascii_mbtowc+0x6>
 800a8aa:	a901      	add	r1, sp, #4
 800a8ac:	b142      	cbz	r2, 800a8c0 <__ascii_mbtowc+0x1a>
 800a8ae:	b14b      	cbz	r3, 800a8c4 <__ascii_mbtowc+0x1e>
 800a8b0:	7813      	ldrb	r3, [r2, #0]
 800a8b2:	600b      	str	r3, [r1, #0]
 800a8b4:	7812      	ldrb	r2, [r2, #0]
 800a8b6:	1e10      	subs	r0, r2, #0
 800a8b8:	bf18      	it	ne
 800a8ba:	2001      	movne	r0, #1
 800a8bc:	b002      	add	sp, #8
 800a8be:	4770      	bx	lr
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	e7fb      	b.n	800a8bc <__ascii_mbtowc+0x16>
 800a8c4:	f06f 0001 	mvn.w	r0, #1
 800a8c8:	e7f8      	b.n	800a8bc <__ascii_mbtowc+0x16>

0800a8ca <_realloc_r>:
 800a8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ce:	4680      	mov	r8, r0
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	460e      	mov	r6, r1
 800a8d4:	b921      	cbnz	r1, 800a8e0 <_realloc_r+0x16>
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8dc:	f7fd be40 	b.w	8008560 <_malloc_r>
 800a8e0:	b92a      	cbnz	r2, 800a8ee <_realloc_r+0x24>
 800a8e2:	f7fd fdcd 	bl	8008480 <_free_r>
 800a8e6:	4625      	mov	r5, r4
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ee:	f000 f842 	bl	800a976 <_malloc_usable_size_r>
 800a8f2:	4284      	cmp	r4, r0
 800a8f4:	4607      	mov	r7, r0
 800a8f6:	d802      	bhi.n	800a8fe <_realloc_r+0x34>
 800a8f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8fc:	d812      	bhi.n	800a924 <_realloc_r+0x5a>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4640      	mov	r0, r8
 800a902:	f7fd fe2d 	bl	8008560 <_malloc_r>
 800a906:	4605      	mov	r5, r0
 800a908:	2800      	cmp	r0, #0
 800a90a:	d0ed      	beq.n	800a8e8 <_realloc_r+0x1e>
 800a90c:	42bc      	cmp	r4, r7
 800a90e:	4622      	mov	r2, r4
 800a910:	4631      	mov	r1, r6
 800a912:	bf28      	it	cs
 800a914:	463a      	movcs	r2, r7
 800a916:	f7ff fc27 	bl	800a168 <memcpy>
 800a91a:	4631      	mov	r1, r6
 800a91c:	4640      	mov	r0, r8
 800a91e:	f7fd fdaf 	bl	8008480 <_free_r>
 800a922:	e7e1      	b.n	800a8e8 <_realloc_r+0x1e>
 800a924:	4635      	mov	r5, r6
 800a926:	e7df      	b.n	800a8e8 <_realloc_r+0x1e>

0800a928 <__ascii_wctomb>:
 800a928:	4603      	mov	r3, r0
 800a92a:	4608      	mov	r0, r1
 800a92c:	b141      	cbz	r1, 800a940 <__ascii_wctomb+0x18>
 800a92e:	2aff      	cmp	r2, #255	; 0xff
 800a930:	d904      	bls.n	800a93c <__ascii_wctomb+0x14>
 800a932:	228a      	movs	r2, #138	; 0x8a
 800a934:	f04f 30ff 	mov.w	r0, #4294967295
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	4770      	bx	lr
 800a93c:	2001      	movs	r0, #1
 800a93e:	700a      	strb	r2, [r1, #0]
 800a940:	4770      	bx	lr
	...

0800a944 <fiprintf>:
 800a944:	b40e      	push	{r1, r2, r3}
 800a946:	b503      	push	{r0, r1, lr}
 800a948:	4601      	mov	r1, r0
 800a94a:	ab03      	add	r3, sp, #12
 800a94c:	4805      	ldr	r0, [pc, #20]	; (800a964 <fiprintf+0x20>)
 800a94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a952:	6800      	ldr	r0, [r0, #0]
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	f000 f83d 	bl	800a9d4 <_vfiprintf_r>
 800a95a:	b002      	add	sp, #8
 800a95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a960:	b003      	add	sp, #12
 800a962:	4770      	bx	lr
 800a964:	20000078 	.word	0x20000078

0800a968 <abort>:
 800a968:	2006      	movs	r0, #6
 800a96a:	b508      	push	{r3, lr}
 800a96c:	f000 fa0a 	bl	800ad84 <raise>
 800a970:	2001      	movs	r0, #1
 800a972:	f7f7 fbd2 	bl	800211a <_exit>

0800a976 <_malloc_usable_size_r>:
 800a976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a97a:	1f18      	subs	r0, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	bfbc      	itt	lt
 800a980:	580b      	ldrlt	r3, [r1, r0]
 800a982:	18c0      	addlt	r0, r0, r3
 800a984:	4770      	bx	lr

0800a986 <__sfputc_r>:
 800a986:	6893      	ldr	r3, [r2, #8]
 800a988:	b410      	push	{r4}
 800a98a:	3b01      	subs	r3, #1
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	6093      	str	r3, [r2, #8]
 800a990:	da07      	bge.n	800a9a2 <__sfputc_r+0x1c>
 800a992:	6994      	ldr	r4, [r2, #24]
 800a994:	42a3      	cmp	r3, r4
 800a996:	db01      	blt.n	800a99c <__sfputc_r+0x16>
 800a998:	290a      	cmp	r1, #10
 800a99a:	d102      	bne.n	800a9a2 <__sfputc_r+0x1c>
 800a99c:	bc10      	pop	{r4}
 800a99e:	f000 b933 	b.w	800ac08 <__swbuf_r>
 800a9a2:	6813      	ldr	r3, [r2, #0]
 800a9a4:	1c58      	adds	r0, r3, #1
 800a9a6:	6010      	str	r0, [r2, #0]
 800a9a8:	7019      	strb	r1, [r3, #0]
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	bc10      	pop	{r4}
 800a9ae:	4770      	bx	lr

0800a9b0 <__sfputs_r>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	460f      	mov	r7, r1
 800a9b6:	4614      	mov	r4, r2
 800a9b8:	18d5      	adds	r5, r2, r3
 800a9ba:	42ac      	cmp	r4, r5
 800a9bc:	d101      	bne.n	800a9c2 <__sfputs_r+0x12>
 800a9be:	2000      	movs	r0, #0
 800a9c0:	e007      	b.n	800a9d2 <__sfputs_r+0x22>
 800a9c2:	463a      	mov	r2, r7
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ca:	f7ff ffdc 	bl	800a986 <__sfputc_r>
 800a9ce:	1c43      	adds	r3, r0, #1
 800a9d0:	d1f3      	bne.n	800a9ba <__sfputs_r+0xa>
 800a9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9d4 <_vfiprintf_r>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	460d      	mov	r5, r1
 800a9da:	4614      	mov	r4, r2
 800a9dc:	4698      	mov	r8, r3
 800a9de:	4606      	mov	r6, r0
 800a9e0:	b09d      	sub	sp, #116	; 0x74
 800a9e2:	b118      	cbz	r0, 800a9ec <_vfiprintf_r+0x18>
 800a9e4:	6a03      	ldr	r3, [r0, #32]
 800a9e6:	b90b      	cbnz	r3, 800a9ec <_vfiprintf_r+0x18>
 800a9e8:	f7fc fd90 	bl	800750c <__sinit>
 800a9ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ee:	07d9      	lsls	r1, r3, #31
 800a9f0:	d405      	bmi.n	800a9fe <_vfiprintf_r+0x2a>
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	059a      	lsls	r2, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_vfiprintf_r+0x2a>
 800a9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9fa:	f7fc febe 	bl	800777a <__retarget_lock_acquire_recursive>
 800a9fe:	89ab      	ldrh	r3, [r5, #12]
 800aa00:	071b      	lsls	r3, r3, #28
 800aa02:	d501      	bpl.n	800aa08 <_vfiprintf_r+0x34>
 800aa04:	692b      	ldr	r3, [r5, #16]
 800aa06:	b99b      	cbnz	r3, 800aa30 <_vfiprintf_r+0x5c>
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f000 f93a 	bl	800ac84 <__swsetup_r>
 800aa10:	b170      	cbz	r0, 800aa30 <_vfiprintf_r+0x5c>
 800aa12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa14:	07dc      	lsls	r4, r3, #31
 800aa16:	d504      	bpl.n	800aa22 <_vfiprintf_r+0x4e>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	b01d      	add	sp, #116	; 0x74
 800aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa22:	89ab      	ldrh	r3, [r5, #12]
 800aa24:	0598      	lsls	r0, r3, #22
 800aa26:	d4f7      	bmi.n	800aa18 <_vfiprintf_r+0x44>
 800aa28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa2a:	f7fc fea7 	bl	800777c <__retarget_lock_release_recursive>
 800aa2e:	e7f3      	b.n	800aa18 <_vfiprintf_r+0x44>
 800aa30:	2300      	movs	r3, #0
 800aa32:	9309      	str	r3, [sp, #36]	; 0x24
 800aa34:	2320      	movs	r3, #32
 800aa36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa3a:	2330      	movs	r3, #48	; 0x30
 800aa3c:	f04f 0901 	mov.w	r9, #1
 800aa40:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800abf4 <_vfiprintf_r+0x220>
 800aa48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	469a      	mov	sl, r3
 800aa50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa54:	b10a      	cbz	r2, 800aa5a <_vfiprintf_r+0x86>
 800aa56:	2a25      	cmp	r2, #37	; 0x25
 800aa58:	d1f9      	bne.n	800aa4e <_vfiprintf_r+0x7a>
 800aa5a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa5e:	d00b      	beq.n	800aa78 <_vfiprintf_r+0xa4>
 800aa60:	465b      	mov	r3, fp
 800aa62:	4622      	mov	r2, r4
 800aa64:	4629      	mov	r1, r5
 800aa66:	4630      	mov	r0, r6
 800aa68:	f7ff ffa2 	bl	800a9b0 <__sfputs_r>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	f000 80a9 	beq.w	800abc4 <_vfiprintf_r+0x1f0>
 800aa72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa74:	445a      	add	r2, fp
 800aa76:	9209      	str	r2, [sp, #36]	; 0x24
 800aa78:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80a1 	beq.w	800abc4 <_vfiprintf_r+0x1f0>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f04f 32ff 	mov.w	r2, #4294967295
 800aa88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa8c:	f10a 0a01 	add.w	sl, sl, #1
 800aa90:	9304      	str	r3, [sp, #16]
 800aa92:	9307      	str	r3, [sp, #28]
 800aa94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa98:	931a      	str	r3, [sp, #104]	; 0x68
 800aa9a:	4654      	mov	r4, sl
 800aa9c:	2205      	movs	r2, #5
 800aa9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa2:	4854      	ldr	r0, [pc, #336]	; (800abf4 <_vfiprintf_r+0x220>)
 800aaa4:	f7fc fe6b 	bl	800777e <memchr>
 800aaa8:	9a04      	ldr	r2, [sp, #16]
 800aaaa:	b9d8      	cbnz	r0, 800aae4 <_vfiprintf_r+0x110>
 800aaac:	06d1      	lsls	r1, r2, #27
 800aaae:	bf44      	itt	mi
 800aab0:	2320      	movmi	r3, #32
 800aab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab6:	0713      	lsls	r3, r2, #28
 800aab8:	bf44      	itt	mi
 800aaba:	232b      	movmi	r3, #43	; 0x2b
 800aabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac0:	f89a 3000 	ldrb.w	r3, [sl]
 800aac4:	2b2a      	cmp	r3, #42	; 0x2a
 800aac6:	d015      	beq.n	800aaf4 <_vfiprintf_r+0x120>
 800aac8:	4654      	mov	r4, sl
 800aaca:	2000      	movs	r0, #0
 800aacc:	f04f 0c0a 	mov.w	ip, #10
 800aad0:	9a07      	ldr	r2, [sp, #28]
 800aad2:	4621      	mov	r1, r4
 800aad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad8:	3b30      	subs	r3, #48	; 0x30
 800aada:	2b09      	cmp	r3, #9
 800aadc:	d94d      	bls.n	800ab7a <_vfiprintf_r+0x1a6>
 800aade:	b1b0      	cbz	r0, 800ab0e <_vfiprintf_r+0x13a>
 800aae0:	9207      	str	r2, [sp, #28]
 800aae2:	e014      	b.n	800ab0e <_vfiprintf_r+0x13a>
 800aae4:	eba0 0308 	sub.w	r3, r0, r8
 800aae8:	fa09 f303 	lsl.w	r3, r9, r3
 800aaec:	4313      	orrs	r3, r2
 800aaee:	46a2      	mov	sl, r4
 800aaf0:	9304      	str	r3, [sp, #16]
 800aaf2:	e7d2      	b.n	800aa9a <_vfiprintf_r+0xc6>
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	1d19      	adds	r1, r3, #4
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	9103      	str	r1, [sp, #12]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bfbb      	ittet	lt
 800ab00:	425b      	neglt	r3, r3
 800ab02:	f042 0202 	orrlt.w	r2, r2, #2
 800ab06:	9307      	strge	r3, [sp, #28]
 800ab08:	9307      	strlt	r3, [sp, #28]
 800ab0a:	bfb8      	it	lt
 800ab0c:	9204      	strlt	r2, [sp, #16]
 800ab0e:	7823      	ldrb	r3, [r4, #0]
 800ab10:	2b2e      	cmp	r3, #46	; 0x2e
 800ab12:	d10c      	bne.n	800ab2e <_vfiprintf_r+0x15a>
 800ab14:	7863      	ldrb	r3, [r4, #1]
 800ab16:	2b2a      	cmp	r3, #42	; 0x2a
 800ab18:	d134      	bne.n	800ab84 <_vfiprintf_r+0x1b0>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	3402      	adds	r4, #2
 800ab1e:	1d1a      	adds	r2, r3, #4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	9203      	str	r2, [sp, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	bfb8      	it	lt
 800ab28:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abf8 <_vfiprintf_r+0x224>
 800ab32:	2203      	movs	r2, #3
 800ab34:	4650      	mov	r0, sl
 800ab36:	7821      	ldrb	r1, [r4, #0]
 800ab38:	f7fc fe21 	bl	800777e <memchr>
 800ab3c:	b138      	cbz	r0, 800ab4e <_vfiprintf_r+0x17a>
 800ab3e:	2240      	movs	r2, #64	; 0x40
 800ab40:	9b04      	ldr	r3, [sp, #16]
 800ab42:	eba0 000a 	sub.w	r0, r0, sl
 800ab46:	4082      	lsls	r2, r0
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	3401      	adds	r4, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab52:	2206      	movs	r2, #6
 800ab54:	4829      	ldr	r0, [pc, #164]	; (800abfc <_vfiprintf_r+0x228>)
 800ab56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab5a:	f7fc fe10 	bl	800777e <memchr>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d03f      	beq.n	800abe2 <_vfiprintf_r+0x20e>
 800ab62:	4b27      	ldr	r3, [pc, #156]	; (800ac00 <_vfiprintf_r+0x22c>)
 800ab64:	bb1b      	cbnz	r3, 800abae <_vfiprintf_r+0x1da>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	3307      	adds	r3, #7
 800ab6a:	f023 0307 	bic.w	r3, r3, #7
 800ab6e:	3308      	adds	r3, #8
 800ab70:	9303      	str	r3, [sp, #12]
 800ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab74:	443b      	add	r3, r7
 800ab76:	9309      	str	r3, [sp, #36]	; 0x24
 800ab78:	e768      	b.n	800aa4c <_vfiprintf_r+0x78>
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	2001      	movs	r0, #1
 800ab7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab82:	e7a6      	b.n	800aad2 <_vfiprintf_r+0xfe>
 800ab84:	2300      	movs	r3, #0
 800ab86:	f04f 0c0a 	mov.w	ip, #10
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	3401      	adds	r4, #1
 800ab8e:	9305      	str	r3, [sp, #20]
 800ab90:	4620      	mov	r0, r4
 800ab92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab96:	3a30      	subs	r2, #48	; 0x30
 800ab98:	2a09      	cmp	r2, #9
 800ab9a:	d903      	bls.n	800aba4 <_vfiprintf_r+0x1d0>
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0c6      	beq.n	800ab2e <_vfiprintf_r+0x15a>
 800aba0:	9105      	str	r1, [sp, #20]
 800aba2:	e7c4      	b.n	800ab2e <_vfiprintf_r+0x15a>
 800aba4:	4604      	mov	r4, r0
 800aba6:	2301      	movs	r3, #1
 800aba8:	fb0c 2101 	mla	r1, ip, r1, r2
 800abac:	e7f0      	b.n	800ab90 <_vfiprintf_r+0x1bc>
 800abae:	ab03      	add	r3, sp, #12
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	462a      	mov	r2, r5
 800abb4:	4630      	mov	r0, r6
 800abb6:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <_vfiprintf_r+0x230>)
 800abb8:	a904      	add	r1, sp, #16
 800abba:	f7fb fe4b 	bl	8006854 <_printf_float>
 800abbe:	4607      	mov	r7, r0
 800abc0:	1c78      	adds	r0, r7, #1
 800abc2:	d1d6      	bne.n	800ab72 <_vfiprintf_r+0x19e>
 800abc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abc6:	07d9      	lsls	r1, r3, #31
 800abc8:	d405      	bmi.n	800abd6 <_vfiprintf_r+0x202>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	059a      	lsls	r2, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_vfiprintf_r+0x202>
 800abd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abd2:	f7fc fdd3 	bl	800777c <__retarget_lock_release_recursive>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	065b      	lsls	r3, r3, #25
 800abda:	f53f af1d 	bmi.w	800aa18 <_vfiprintf_r+0x44>
 800abde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abe0:	e71c      	b.n	800aa1c <_vfiprintf_r+0x48>
 800abe2:	ab03      	add	r3, sp, #12
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	462a      	mov	r2, r5
 800abe8:	4630      	mov	r0, r6
 800abea:	4b06      	ldr	r3, [pc, #24]	; (800ac04 <_vfiprintf_r+0x230>)
 800abec:	a904      	add	r1, sp, #16
 800abee:	f7fc f8d1 	bl	8006d94 <_printf_i>
 800abf2:	e7e4      	b.n	800abbe <_vfiprintf_r+0x1ea>
 800abf4:	0800b2a1 	.word	0x0800b2a1
 800abf8:	0800b2a7 	.word	0x0800b2a7
 800abfc:	0800b2ab 	.word	0x0800b2ab
 800ac00:	08006855 	.word	0x08006855
 800ac04:	0800a9b1 	.word	0x0800a9b1

0800ac08 <__swbuf_r>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b118      	cbz	r0, 800ac1a <__swbuf_r+0x12>
 800ac12:	6a03      	ldr	r3, [r0, #32]
 800ac14:	b90b      	cbnz	r3, 800ac1a <__swbuf_r+0x12>
 800ac16:	f7fc fc79 	bl	800750c <__sinit>
 800ac1a:	69a3      	ldr	r3, [r4, #24]
 800ac1c:	60a3      	str	r3, [r4, #8]
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	071a      	lsls	r2, r3, #28
 800ac22:	d525      	bpl.n	800ac70 <__swbuf_r+0x68>
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	b31b      	cbz	r3, 800ac70 <__swbuf_r+0x68>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	6922      	ldr	r2, [r4, #16]
 800ac2c:	b2f6      	uxtb	r6, r6
 800ac2e:	1a98      	subs	r0, r3, r2
 800ac30:	6963      	ldr	r3, [r4, #20]
 800ac32:	4637      	mov	r7, r6
 800ac34:	4283      	cmp	r3, r0
 800ac36:	dc04      	bgt.n	800ac42 <__swbuf_r+0x3a>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f7ff fa30 	bl	800a0a0 <_fflush_r>
 800ac40:	b9e0      	cbnz	r0, 800ac7c <__swbuf_r+0x74>
 800ac42:	68a3      	ldr	r3, [r4, #8]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	60a3      	str	r3, [r4, #8]
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	1c5a      	adds	r2, r3, #1
 800ac4c:	6022      	str	r2, [r4, #0]
 800ac4e:	701e      	strb	r6, [r3, #0]
 800ac50:	6962      	ldr	r2, [r4, #20]
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d004      	beq.n	800ac62 <__swbuf_r+0x5a>
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	07db      	lsls	r3, r3, #31
 800ac5c:	d506      	bpl.n	800ac6c <__swbuf_r+0x64>
 800ac5e:	2e0a      	cmp	r6, #10
 800ac60:	d104      	bne.n	800ac6c <__swbuf_r+0x64>
 800ac62:	4621      	mov	r1, r4
 800ac64:	4628      	mov	r0, r5
 800ac66:	f7ff fa1b 	bl	800a0a0 <_fflush_r>
 800ac6a:	b938      	cbnz	r0, 800ac7c <__swbuf_r+0x74>
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac70:	4621      	mov	r1, r4
 800ac72:	4628      	mov	r0, r5
 800ac74:	f000 f806 	bl	800ac84 <__swsetup_r>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d0d5      	beq.n	800ac28 <__swbuf_r+0x20>
 800ac7c:	f04f 37ff 	mov.w	r7, #4294967295
 800ac80:	e7f4      	b.n	800ac6c <__swbuf_r+0x64>
	...

0800ac84 <__swsetup_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4b2a      	ldr	r3, [pc, #168]	; (800ad30 <__swsetup_r+0xac>)
 800ac88:	4605      	mov	r5, r0
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	b118      	cbz	r0, 800ac98 <__swsetup_r+0x14>
 800ac90:	6a03      	ldr	r3, [r0, #32]
 800ac92:	b90b      	cbnz	r3, 800ac98 <__swsetup_r+0x14>
 800ac94:	f7fc fc3a 	bl	800750c <__sinit>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac9e:	0718      	lsls	r0, r3, #28
 800aca0:	d422      	bmi.n	800ace8 <__swsetup_r+0x64>
 800aca2:	06d9      	lsls	r1, r3, #27
 800aca4:	d407      	bmi.n	800acb6 <__swsetup_r+0x32>
 800aca6:	2309      	movs	r3, #9
 800aca8:	602b      	str	r3, [r5, #0]
 800acaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acae:	f04f 30ff 	mov.w	r0, #4294967295
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	e034      	b.n	800ad20 <__swsetup_r+0x9c>
 800acb6:	0758      	lsls	r0, r3, #29
 800acb8:	d512      	bpl.n	800ace0 <__swsetup_r+0x5c>
 800acba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acbc:	b141      	cbz	r1, 800acd0 <__swsetup_r+0x4c>
 800acbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc2:	4299      	cmp	r1, r3
 800acc4:	d002      	beq.n	800accc <__swsetup_r+0x48>
 800acc6:	4628      	mov	r0, r5
 800acc8:	f7fd fbda 	bl	8008480 <_free_r>
 800accc:	2300      	movs	r3, #0
 800acce:	6363      	str	r3, [r4, #52]	; 0x34
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	2300      	movs	r3, #0
 800acda:	6063      	str	r3, [r4, #4]
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	6023      	str	r3, [r4, #0]
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	f043 0308 	orr.w	r3, r3, #8
 800ace6:	81a3      	strh	r3, [r4, #12]
 800ace8:	6923      	ldr	r3, [r4, #16]
 800acea:	b94b      	cbnz	r3, 800ad00 <__swsetup_r+0x7c>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acf6:	d003      	beq.n	800ad00 <__swsetup_r+0x7c>
 800acf8:	4621      	mov	r1, r4
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 f883 	bl	800ae06 <__smakebuf_r>
 800ad00:	89a0      	ldrh	r0, [r4, #12]
 800ad02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad06:	f010 0301 	ands.w	r3, r0, #1
 800ad0a:	d00a      	beq.n	800ad22 <__swsetup_r+0x9e>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60a3      	str	r3, [r4, #8]
 800ad10:	6963      	ldr	r3, [r4, #20]
 800ad12:	425b      	negs	r3, r3
 800ad14:	61a3      	str	r3, [r4, #24]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	b943      	cbnz	r3, 800ad2c <__swsetup_r+0xa8>
 800ad1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad1e:	d1c4      	bne.n	800acaa <__swsetup_r+0x26>
 800ad20:	bd38      	pop	{r3, r4, r5, pc}
 800ad22:	0781      	lsls	r1, r0, #30
 800ad24:	bf58      	it	pl
 800ad26:	6963      	ldrpl	r3, [r4, #20]
 800ad28:	60a3      	str	r3, [r4, #8]
 800ad2a:	e7f4      	b.n	800ad16 <__swsetup_r+0x92>
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	e7f7      	b.n	800ad20 <__swsetup_r+0x9c>
 800ad30:	20000078 	.word	0x20000078

0800ad34 <_raise_r>:
 800ad34:	291f      	cmp	r1, #31
 800ad36:	b538      	push	{r3, r4, r5, lr}
 800ad38:	4604      	mov	r4, r0
 800ad3a:	460d      	mov	r5, r1
 800ad3c:	d904      	bls.n	800ad48 <_raise_r+0x14>
 800ad3e:	2316      	movs	r3, #22
 800ad40:	6003      	str	r3, [r0, #0]
 800ad42:	f04f 30ff 	mov.w	r0, #4294967295
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ad4a:	b112      	cbz	r2, 800ad52 <_raise_r+0x1e>
 800ad4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad50:	b94b      	cbnz	r3, 800ad66 <_raise_r+0x32>
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 f830 	bl	800adb8 <_getpid_r>
 800ad58:	462a      	mov	r2, r5
 800ad5a:	4601      	mov	r1, r0
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad62:	f000 b817 	b.w	800ad94 <_kill_r>
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d00a      	beq.n	800ad80 <_raise_r+0x4c>
 800ad6a:	1c59      	adds	r1, r3, #1
 800ad6c:	d103      	bne.n	800ad76 <_raise_r+0x42>
 800ad6e:	2316      	movs	r3, #22
 800ad70:	6003      	str	r3, [r0, #0]
 800ad72:	2001      	movs	r0, #1
 800ad74:	e7e7      	b.n	800ad46 <_raise_r+0x12>
 800ad76:	2400      	movs	r4, #0
 800ad78:	4628      	mov	r0, r5
 800ad7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad7e:	4798      	blx	r3
 800ad80:	2000      	movs	r0, #0
 800ad82:	e7e0      	b.n	800ad46 <_raise_r+0x12>

0800ad84 <raise>:
 800ad84:	4b02      	ldr	r3, [pc, #8]	; (800ad90 <raise+0xc>)
 800ad86:	4601      	mov	r1, r0
 800ad88:	6818      	ldr	r0, [r3, #0]
 800ad8a:	f7ff bfd3 	b.w	800ad34 <_raise_r>
 800ad8e:	bf00      	nop
 800ad90:	20000078 	.word	0x20000078

0800ad94 <_kill_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	2300      	movs	r3, #0
 800ad98:	4d06      	ldr	r5, [pc, #24]	; (800adb4 <_kill_r+0x20>)
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	4611      	mov	r1, r2
 800ada0:	602b      	str	r3, [r5, #0]
 800ada2:	f7f7 f9aa 	bl	80020fa <_kill>
 800ada6:	1c43      	adds	r3, r0, #1
 800ada8:	d102      	bne.n	800adb0 <_kill_r+0x1c>
 800adaa:	682b      	ldr	r3, [r5, #0]
 800adac:	b103      	cbz	r3, 800adb0 <_kill_r+0x1c>
 800adae:	6023      	str	r3, [r4, #0]
 800adb0:	bd38      	pop	{r3, r4, r5, pc}
 800adb2:	bf00      	nop
 800adb4:	2000070c 	.word	0x2000070c

0800adb8 <_getpid_r>:
 800adb8:	f7f7 b998 	b.w	80020ec <_getpid>

0800adbc <__swhatbuf_r>:
 800adbc:	b570      	push	{r4, r5, r6, lr}
 800adbe:	460c      	mov	r4, r1
 800adc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc4:	4615      	mov	r5, r2
 800adc6:	2900      	cmp	r1, #0
 800adc8:	461e      	mov	r6, r3
 800adca:	b096      	sub	sp, #88	; 0x58
 800adcc:	da0c      	bge.n	800ade8 <__swhatbuf_r+0x2c>
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	2100      	movs	r1, #0
 800add2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800add6:	bf0c      	ite	eq
 800add8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800addc:	2340      	movne	r3, #64	; 0x40
 800adde:	2000      	movs	r0, #0
 800ade0:	6031      	str	r1, [r6, #0]
 800ade2:	602b      	str	r3, [r5, #0]
 800ade4:	b016      	add	sp, #88	; 0x58
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	466a      	mov	r2, sp
 800adea:	f000 f849 	bl	800ae80 <_fstat_r>
 800adee:	2800      	cmp	r0, #0
 800adf0:	dbed      	blt.n	800adce <__swhatbuf_r+0x12>
 800adf2:	9901      	ldr	r1, [sp, #4]
 800adf4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800adf8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800adfc:	4259      	negs	r1, r3
 800adfe:	4159      	adcs	r1, r3
 800ae00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae04:	e7eb      	b.n	800adde <__swhatbuf_r+0x22>

0800ae06 <__smakebuf_r>:
 800ae06:	898b      	ldrh	r3, [r1, #12]
 800ae08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae0a:	079d      	lsls	r5, r3, #30
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	d507      	bpl.n	800ae22 <__smakebuf_r+0x1c>
 800ae12:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	6123      	str	r3, [r4, #16]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	6163      	str	r3, [r4, #20]
 800ae1e:	b002      	add	sp, #8
 800ae20:	bd70      	pop	{r4, r5, r6, pc}
 800ae22:	466a      	mov	r2, sp
 800ae24:	ab01      	add	r3, sp, #4
 800ae26:	f7ff ffc9 	bl	800adbc <__swhatbuf_r>
 800ae2a:	9900      	ldr	r1, [sp, #0]
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f7fd fb96 	bl	8008560 <_malloc_r>
 800ae34:	b948      	cbnz	r0, 800ae4a <__smakebuf_r+0x44>
 800ae36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae3a:	059a      	lsls	r2, r3, #22
 800ae3c:	d4ef      	bmi.n	800ae1e <__smakebuf_r+0x18>
 800ae3e:	f023 0303 	bic.w	r3, r3, #3
 800ae42:	f043 0302 	orr.w	r3, r3, #2
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	e7e3      	b.n	800ae12 <__smakebuf_r+0xc>
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	6020      	str	r0, [r4, #0]
 800ae4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	9b00      	ldr	r3, [sp, #0]
 800ae56:	6120      	str	r0, [r4, #16]
 800ae58:	6163      	str	r3, [r4, #20]
 800ae5a:	9b01      	ldr	r3, [sp, #4]
 800ae5c:	b15b      	cbz	r3, 800ae76 <__smakebuf_r+0x70>
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae64:	f000 f81e 	bl	800aea4 <_isatty_r>
 800ae68:	b128      	cbz	r0, 800ae76 <__smakebuf_r+0x70>
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	f023 0303 	bic.w	r3, r3, #3
 800ae70:	f043 0301 	orr.w	r3, r3, #1
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	431d      	orrs	r5, r3
 800ae7a:	81a5      	strh	r5, [r4, #12]
 800ae7c:	e7cf      	b.n	800ae1e <__smakebuf_r+0x18>
	...

0800ae80 <_fstat_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	2300      	movs	r3, #0
 800ae84:	4d06      	ldr	r5, [pc, #24]	; (800aea0 <_fstat_r+0x20>)
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	f7f7 f992 	bl	80021b6 <_fstat>
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	d102      	bne.n	800ae9c <_fstat_r+0x1c>
 800ae96:	682b      	ldr	r3, [r5, #0]
 800ae98:	b103      	cbz	r3, 800ae9c <_fstat_r+0x1c>
 800ae9a:	6023      	str	r3, [r4, #0]
 800ae9c:	bd38      	pop	{r3, r4, r5, pc}
 800ae9e:	bf00      	nop
 800aea0:	2000070c 	.word	0x2000070c

0800aea4 <_isatty_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	2300      	movs	r3, #0
 800aea8:	4d05      	ldr	r5, [pc, #20]	; (800aec0 <_isatty_r+0x1c>)
 800aeaa:	4604      	mov	r4, r0
 800aeac:	4608      	mov	r0, r1
 800aeae:	602b      	str	r3, [r5, #0]
 800aeb0:	f7f7 f990 	bl	80021d4 <_isatty>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d102      	bne.n	800aebe <_isatty_r+0x1a>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	b103      	cbz	r3, 800aebe <_isatty_r+0x1a>
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	bd38      	pop	{r3, r4, r5, pc}
 800aec0:	2000070c 	.word	0x2000070c

0800aec4 <_init>:
 800aec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec6:	bf00      	nop
 800aec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeca:	bc08      	pop	{r3}
 800aecc:	469e      	mov	lr, r3
 800aece:	4770      	bx	lr

0800aed0 <_fini>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	bf00      	nop
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr
